<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Who Am I</title>
      <link href="/archives/43d80f02.html"/>
      <url>/archives/43d80f02.html</url>
      
        <content type="html"><![CDATA[<h1 id="Magi的由来"><a href="#Magi的由来" class="headerlink" title="Magi的由来"></a>Magi的由来</h1><p>1.cum ergo natus esset Iesus in Bethleem Iudaeae in diebus Herodis regis ecce MAGI ab<br>oriente venerunt Hierosolymam. dicentes ubi est qui natus est rex Iudaeorum vidimus enim<br>stellam eius in oriente et venimus adorare eum.(Matthew2:1-2)</p><p>2.Magi亦名博士，掌握魔法者，正是他们最先来到耶稣面前，为他奉上黄金、乳香和没药。</p><p>若照主教的话语来讲，那么博士们可是犯了两项大错了，他们先是占卜观兆，然后又是行</p><p>预言的法术。他们常常会是当地的宗教祭司，或者是献上赞歌者。他们也在向着自己的弟子</p><p>授课，教授那些他们所知的，所感到的，所领悟的东西，这一部分是仅为识字阶级或教育阶级</p><p>所独享的，这被称作魔法，神圣而崇高的艺术。同样地，博士们也用只言片语教训着一般民众，</p><p>而那些暗中羡慕这些知识的人则将之记录下来，并混合多位博士的方法与民间口口相传的某些</p><p>“秘方”和“诀窍”，形成了那种带着残缺的魔法风格的民俗巫术。我要说这些是为了引出对某些</p><p>基督教人士的“行邪术”之污蔑的反击，我们先前已经说了，这些掌握魔法的人被称作 Magi。</p>]]></content>
      
      
      <categories>
          
          <category> 个人介绍 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> personal </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax学习笔记</title>
      <link href="/archives/cf486ef4.html"/>
      <url>/archives/cf486ef4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Ajax技术实战"><a href="#Ajax技术实战" class="headerlink" title="Ajax技术实战"></a>Ajax技术实战</h1><h2 id="一、Ajax简介"><a href="#一、Ajax简介" class="headerlink" title="一、Ajax简介"></a>一、Ajax简介</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330105531650.png" alt="image-20220330105531650"></p><p>​Ajax既“Asynchronous JavaScript And XML”（异步JavaScript 和XML），是指一种创建交互式、快速动态应用的网页开发技术、无需重新加载整个网页的情况下，能够更新页面局部数据的技术。</p><p>​通过在后台与服务器进行少量数据交换，Ajax 可以使页面实现异步更新。这意味着可 以在不重新加载整个页面的情况下，对页面的某部分进行更新。 </p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330105828278.png" alt="image-20220330105828278"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330105834370.png" alt="image-20220330105834370"></p><h2 id="二、Ajax的使用"><a href="#二、Ajax的使用" class="headerlink" title="二、Ajax的使用"></a>二、Ajax的使用</h2><h3 id="1-XMLHttpRequest对象"><a href="#1-XMLHttpRequest对象" class="headerlink" title="1.XMLHttpRequest对象"></a>1.XMLHttpRequest对象</h3><p>XMLHttpRequest 是浏览器接口对象，该对象的 API 可被 JavaScript、VBScript 以及其它 web 浏览器内嵌的脚本语言调用，通过 HTTP 协议在浏览器和 web 服务器之间收发 XML 或 其它数据。XMLHttpRequest 可以与服务器实现异步交互，而无需让整个页面刷新，因此成 为 Ajax 编程的核心对象。</p><h3 id="2-Ajax的使用步骤"><a href="#2-Ajax的使用步骤" class="headerlink" title="2. Ajax的使用步骤"></a>2. Ajax的使用步骤</h3><p>1.创建XMLHttpRequest对象</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br></pre></td></tr></table></figure><p>2.给定请求方式以及请求地址</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;http://www.example.com&quot;</span>);</span><br></pre></td></tr></table></figure><p>3.发送请求</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">xhr.send();</span><br></pre></td></tr></table></figure><p>4.获取服务器端和客户端的响应数据</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">xhr.onreadystatechange = function()</span><br><span class="line"><span class="punctuation">&#123;</span> <span class="comment">//0:open()没有被调用 </span></span><br><span class="line"><span class="comment">//1:open()正在被调用 </span></span><br><span class="line"><span class="comment">//2:send()正在被调用 </span></span><br><span class="line"><span class="comment">//3:服务端正在返回结果 </span></span><br><span class="line"><span class="comment">//4:请求结束，并且服务端已经结束发送数据到客户端 </span></span><br><span class="line">if(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)<span class="punctuation">&#123;</span> document.getElementById(<span class="string">&quot;span&quot;</span>).innerHTML=xhr.responseText; alert(xhr.responseText); <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">xhr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">        xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;ajax.do&quot;</span>);</span><br><span class="line">        xhr.send();</span><br><span class="line">        xhr.onreadystatechange = function () &#123;</span><br><span class="line"></span><br><span class="line">          <span class="keyword">if</span>(xhr.readyState ==<span class="number">4</span> &amp;&amp; xhr.status ==<span class="number">200</span>)</span><br><span class="line">          &#123;</span><br><span class="line">            alert(xhr.responseText);</span><br><span class="line">            document.getElementById(<span class="string">&quot;span&quot;</span>).innerHTML=xhr.responseText;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  &lt;h3&gt;北京尚学堂&lt;/h3&gt;</span><br><span class="line">  &lt;hr&gt;</span><br><span class="line">  &lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">  &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/ajax.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AjaxServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Hello Ajax&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-Ajax的运行原理"><a href="#3-Ajax的运行原理" class="headerlink" title="3.Ajax的运行原理"></a>3.Ajax的运行原理</h3><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330111024363.png" alt="image-20220330111024363"></p><h2 id="三、JSON详解"><a href="#三、JSON详解" class="headerlink" title="三、JSON详解"></a>三、JSON详解</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330111209771.png" alt="image-20220330111209771"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="1-JSON简介"><a href="#1-JSON简介" class="headerlink" title="1.JSON简介"></a>1.JSON简介</h3><p>JSON(JavaScript Object Notation) 是一种基于字符串的轻量级的数据交换格式。易于人阅 读和编写，同时也易于机器解析和生成。JSON 是 JavaScript 数据类型的子集。</p><h3 id="2-为什么要使用JSON"><a href="#2-为什么要使用JSON" class="headerlink" title="2.为什么要使用JSON"></a>2.为什么要使用JSON</h3><p>在 JSON 未出现之前在 Ajax 中对于数据传递方式，会使用 XML 作为主要数据格式来传 输数据。直到 JSON 出现后逐渐放弃使用 XML 作为数据传输格式。JSON 比 XML 更小、更快，更易解析</p><h3 id="3-JSON格式的特征"><a href="#3-JSON格式的特征" class="headerlink" title="3.JSON格式的特征"></a>3.JSON格式的特征</h3><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330111511485.png" alt="image-20220330111511485"></p><h4 id="3-1-JSON的语法规则"><a href="#3-1-JSON的语法规则" class="headerlink" title="3.1 JSON的语法规则"></a>3.1 JSON的语法规则</h4><p>JSON是按照特点的语法规则所生成的字符串结构</p><p>大括号表示 JSON 的字符串对象。{ } </p><p>属性和值用冒号分割。{“属性”:”value”} </p><p> 属性和属性之间用逗号分割。{“属性”:”value”,”属性”:”value”,…} </p><p>中括号表示数组。[{“属性”:”value”…},{“属性”:”value”…}] </p><p>JSON字符串对象：</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330111858913.png" alt="image-20220330111858913"></p><p>数组：</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330111917810.png" alt="image-20220330111917810"></p><h4 id="3-2-JSON的6种数据类型"><a href="#3-2-JSON的6种数据类型" class="headerlink" title="3.2 JSON的6种数据类型"></a>3.2 JSON的6种数据类型</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330111947800.png" alt="image-20220330111947800"></p><p>string：字符串，必须要用双引号引起来。 </p><p>number：数值，与 JavaScript 的 number 一致， </p><p>object：JavaScript 的对象形式，{ key:value }表示方式，可嵌套。 </p><p> array：数组，JavaScript 的 Array 表示方式[ value ]，可嵌套。 </p><p> true&#x2F;false：布尔类型，JavaScript 的 boolean 类型。 </p><p>null：空值，JavaScript 的 null。</p><h3 id="4-Jackson的使用"><a href="#4-Jackson的使用" class="headerlink" title="4. Jackson的使用"></a>4. Jackson的使用</h3><p>在 JDK 中并没有内置操作 JSON 格式数据的 API，因此使用处理 JSON 格式的数据需要借 助第三方类库。</p><p>几个常用的 JSON 解析类库： </p><p>Gson: 谷歌开发的 JSON 库，功能十分全面。 </p><p>FastJson: 阿里巴巴开发的 JSON 库，性能十分优秀。 </p><p>Jackson: 社区十分活跃且更新速度很快。被称为“最好的 Json 解析器”</p><h4 id="4-1-Jackson简介"><a href="#4-1-Jackson简介" class="headerlink" title="4.1 Jackson简介"></a>4.1 Jackson简介</h4><p>Jackson 是一种解析 JSON 格式数据的 API，也是最流行，速度最快的 JSON API。在 SpringMVC 中默认使用 Jackson API 处理 JSON 格式的数据。</p><p>Jackson下载地址：</p><p><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations">https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations</a> </p><p><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core">https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core</a> </p><p><a href="https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind">https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind</a></p><h4 id="4-2-在响应中通过JSON格式传递数据"><a href="#4-2-在响应中通过JSON格式传递数据" class="headerlink" title="4.2 在响应中通过JSON格式传递数据"></a>4.2 在响应中通过JSON格式传递数据</h4><p>在响应中使用Jackson处理JSON格式数据的步骤：</p><p>添加 jackson-annotations.jar、jackson-core.jar、jackson-databind.jar </p><p>通过 jackson API 将 Java 对象转换 JSON 格式 </p><p>修改响应头，响应类型为 application&#x2F;json </p><p>将结果基于字符输出流推回客户端浏览器 </p><p>在页面的中通过 JavaScript 的 JSON.parse()函数将 JSON 格式的数据转换为 JavaScript</p><p>对象 </p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330112332027.png" alt="image-20220330112332027"></p><h5 id="4-2-1-通过JSON格式在响应中传递单个对象"><a href="#4-2-1-通过JSON格式在响应中传递单个对象" class="headerlink" title="4.2.1 通过JSON格式在响应中传递单个对象"></a>4.2.1 通过JSON格式在响应中传递单个对象</h5><p>需求：</p><p>定义一个Users类，包含userid、username属性</p><p>实例化一个 Users 对象，通过 JSON 格式将 Users 对象响应到客户端浏览器。 </p><p>将 Users 对象中的数据插入到页面中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String usersex;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date userbirth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserid</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userid = userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsersex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usersex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsersex</span><span class="params">(String usersex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usersex = usersex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUserbirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userbirth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserbirth</span><span class="params">(Date userbirth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userbirth = userbirth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">        &lt;script&gt;</span><br><span class="line">            function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="type">var</span> <span class="variable">xhr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">                xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;single.do&quot;</span>);</span><br><span class="line">                xhr.send();</span><br><span class="line">                xhr.onreadystatechange = function () &#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(xhr.readyState ==<span class="number">4</span> &amp;&amp; xhr.status ==<span class="number">200</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        alert(xhr.responseText);</span><br><span class="line">                        <span class="comment">//通过javaScript的内置对象JSON中的parse函数将JSON格式的函数进行转换</span></span><br><span class="line">                        <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(xhr.responseText);</span><br><span class="line">                        alert(obj.userid+<span class="string">&quot;&quot;</span>+obj.username);</span><br><span class="line">                        document.getElementById(<span class="string">&quot;span&quot;</span>).innerHTML=obj.userid+<span class="string">&quot;&lt;br/&gt;&quot;</span>+obj.username;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/script&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;JSON单个对象响应&lt;/h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过JSON格式响应单个对象</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/single.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SingleObjectServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建Users对象</span></span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setUserid(<span class="number">1</span>);</span><br><span class="line">        users.setUsername(<span class="string">&quot;oldlu&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用jackson的API将Users对象转换成JSON格式的字符串对象</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="comment">//将Users对象转换成JSON格式的字符串对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> objectMapper.writeValueAsString(users);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        <span class="comment">//设置响应类型为application/json</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(string);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-2-通过JSON格式在响应中传递多个对象"><a href="#4-2-2-通过JSON格式在响应中传递多个对象" class="headerlink" title="4.2.2 通过JSON格式在响应中传递多个对象"></a>4.2.2 通过JSON格式在响应中传递多个对象</h5><p>需求：</p><p>定义一个 Users 类，包含 userid、username 属性。 </p><p>实例化多个 Users 对象，通过 JSON 格式将 Users 对象响应到客户端浏览器。 </p><p>将 Users 对象中的数据插入到页面中。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String usersex;</span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date userbirth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserid</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserid</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userid = userid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.username = username;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUsersex</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> usersex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsersex</span><span class="params">(String usersex)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.usersex = usersex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Date <span class="title function_">getUserbirth</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> userbirth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserbirth</span><span class="params">(Date userbirth)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.userbirth = userbirth;</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">26</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">49</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">xhr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;multiple.do&quot;</span>);</span><br><span class="line">            xhr.send();</span><br><span class="line">            xhr.onreadystatechange = function () &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(xhr.readyState ==<span class="number">4</span> &amp;&amp; xhr.status ==<span class="number">200</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    alert(xhr.responseText);</span><br><span class="line">                    <span class="comment">//通过javaScript的内置对象JSON中的parse函数将JSON格式的函数进行转换</span></span><br><span class="line">                    <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(xhr.responseText);</span><br><span class="line">                    <span class="type">var</span> <span class="variable">temp</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">                    <span class="keyword">for</span>( i =<span class="number">0</span>;i&lt;obj.length;i++)</span><br><span class="line">                    &#123;</span><br><span class="line">                        alert(obj[i].userid+<span class="string">&quot; &quot;</span>+obj[i].username);</span><br><span class="line">                        temp += obj[i].userid+<span class="string">&quot; &quot;</span>+obj[i].username+<span class="string">&quot;&lt;br/&gt;&quot;</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    document.getElementById(<span class="string">&quot;span&quot;</span>).innerHTML=temp;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;JSON的多个对象响应&lt;/h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过JSON格式响应多个对象</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/multiple.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MultipleObjectServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//新建多个对象</span></span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setUserid(<span class="number">1</span>);</span><br><span class="line">        users.setUsername(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">        users1.setUserid(<span class="number">2</span>);</span><br><span class="line">        users1.setUsername(<span class="string">&quot;zhen&quot;</span>);</span><br><span class="line">        users2.setUserid(<span class="number">3</span>);</span><br><span class="line">        users2.setUsername(<span class="string">&quot;hao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要将多个对象放入到集合中</span></span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(users);</span><br><span class="line">        list.add(users1);</span><br><span class="line">        list.add(users2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过jackson将List转换成JSON格式的字符串对象</span></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> objectMapper.writeValueAsString(list);</span><br><span class="line">        System.out.println(string);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="comment">//将字符串写回到jsp中</span></span><br><span class="line">        pw.println(string);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-2-3-在JSON中通过Map传递数据"><a href="#4-2-3-在JSON中通过Map传递数据" class="headerlink" title="4.2.3 在JSON中通过Map传递数据"></a>4.2.3 在JSON中通过Map传递数据</h5><p>​在 JSON 格式中可以直接使用 Map 作为传递数据的模型。因为 Map 结构本身就是 key 与 value 的结构与 JSON 格式对象模型完全匹配，所以我们可以直接将一个 Map 对象转换为 JSON 格式的字符串对象。这对于我们来说是一件非常方便的事情，如果我们返回的数据并 没有对应的模型来存放数据，那么我们可以通过 Map 来解决。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">26</span></span><br><span class="line">  Time: <span class="number">23</span>:<span class="number">11</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">xhr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            xhr.open(<span class="string">&quot;get&quot;</span>,<span class="string">&quot;map.do&quot;</span>);</span><br><span class="line">            xhr.send();</span><br><span class="line">            xhr.onreadystatechange = function () &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(xhr.readyState ==<span class="number">4</span> &amp;&amp; xhr.status ==<span class="number">200</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    alert(xhr.responseText);</span><br><span class="line">                    <span class="comment">//通过javaScript的内置对象JSON中的parse函数将JSON格式的函数进行转换</span></span><br><span class="line">                    <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> JSON.parse(xhr.responseText);</span><br><span class="line">                    alert(obj.userid+<span class="string">&quot; &quot;</span>+obj.url);</span><br><span class="line">                    document.getElementById(<span class="string">&quot;span&quot;</span>).innerHTML=obj.userid+<span class="string">&quot;&lt;br&gt;&quot;</span>+obj.url;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;Map模型的使用&lt;/h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 使用Map模型传递数据</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/map.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MapModelServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//一个Map对象表示的是一个JSON格式的对象</span></span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userid&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        map.put(<span class="string">&quot;url&quot;</span>,<span class="string">&quot;map.do&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ObjectMapper</span> <span class="variable">objectMapper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line">        <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> objectMapper.writeValueAsString(map);</span><br><span class="line">        System.out.println(string);</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(string);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-在请求中通过JSON格式传递数据"><a href="#4-3-在请求中通过JSON格式传递数据" class="headerlink" title="4.3 在请求中通过JSON格式传递数据"></a>4.3 在请求中通过JSON格式传递数据</h4><p>我们除了可以在响应中通过 JSON 格式来传递数据以外，在请求中也可以使用 JSON 格 式传递数据。如果在请求中使用 JSON 格式传递数据，那么提交方式需要使用 POST 方式，通过 JavaScript 中的 JSON.stringify()函数将 JavaScript 对象转换为 JSON 格式数据。通过 send 方法将参数传递到 Servlet 中，在 Servlet 中通过字符输入流获取 JSON 格式数据。</p><p>在请求中使用 Jackson 处理 JSON 格式数据的步骤： </p><p>添加 jackson-annotations.jar、jackson-core.jar、jackson-databind.jar </p><p>在页面的 JavaScript 中通过 JSON.stringify()函数将 JavaScript 对象转换为 JSON 格式 </p><p>的数据 </p><p> 将请求方式修改为 POST 方式 </p><p>通过 send()函数将 JSON 格式的数据提交到服务端。 </p><p> 在 Servlet 中通过字符输入流读取请求体中 JSON 格式的数据 </p><p>通过 jackson API 将获取到的 JSON 格式的数据转换为 Java 对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">26</span></span><br><span class="line">  Time: <span class="number">23</span>:<span class="number">26</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">id</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;userid&quot;</span>).value;</span><br><span class="line">            <span class="type">var</span> <span class="variable">name</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;username&quot;</span>).value;</span><br><span class="line">            <span class="comment">//userid与username应与pojo的名字一致</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">obj</span> <span class="operator">=</span> &#123;userid:id,username:name&#125;;</span><br><span class="line">            <span class="type">var</span> <span class="variable">content</span> <span class="operator">=</span> JSON.stringify(obj);</span><br><span class="line">            alert(content);</span><br><span class="line">            <span class="type">var</span> <span class="variable">xhr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">            xhr.open(<span class="string">&quot;post&quot;</span>,<span class="string">&quot;json.do&quot;</span>);</span><br><span class="line">            xhr.send(content);</span><br><span class="line">            xhr.onreadystatechange = function () &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(xhr.readyState ==<span class="number">4</span> &amp;&amp; xhr.status ==<span class="number">200</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    alert(xhr.responseText);</span><br><span class="line">                    document.getElementById(<span class="string">&quot;span&quot;</span>).innerHTML=xhr.responseText;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;在请求中通过JSON格式传输数据&lt;/h3&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line">用户ID:&lt;input name=<span class="string">&quot;userid&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">用户姓名:&lt;input name=<span class="string">&quot;username&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;br&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在$.ajax方法中提交JSON格式的数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/jsonData.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonDataServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> req.getReader().readLine();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(s);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.4 Jackson的常用注解</p><h5 id="4-4-1-JsonProperty"><a href="#4-4-1-JsonProperty" class="headerlink" title="4.4.1 @JsonProperty"></a>4.4.1 @JsonProperty</h5><p>此注解用于属性上，作用是把该属性的名称序列化为另外一个名称，如把 username 属 性序列化为 name，@JsonProperty(“name”)。 </p><h5 id="4-4-2-JsonIgnore"><a href="#4-4-2-JsonIgnore" class="headerlink" title="4.4.2 @JsonIgnore"></a><strong>4.4.2 @JsonIgnore</strong></h5><p>此注解用于属性或者方法上（一般都是定义在属性上），用来完全忽略被注解的字段和 方法对应的属性，返回的 json 数据即不包含该属性。 </p><h5 id="4-4-3-JsonFormat"><a href="#4-4-3-JsonFormat" class="headerlink" title="4.4.3 @JsonFormat"></a>4.4.3 @JsonFormat</h5><p>此注解用于属性或者方法上（一般都是定义在属性上），可以方便的把 Date 类型属性的值直接转化为我们想要的样式。如：@JsonFormat(pattern&#x3D;”yyyy-MM-dd hh:mm:ss”) </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="comment">//对userid属性进行忽略</span></span><br><span class="line">    <span class="meta">@JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多个注解叠加在一起貌似会瞬间失去所有注解效果</span></span><br><span class="line">    <span class="comment">//把username改成了name（对属性名进行更改）</span></span><br><span class="line">    <span class="meta">@JsonProperty(&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date userbirth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUserbirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userbirth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserbirth</span><span class="params">(Date userbirth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userbirth = userbirth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserid</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userid = userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-5-Jackson工具类的使用"><a href="#4-5-Jackson工具类的使用" class="headerlink" title="4.5 Jackson工具类的使用"></a>4.5 Jackson工具类的使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonProcessingException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.JavaType;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JSON转换工具类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义jackson对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ObjectMapper</span> <span class="variable">MAPPER</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将对象转换成json字符串。</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Title: pojoToJson&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">objectToJson</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">string</span> <span class="operator">=</span> MAPPER.writeValueAsString(data);</span><br><span class="line">         <span class="keyword">return</span> string;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (JsonProcessingException e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json结果集转化为对象</span></span><br><span class="line"><span class="comment">     * </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData json数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; T <span class="title function_">jsonToPojo</span><span class="params">(String jsonData, Class&lt;T&gt; beanType)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">T</span> <span class="variable">t</span> <span class="operator">=</span> MAPPER.readValue(jsonData, beanType);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将json数据转换成pojo对象list</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Title: jsonToList&lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;Description: &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> jsonData</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> beanType</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt;List&lt;T&gt; <span class="title function_">jsonToList</span><span class="params">(String jsonData, Class&lt;T&gt; beanType)</span> &#123;</span><br><span class="line">       <span class="type">JavaType</span> <span class="variable">javaType</span> <span class="operator">=</span> MAPPER.getTypeFactory().constructParametricType(List.class, beanType);</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">          List&lt;T&gt; list = MAPPER.readValue(jsonData, javaType);</span><br><span class="line">          <span class="keyword">return</span> list;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、Jquery的Ajax使用"><a href="#四、Jquery的Ajax使用" class="headerlink" title="四、Jquery的Ajax使用"></a>四、Jquery的Ajax使用</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330163538781.png" alt="image-20220330163538781"></p><p>在 JQuery 中提供了对 Ajax 的封装，让我们在使用 Ajax 技术时变得更加容易。在 JQuery 中提供了很多的基于 Ajax 发送异步请求的方法，如：$.ajax()、$.get()、$.post()、$.getJSON()。</p><h3 id="1-ajax-的使用"><a href="#1-ajax-的使用" class="headerlink" title="1.$.ajax()的使用"></a>1.$.ajax()的使用</h3><h4 id="1-1-语法结构"><a href="#1-1-语法结构" class="headerlink" title="1.1 语法结构"></a>1.1 语法结构</h4><p>$.ajax({name:value,name:value……})</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330163736704.png" alt="image-20220330163736704"></p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">18</span>:<span class="number">49</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">                url:<span class="string">&quot;jqueryAjax.do&quot;</span>,</span><br><span class="line">                success:function(result)</span><br><span class="line">                &#123;</span><br><span class="line">                    $(<span class="string">&quot;span&quot;</span>).html(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于jQuery的$.ajax方法发送异步请求</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/jqueryAjax.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jqueryAjaxServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(<span class="string">&quot;Hello Jquery Ajax&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-ajax-在异步请求中提交数据"><a href="#1-2-ajax-在异步请求中提交数据" class="headerlink" title="1.2 $.ajax()在异步请求中提交数据"></a>1.2 $.ajax()在异步请求中提交数据</h4><p>在$.ajax()方法中通过 data 属性来存放提交的数据，支持 JSON 格式的数据。</p><h5 id="1-2-1-提交普通格式数据"><a href="#1-2-1-提交普通格式数据" class="headerlink" title="1.2.1 提交普通格式数据"></a>1.2.1 提交普通格式数据</h5><p>在 data 属 性 中 我 们 可 以 通 过 两 种 方 式 来 指 定 需 要 提 交 的 数 据 。 一 种 是 通 过 name&#x3D;value&amp;name&#x3D;value 的结构。另一种是通过 JavaScript 对象来指定提交数据。无论使用 哪种方式在 Servlet 中都是通过 request.getParameter 方法根据 name 获取 value 的。</p><h6 id="1-2-1-1-通过标准格式指定提交数据"><a href="#1-2-1-1-通过标准格式指定提交数据" class="headerlink" title="1..2.1.1 通过标准格式指定提交数据"></a>1..2.1.1 通过标准格式指定提交数据</h6><p>data:”name&#x3D;value&amp;name&#x3D;value…..” </p><p>在 Servlet 中通过 request.getParameter 来获取提交的数据。</p><h6 id="1-2-1-2-通过JavaScript对象指定提交数据"><a href="#1-2-1-2-通过JavaScript对象指定提交数据" class="headerlink" title="1.2.1.2 通过JavaScript对象指定提交数据"></a>1.2.1.2 通过JavaScript对象指定提交数据</h6><p>data:{</p><p>userid:100, </p><p>username:”oldlu” </p><p>}</p><p>在 Servlet 中通过 request.getParameter 来获取提交的数据。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">30</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">                url:<span class="string">&quot;data.do&quot;</span>,</span><br><span class="line">                <span class="comment">// data:&quot;id=&quot;+userid+&quot;name=&quot;+username,</span></span><br><span class="line">                data:&#123;</span><br><span class="line">                    id:userid,</span><br><span class="line">                    name:username</span><br><span class="line">                &#125;,</span><br><span class="line">                success:function(result)</span><br><span class="line">                &#123;</span><br><span class="line">                    $(<span class="string">&quot;#span&quot;</span>).html(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户id：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在$.ajax()方法中提交数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/data.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(userid+<span class="string">&quot; &quot;</span>+username);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(userid+<span class="string">&quot; &quot;</span>+username);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-2-提交JSON格式数据"><a href="#1-2-2-提交JSON格式数据" class="headerlink" title="1.2.2 提交JSON格式数据"></a>1.2.2 提交JSON格式数据</h5><p>在$.ajax()中提交 JSON 格式的数据需要使用 post 方式提交，通过 JSON.stringify()函数将 JavaScript 对象转换成 JSON 格式的字符串。在 Servlet 中通过字符输入获取提交的 JSON 格式 的数据。</p><p>data:JSON.stringify({name:value,name:value……}) </p><p>在 Servlet 中通过 req.getReader().readLine()来获取提交的数据。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">46</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                url:<span class="string">&quot;jsonData.do&quot;</span>,</span><br><span class="line">                <span class="comment">// data:&quot;id=&quot;+userid+&quot;name=&quot;+username,</span></span><br><span class="line">                data:JSON.stringify(&#123;</span><br><span class="line">                   id:userid,</span><br><span class="line">                   name:username</span><br><span class="line">                &#125;),</span><br><span class="line">                success:function(result)</span><br><span class="line">                &#123;</span><br><span class="line">                    $(<span class="string">&quot;#span&quot;</span>).html(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户id：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在$.ajax方法中提交JSON格式的数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/jsonData.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonDataServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> req.getReader().readLine();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(s);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-ajax-处理响应中的-JSON-格式数据"><a href="#1-3-ajax-处理响应中的-JSON-格式数据" class="headerlink" title="1.3 **$.ajax()处理响应中的 **JSON 格式数据"></a>1.3 **$.ajax()处理响应中的 **JSON <strong>格式数据</strong></h4><p>$.ajax()方法会根据 dataType 属性中的值自动对响应的数据做类型处理。如果响应的是 一个 JSON 格式的数据，那么 dataType 的值为“JSON”,在回调函数中我们得到的直接就是JSON 字符串转换完的 JavaScript 对象。不需要在使用 JSON.parse()做格式的转换处理。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">06</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                url:<span class="string">&quot;jsonConvert.do&quot;</span>,</span><br><span class="line">                dataType:<span class="string">&quot;json&quot;</span>,</span><br><span class="line">                <span class="comment">// data:&quot;id=&quot;+userid+&quot;name=&quot;+username,</span></span><br><span class="line">                data:JSON.stringify(&#123;</span><br><span class="line">                    id:userid,</span><br><span class="line">                    name:username</span><br><span class="line">                &#125;),</span><br><span class="line">                success:function(result)</span><br><span class="line">                &#123;   alert(result.id+<span class="string">&quot; &quot;</span>+result.name);</span><br><span class="line">                    $(<span class="string">&quot;#span&quot;</span>).html(result.id+<span class="string">&quot; &quot;</span>+result.name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户id：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 提交JSON格式数据在页面中自动转换类型</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/jsonConvert.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JsonConvertServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> req.getReader().readLine();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(s);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-get-的使用"><a href="#2-get-的使用" class="headerlink" title="2 $.get()的使用"></a>2 $.get()的使用</h3><p>$.get()方法是$.ajax()方法基于 get 方式发送异步请求的简化版。 </p><h4 id="2-1-语法结构"><a href="#2-1-语法结构" class="headerlink" title="2.1 语法结构"></a>2.1 语法结构</h4><p>$.get(url,function(result)) </p><p>$.get(url,data,function(result)) </p><h4 id="2-2-通过标准格式指定提交数据"><a href="#2-2-通过标准格式指定提交数据" class="headerlink" title="2.2 通过标准格式指定提交数据"></a>2.2 通过标准格式指定提交数据</h4><p>$.get(url,”name&#x3D;value&amp;name&#x3D;value”,function(result)) </p><h4 id="2-3-通过JavaScript对象指定提交数据"><a href="#2-3-通过JavaScript对象指定提交数据" class="headerlink" title="2.3 通过JavaScript对象指定提交数据"></a>2.3 通过JavaScript对象指定提交数据</h4><p>$.get(url,{userid:1,username:”oldlu”,……},function(result)) </p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">17</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">            <span class="comment">// $.get(&quot;data.do&quot;,&quot;id=&quot;+userid+&quot;&amp;name=&quot;+username,function (result) &#123;</span></span><br><span class="line">            <span class="comment">//     $(&quot;#span&quot;).html(result);</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line">            $.get(<span class="string">&quot;data.do&quot;</span>,&#123;id:userid,name:username&#125;,function (result) &#123;</span><br><span class="line">                $(<span class="string">&quot;#span&quot;</span>).html(result);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户id：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在$.ajax()方法中提交数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/data.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(userid+<span class="string">&quot; &quot;</span>+username);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(userid+<span class="string">&quot; &quot;</span>+username);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-post-的使用"><a href="#3-post-的使用" class="headerlink" title="3.$.post()的使用"></a>3.$.post()的使用</h3><p>$.post()方法是$.ajax()方法基于 post 方式发送异步请求的简化版</p><h4 id="3-1-语法结构"><a href="#3-1-语法结构" class="headerlink" title="3.1 语法结构"></a>3.1 语法结构</h4><p>$.post(url,function(result)) </p><p>$.post(url,data,function(result)) </p><h4 id="3-2-通过标准格式指定提交数据"><a href="#3-2-通过标准格式指定提交数据" class="headerlink" title="3.2 通过标准格式指定提交数据"></a>3.2 通过标准格式指定提交数据</h4><p>$.post(url,”name&#x3D;value&amp;name&#x3D;value”,function(result))</p><h4 id="3-3-通过JavaScript对象指定提交数据"><a href="#3-3-通过JavaScript对象指定提交数据" class="headerlink" title="3.3 通过JavaScript对象指定提交数据"></a>3.3 通过JavaScript对象指定提交数据</h4><p>$.post(url,{userid:1,username:”oldlu”,……},function(result))</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">21</span>:<span class="number">44</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">            <span class="comment">// $.post(&quot;data.do&quot;,&quot;id=&quot;+userid+&quot;&amp;name=&quot;+username,function (result) &#123;</span></span><br><span class="line">            <span class="comment">//     $(&quot;#span&quot;).html(result);</span></span><br><span class="line">            <span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//基于javascript对象</span></span><br><span class="line">            $.post(<span class="string">&quot;data.do&quot;</span>,&#123;id:userid,name:username&#125;,function (result) &#123;</span><br><span class="line">                $(<span class="string">&quot;#span&quot;</span>).html(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户id：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在$.ajax()方法中提交数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/data.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(userid+<span class="string">&quot; &quot;</span>+username);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(userid+<span class="string">&quot; &quot;</span>+username);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-getJSON-的使用"><a href="#4-getJSON-的使用" class="headerlink" title="4. $.getJSON()的使用"></a>4. $.getJSON()的使用</h3><p>.getJSON()方法是$.ajax()方法基于 get 方式发送异步请求，并将响应结果中 JSON 格式 的字符串对象自动转换为 JavaScript 对象。在使用该方法时要求返回的数据必须是 JSON 格 式类型。$.getJSON()方法和 resp.setContentType(“application&#x2F;json”)是一起使用的。</p><h4 id="4-1-语法结构"><a href="#4-1-语法结构" class="headerlink" title="4.1 语法结构"></a>4.1 语法结构</h4><p>$.getJSON(url,function(result)) </p><p>$.getJSON(url,data,function(result)) </p><h4 id="4-2通过标准格式指定提交数据"><a href="#4-2通过标准格式指定提交数据" class="headerlink" title="4.2通过标准格式指定提交数据"></a>4.2通过标准格式指定提交数据</h4><p>$.getJSON(url,”name&#x3D;value&amp;name&#x3D;value”,function(result)) </p><h4 id="4-3-通过JavaScript对象指定提交数据"><a href="#4-3-通过JavaScript对象指定提交数据" class="headerlink" title="4.3 通过JavaScript对象指定提交数据"></a>4.3 通过JavaScript对象指定提交数据</h4><p>$.getJSON(url,{userid:1,username:”oldlu”,……},function(result)) </p><p>要求返回的数据格式必须是 JSON 格式</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">22</span>:08</span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">            $.getJSON(<span class="string">&quot;getJson.do&quot;</span>,&#123;id:userid,name:username&#125;,function (result) &#123;</span><br><span class="line">                alert(result.userid+<span class="string">&quot; &quot;</span>+result.username);</span><br><span class="line">                $(<span class="string">&quot;#span&quot;</span>).html(result.userid+<span class="string">&quot; &quot;</span>+result.username);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">用户id：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.common.JsonUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *getJSON方法传递数据并返回JSON格式数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/getJson.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetJSONServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;userid&quot;</span>,userid);</span><br><span class="line">        map.put(<span class="string">&quot;username&quot;</span>,username);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JsonUtils.objectToJson(map);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(s);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-serialize-方法的使用"><a href="#5-serialize-方法的使用" class="headerlink" title="5 serialize()方法的使用"></a>5 serialize()方法的使用</h3><p>将 form 表单中的数据自动拼接成 name&#x3D;value&amp;name&#x3D;value 结构。</p><h4 id="5-1-语法结构"><a href="#5-1-语法结构" class="headerlink" title="5.1 语法结构"></a>5.1 语法结构</h4><p>var param &#x3D; $(“form”).serialize(); </p><p>param 的值为：name&#x3D;value&amp;name&#x3D;value</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">38</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        function <span class="title function_">but</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">serialize</span> <span class="operator">=</span> $(<span class="string">&quot;#form&quot;</span>).serialize();</span><br><span class="line">            alert(serialize);</span><br><span class="line">            $.ajax(&#123;</span><br><span class="line">                type:<span class="string">&quot;get&quot;</span>,</span><br><span class="line">                url:<span class="string">&quot;data.do&quot;</span>,</span><br><span class="line">                data:serialize,</span><br><span class="line">                <span class="comment">// data:&#123;</span></span><br><span class="line">                <span class="comment">//     id:userid,</span></span><br><span class="line">                <span class="comment">//     name:username</span></span><br><span class="line">                <span class="comment">// &#125;,</span></span><br><span class="line">                success:function(result)</span><br><span class="line">                &#123;</span><br><span class="line">                    $(<span class="string">&quot;#span&quot;</span>).html(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form id=<span class="string">&quot;form&quot;</span>&gt;</span><br><span class="line">    用户id：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;userid&quot;</span> name=<span class="string">&quot;id&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    用户姓名：&lt;input type=<span class="string">&quot;text&quot;</span> id=<span class="string">&quot;username&quot;</span> name=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;span id=<span class="string">&quot;span&quot;</span>&gt;&lt;/span&gt;</span><br><span class="line">&lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;OK&quot;</span> onclick=<span class="string">&quot;but()&quot;</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在$.ajax()方法中提交数据</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/data.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(userid+<span class="string">&quot; &quot;</span>+username);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(userid+<span class="string">&quot; &quot;</span>+username);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、Ajax实战案例"><a href="#五、Ajax实战案例" class="headerlink" title="五、Ajax实战案例"></a>五、Ajax实战案例</h2><p>需求：创建 User 类，包含 uesrid、username、usersex、userbirth 属性。</p><p>在用户管理页面中通过 Ajax 技术完成对用户数据载入、添加用户、更新用户、删除用 </p><p>户操作。 </p><h3 id="1-搭建环境"><a href="#1-搭建环境" class="headerlink" title="1 搭建环境"></a>1 搭建环境</h3><h4 id="1-1-创建User类"><a href="#1-1-创建User类" class="headerlink" title="1.1 创建User类"></a>1.1 创建User类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonFormat;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnore;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="comment">//对userid属性进行忽略</span></span><br><span class="line"><span class="comment">//    @JsonIgnore</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//多个注解叠加在一起貌似会瞬间失去所有注解效果</span></span><br><span class="line">    <span class="comment">//把username改成了name（对属性名进行更改）</span></span><br><span class="line"><span class="comment">//    @JsonProperty(&quot;name&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Date userbirth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">getUserbirth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userbirth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserbirth</span><span class="params">(Date userbirth)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userbirth = userbirth;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserid</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userid = userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-在页面中创建表格"><a href="#1-2-在页面中创建表格" class="headerlink" title="1.2 在页面中创建表格"></a>1.2 在页面中创建表格</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">46</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户管理&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;table align=<span class="string">&quot;center&quot;</span> width=<span class="string">&quot;60%&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;ID：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userid&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;性别：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;usersex&quot;</span> id=<span class="string">&quot;usersex&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;生日：&lt;/td&gt; &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userbirth&quot;</span> id=<span class="string">&quot;userbirth&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;td colspan=<span class="string">&quot;4&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;添加用户&quot;</span> id=<span class="string">&quot;add&quot;</span> /&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;更新用户&quot;</span> id=<span class="string">&quot;update&quot;</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table align=<span class="string">&quot;center&quot;</span> width=<span class="string">&quot;60%&quot;</span> bgcolor=<span class="string">&quot;&quot;</span> border=<span class="string">&quot;1&quot;</span> id=<span class="string">&quot;myTable&quot;</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;td&gt;ID&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody id=<span class="string">&quot;tBody&quot;</span>&gt;&lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-加载用户数据"><a href="#2-加载用户数据" class="headerlink" title="2 加载用户数据"></a>2 加载用户数据</h3><h4 id="2-1-通过Ajax完成页面数据初始化"><a href="#2-1-通过Ajax完成页面数据初始化" class="headerlink" title="2.1 通过Ajax完成页面数据初始化"></a>2.1 通过Ajax完成页面数据初始化</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">       //获取页面初始化数据</span><br><span class="line">        getData();</span><br><span class="line">     &#125;);</span><br><span class="line">    //获取页面初始化数据</span><br><span class="line">    function getData() &#123;</span><br><span class="line">        $.getJSON(&quot;user.do&quot;,&#123;flag:&quot;getData&quot;&#125;,function (result) &#123;</span><br><span class="line">            init(result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    //遍历数组生成数据</span><br><span class="line">    function init(obj) &#123;</span><br><span class="line">        var str = &quot;&quot;;</span><br><span class="line">        $.each(obj,function () &#123;</span><br><span class="line">            str += &quot;&lt;tr align=&#x27;center&#x27;&gt;&lt;td id =&#x27;&quot; + this.userid + &quot;&#x27;&gt;&quot; + this.userid + &quot;&lt;/td&gt;&lt;td&gt;&quot; + this.username + &quot;&lt;/td&gt;&lt;td&gt;&quot; + this.usersex + &quot;&lt;/td&gt;&lt;td&gt;&quot; + this.userbirth + &quot;&lt;/td&gt;&lt;td&gt;&lt;a href=&#x27;#&#x27; onclick=&#x27;preUpdateUser(&quot;+this.userid+&quot;)&#x27;&gt;选择更新&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#x27;#&#x27; onclick=&#x27;deleteUser(&quot; + this.userid + &quot;)&#x27;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span><br><span class="line">        &#125;);</span><br><span class="line">       $(&quot;#tBody&quot;).prepend(str);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-2-创建Servlet处理页面数据初始化请求"><a href="#2-2-创建Servlet处理页面数据初始化请求" class="headerlink" title="2.2 创建Servlet处理页面数据初始化请求"></a>2.2 创建Servlet处理页面数据初始化请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.common.JsonUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用户管理servlet</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;getData&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getData(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;addUser&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;updateUser&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.updateUser(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.deleteUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模拟数据初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;lizhen&quot;</span>);</span><br><span class="line">        user.setUserid(<span class="number">1</span>);</span><br><span class="line">        user.setUsersex(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        user.setUserbirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;lilililiz&quot;</span>);</span><br><span class="line">        user1.setUserid(<span class="number">2</span>);</span><br><span class="line">        user1.setUsersex(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        user1.setUserbirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(user);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面初始化数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) <span class="built_in">this</span>.getServletContext().getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JsonUtils.objectToJson(list);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(s);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-添加用户操作"><a href="#3-添加用户操作" class="headerlink" title="3.添加用户操作"></a>3.添加用户操作</h3><h4 id="3-1-通过Ajax完成添加用户"><a href="#3-1-通过Ajax完成添加用户" class="headerlink" title="3.1 通过Ajax完成添加用户"></a>3.1 通过Ajax完成添加用户</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">       <span class="comment">//获取页面初始化数据</span></span><br><span class="line">        getData();</span><br><span class="line">        <span class="comment">//添加按钮绑定点击事件,通过id选择器</span></span><br><span class="line">        $(<span class="string">&quot;#add&quot;</span>).click(function () &#123;</span><br><span class="line">            addOrUpdateUser(<span class="string">&quot;addUser&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//获取页面初始化数据</span></span><br><span class="line">    function <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        $.getJSON(<span class="string">&quot;user.do&quot;</span>,&#123;flag:<span class="string">&quot;getData&quot;</span>&#125;,function (result) &#123;</span><br><span class="line">            init(result);</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历数组生成数据</span></span><br><span class="line">    function <span class="title function_">init</span><span class="params">(obj)</span> &#123;</span><br><span class="line">        <span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        $.each(obj,function () &#123;</span><br><span class="line">            str += <span class="string">&quot;&lt;tr align=&#x27;center&#x27;&gt;&lt;td id =&#x27;&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;&#x27;&gt;&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.usersex + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.userbirth + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&lt;a href=&#x27;#&#x27; onclick=&#x27;preUpdateUser(&quot;</span>+<span class="built_in">this</span>.userid+<span class="string">&quot;)&#x27;&gt;选择更新&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#x27;#&#x27; onclick=&#x27;deleteUser(&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;)&#x27;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span></span><br><span class="line">        &#125;);</span><br><span class="line">       $(<span class="string">&quot;#tBody&quot;</span>).prepend(str);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//用户添加或用户更新</span></span><br><span class="line">    function <span class="title function_">addOrUpdateUser</span><span class="params">(flag)</span> &#123;</span><br><span class="line">        <span class="comment">//从页面中获取数据</span></span><br><span class="line">        <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">        <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">        <span class="type">var</span> <span class="variable">usersex</span> <span class="operator">=</span> $(<span class="string">&quot;#usersex&quot;</span>).val();</span><br><span class="line">        <span class="type">var</span> <span class="variable">userbirth</span> <span class="operator">=</span> $(<span class="string">&quot;#userbirth&quot;</span>).val();</span><br><span class="line"></span><br><span class="line">         <span class="type">var</span> <span class="variable">data</span> <span class="operator">=</span> &#123;</span><br><span class="line">             userid:userid,</span><br><span class="line">             username:username,</span><br><span class="line">             usersex:usersex,</span><br><span class="line">             userbirth:userbirth,</span><br><span class="line">             flag:flag</span><br><span class="line">         &#125;</span><br><span class="line">        location.reload();</span><br><span class="line">        $.get(<span class="string">&quot;user.do&quot;</span>,data,function (result) &#123;</span><br><span class="line">            alert(result);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="3-2-在Servlet中处理添加用户请求"><a href="#3-2-在Servlet中处理添加用户请求" class="headerlink" title="3.2 在Servlet中处理添加用户请求"></a>3.2 在Servlet中处理添加用户请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.common.JsonUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用户管理servlet</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;getData&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getData(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;addUser&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;updateUser&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.updateUser(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.deleteUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模拟数据初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;lizhen&quot;</span>);</span><br><span class="line">        user.setUserid(<span class="number">1</span>);</span><br><span class="line">        user.setUsersex(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        user.setUserbirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;lilililiz&quot;</span>);</span><br><span class="line">        user1.setUserid(<span class="number">2</span>);</span><br><span class="line">        user1.setUsersex(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        user1.setUserbirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(user);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面初始化数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) <span class="built_in">this</span>.getServletContext().getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JsonUtils.objectToJson(list);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(s);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUser(req);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) servletContext.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        list.add(user);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(<span class="string">&quot;添加用户&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求数据</span></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">createUser</span><span class="params">(HttpServletRequest req)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userbirth</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userbirth&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserid(Integer.parseInt(userid));</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setUsersex(usersex);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(userbirth);</span><br><span class="line">            user.setUserbirth(parse);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决时区问题：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@JsonFormat(pattern = &quot;yyyy-MM-dd&quot;,timezone = &quot;GMT+8&quot;)</span><br></pre></td></tr></table></figure><h3 id="4-更新用户操作"><a href="#4-更新用户操作" class="headerlink" title="4 更新用户操作"></a>4 更新用户操作</h3><h4 id="4-1-通过Ajax完成预更新用户选择"><a href="#4-1-通过Ajax完成预更新用户选择" class="headerlink" title="4.1 通过Ajax完成预更新用户选择"></a>4.1 通过Ajax完成预更新用户选择</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">46</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户管理&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">           <span class="comment">//获取页面初始化数据</span></span><br><span class="line">            getData();</span><br><span class="line">            <span class="comment">//添加按钮绑定点击事件,通过id选择器</span></span><br><span class="line">            $(<span class="string">&quot;#add&quot;</span>).click(function () &#123;</span><br><span class="line">                addOrUpdateUser(<span class="string">&quot;addUser&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//获取页面初始化数据</span></span><br><span class="line">        function <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">            $.getJSON(<span class="string">&quot;user.do&quot;</span>,&#123;flag:<span class="string">&quot;getData&quot;</span>&#125;,function (result) &#123;</span><br><span class="line">                init(result);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历数组生成数据</span></span><br><span class="line">        function <span class="title function_">init</span><span class="params">(obj)</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            $.each(obj,function () &#123;</span><br><span class="line">                str += <span class="string">&quot;&lt;tr align=&#x27;center&#x27;&gt;&lt;td id =&#x27;&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;&#x27;&gt;&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.usersex + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.userbirth + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&lt;a href=&#x27;#&#x27; onclick=&#x27;preUpdateUser(&quot;</span>+<span class="built_in">this</span>.userid+<span class="string">&quot;)&#x27;&gt;选择更新&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#x27;#&#x27; onclick=&#x27;deleteUser(&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;)&#x27;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">           $(<span class="string">&quot;#tBody&quot;</span>).prepend(str);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用户添加或用户更新</span></span><br><span class="line">        function <span class="title function_">addOrUpdateUser</span><span class="params">(flag)</span> &#123;</span><br><span class="line">            <span class="comment">//从页面中获取数据</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">usersex</span> <span class="operator">=</span> $(<span class="string">&quot;#usersex&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">userbirth</span> <span class="operator">=</span> $(<span class="string">&quot;#userbirth&quot;</span>).val();</span><br><span class="line"></span><br><span class="line">             <span class="type">var</span> <span class="variable">data</span> <span class="operator">=</span> &#123;</span><br><span class="line">                 userid:userid,</span><br><span class="line">                 username:username,</span><br><span class="line">                 usersex:usersex,</span><br><span class="line">                 userbirth:userbirth,</span><br><span class="line">                 flag:flag</span><br><span class="line">             &#125;</span><br><span class="line">            location.reload();</span><br><span class="line">            $.get(<span class="string">&quot;user.do&quot;</span>,data,function (result) &#123;</span><br><span class="line">                alert(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//更新之前的数据选择</span></span><br><span class="line">            function <span class="title function_">preUpdateUser</span><span class="params">(userid)</span> &#123;</span><br><span class="line">                <span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">                $(<span class="string">&quot;#&quot;</span>+userid).closest(<span class="string">&quot;tr&quot;</span>).children().each(function (index,ele) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(index&lt;=<span class="number">3</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        arr[index] = ele.innerText</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                $(<span class="string">&quot;#userid&quot;</span>).val(arr[<span class="number">0</span>]);</span><br><span class="line">                $(<span class="string">&quot;#username&quot;</span>).val(arr[<span class="number">1</span>]);</span><br><span class="line">                $(<span class="string">&quot;#usersex&quot;</span>).val(arr[<span class="number">2</span>]);</span><br><span class="line">                $(<span class="string">&quot;#userbirth&quot;</span>).val(arr[<span class="number">3</span>]);</span><br><span class="line">                $(<span class="string">&quot;#userid&quot;</span>).attr(<span class="string">&quot;readonly&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除用户</span></span><br><span class="line">            function <span class="title function_">deleteUser</span><span class="params">(userid)</span> &#123;</span><br><span class="line">            $(<span class="string">&quot;#&quot;</span>+userid).closest(<span class="string">&quot;tr&quot;</span>).remove();</span><br><span class="line">            $.get(<span class="string">&quot;user.do&quot;</span>,&#123;userid:userid&#125;,function (result) &#123;</span><br><span class="line">                alert(result);</span><br><span class="line">            &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;table align=<span class="string">&quot;center&quot;</span> width=<span class="string">&quot;60%&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;ID：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userid&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;性别：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;usersex&quot;</span> id=<span class="string">&quot;usersex&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;生日：&lt;/td&gt; &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userbirth&quot;</span> id=<span class="string">&quot;userbirth&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;td colspan=<span class="string">&quot;4&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;添加用户&quot;</span> id=<span class="string">&quot;add&quot;</span> /&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;更新用户&quot;</span> id=<span class="string">&quot;update&quot;</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table align=<span class="string">&quot;center&quot;</span> width=<span class="string">&quot;60%&quot;</span> bgcolor=<span class="string">&quot;&quot;</span> border=<span class="string">&quot;1&quot;</span> id=<span class="string">&quot;myTable&quot;</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;td&gt;ID&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody id=<span class="string">&quot;tBody&quot;</span>&gt;&lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-2-通过Ajax完成更新用户"><a href="#4-2-通过Ajax完成更新用户" class="headerlink" title="4.2 通过Ajax完成更新用户"></a>4.2 通过Ajax完成更新用户</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: 2022/3/27</span><br><span class="line">  Time: 22:46</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户管理&lt;/title&gt;</span><br><span class="line">    &lt;script src = &quot;js/jquery.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">           //获取页面初始化数据</span><br><span class="line">            getData();</span><br><span class="line">            //添加按钮绑定点击事件,通过id选择器</span><br><span class="line">            $(&quot;#add&quot;).click(function () &#123;</span><br><span class="line">                addOrUpdateUser(&quot;addUser&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            //更新按钮绑定点击事件</span><br><span class="line">            $(&quot;#update&quot;).click(function () &#123;</span><br><span class="line">                addOrUpdateUser(&quot;updateUser&quot;);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        //获取页面初始化数据</span><br><span class="line">        function getData() &#123;</span><br><span class="line">            $.getJSON(&quot;user.do&quot;,&#123;flag:&quot;getData&quot;&#125;,function (result) &#123;</span><br><span class="line">                init(result);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        //遍历数组生成数据</span><br><span class="line">        function init(obj) &#123;</span><br><span class="line">            var str = &quot;&quot;;</span><br><span class="line">            $.each(obj,function () &#123;</span><br><span class="line">                str += &quot;&lt;tr align=&#x27;center&#x27;&gt;&lt;td id =&#x27;&quot; + this.userid + &quot;&#x27;&gt;&quot; + this.userid + &quot;&lt;/td&gt;&lt;td&gt;&quot; + this.username + &quot;&lt;/td&gt;&lt;td&gt;&quot; + this.usersex + &quot;&lt;/td&gt;&lt;td&gt;&quot; + this.userbirth + &quot;&lt;/td&gt;&lt;td&gt;&lt;a href=&#x27;#&#x27; onclick=&#x27;preUpdateUser(&quot;+this.userid+&quot;)&#x27;&gt;选择更新&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#x27;#&#x27; onclick=&#x27;deleteUser(&quot; + this.userid + &quot;)&#x27;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span><br><span class="line">            &#125;);</span><br><span class="line">           $(&quot;#tBody&quot;).prepend(str);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        //用户添加或用户更新</span><br><span class="line">        function addOrUpdateUser(flag) &#123;</span><br><span class="line">            //从页面中获取数据</span><br><span class="line">            var userid = $(&quot;#userid&quot;).val();</span><br><span class="line">            var username = $(&quot;#username&quot;).val();</span><br><span class="line">            var usersex = $(&quot;#usersex&quot;).val();</span><br><span class="line">            var userbirth = $(&quot;#userbirth&quot;).val();</span><br><span class="line"></span><br><span class="line">             var data = &#123;</span><br><span class="line">                 userid:userid,</span><br><span class="line">                 username:username,</span><br><span class="line">                 usersex:usersex,</span><br><span class="line">                 userbirth:userbirth,</span><br><span class="line">                 flag:flag</span><br><span class="line">             &#125;</span><br><span class="line">            location.reload();</span><br><span class="line">            $.get(&quot;user.do&quot;,data,function (result) &#123;</span><br><span class="line">                alert(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">            //更新之前的数据选择</span><br><span class="line">            function preUpdateUser(userid) &#123;</span><br><span class="line">                var arr = new Array();</span><br><span class="line">                $(&quot;#&quot;+userid).closest(&quot;tr&quot;).children().each(function (index,ele) &#123;</span><br><span class="line">                    if(index&lt;=3)</span><br><span class="line">                    &#123;</span><br><span class="line">                        arr[index] = ele.innerText</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                $(&quot;#userid&quot;).val(arr[0]);</span><br><span class="line">                $(&quot;#username&quot;).val(arr[1]);</span><br><span class="line">                $(&quot;#usersex&quot;).val(arr[2]);</span><br><span class="line">                $(&quot;#userbirth&quot;).val(arr[3]);</span><br><span class="line">                $(&quot;#userid&quot;).attr(&quot;readonly&quot;,true);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">           </span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;table align=&quot;center&quot; width=&quot;60%&quot; border=&quot;1&quot;&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;ID：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;userid&quot; id=&quot;userid&quot;/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot; id=&quot;username&quot;/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;性别：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;usersex&quot; id=&quot;usersex&quot;/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;生日：&lt;/td&gt; &lt;td&gt;&lt;input type=&quot;text&quot; name=&quot;userbirth&quot; id=&quot;userbirth&quot;/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">            &lt;td colspan=&quot;4&quot;&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;添加用户&quot; id=&quot;add&quot; /&gt;</span><br><span class="line">            &lt;input type=&quot;button&quot; value=&quot;更新用户&quot; id=&quot;update&quot;/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table align=&quot;center&quot; width=&quot;60%&quot; bgcolor=&quot;&quot; border=&quot;1&quot; id=&quot;myTable&quot;&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr align=&quot;center&quot;&gt;</span><br><span class="line">            &lt;td&gt;ID&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody id=&quot;tBody&quot;&gt;&lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-3-在Servlet中处理更新用户请求"><a href="#4-3-在Servlet中处理更新用户请求" class="headerlink" title="4.3 在Servlet中处理更新用户请求"></a>4.3 在Servlet中处理更新用户请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.common.JsonUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用户管理servlet</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;getData&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getData(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;addUser&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;updateUser&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.updateUser(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.deleteUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模拟数据初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;lizhen&quot;</span>);</span><br><span class="line">        user.setUserid(<span class="number">1</span>);</span><br><span class="line">        user.setUsersex(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        user.setUserbirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;lilililiz&quot;</span>);</span><br><span class="line">        user1.setUserid(<span class="number">2</span>);</span><br><span class="line">        user1.setUsersex(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        user1.setUserbirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(user);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面初始化数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) <span class="built_in">this</span>.getServletContext().getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JsonUtils.objectToJson(list);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(s);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUser(req);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) servletContext.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        list.add(user);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(<span class="string">&quot;添加用户&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求数据</span></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">createUser</span><span class="params">(HttpServletRequest req)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userbirth</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userbirth&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserid(Integer.parseInt(userid));</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setUsersex(usersex);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(userbirth);</span><br><span class="line">            user.setUserbirth(parse);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理更新用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUser(req);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) servletContext.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (User temp : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.getUserid()==user.getUserid())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//不要在迭代中改变集合的长度</span></span><br><span class="line">                u = temp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            list.remove(u);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(user);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-删除用户"><a href="#5-删除用户" class="headerlink" title="5 删除用户"></a>5 删除用户</h3><h4 id="5-1-通过Ajax完成删除用户"><a href="#5-1-通过Ajax完成删除用户" class="headerlink" title="5.1 通过Ajax完成删除用户"></a>5.1 通过Ajax完成删除用户</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">27</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">46</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;用户管理&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">           <span class="comment">//获取页面初始化数据</span></span><br><span class="line">            getData();</span><br><span class="line">            <span class="comment">//添加按钮绑定点击事件,通过id选择器</span></span><br><span class="line">            $(<span class="string">&quot;#add&quot;</span>).click(function () &#123;</span><br><span class="line">                addOrUpdateUser(<span class="string">&quot;addUser&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新按钮绑定点击事件</span></span><br><span class="line">            $(<span class="string">&quot;#update&quot;</span>).click(function () &#123;</span><br><span class="line">                addOrUpdateUser(<span class="string">&quot;updateUser&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//获取页面初始化数据</span></span><br><span class="line">        function <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">            $.getJSON(<span class="string">&quot;user.do&quot;</span>,&#123;flag:<span class="string">&quot;getData&quot;</span>&#125;,function (result) &#123;</span><br><span class="line">                init(result);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历数组生成数据</span></span><br><span class="line">        function <span class="title function_">init</span><span class="params">(obj)</span> &#123;</span><br><span class="line">            <span class="type">var</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">            $.each(obj,function () &#123;</span><br><span class="line">                str += <span class="string">&quot;&lt;tr align=&#x27;center&#x27;&gt;&lt;td id =&#x27;&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;&#x27;&gt;&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.username + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.usersex + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&quot;</span> + <span class="built_in">this</span>.userbirth + <span class="string">&quot;&lt;/td&gt;&lt;td&gt;&lt;a href=&#x27;#&#x27; onclick=&#x27;preUpdateUser(&quot;</span>+<span class="built_in">this</span>.userid+<span class="string">&quot;)&#x27;&gt;选择更新&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#x27;#&#x27; onclick=&#x27;deleteUser(&quot;</span> + <span class="built_in">this</span>.userid + <span class="string">&quot;)&#x27;&gt;删除&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&quot;</span></span><br><span class="line">            &#125;);</span><br><span class="line">           $(<span class="string">&quot;#tBody&quot;</span>).prepend(str);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//用户添加或用户更新</span></span><br><span class="line">        function <span class="title function_">addOrUpdateUser</span><span class="params">(flag)</span> &#123;</span><br><span class="line">            <span class="comment">//从页面中获取数据</span></span><br><span class="line">            <span class="type">var</span> <span class="variable">userid</span> <span class="operator">=</span> $(<span class="string">&quot;#userid&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">username</span> <span class="operator">=</span> $(<span class="string">&quot;#username&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">usersex</span> <span class="operator">=</span> $(<span class="string">&quot;#usersex&quot;</span>).val();</span><br><span class="line">            <span class="type">var</span> <span class="variable">userbirth</span> <span class="operator">=</span> $(<span class="string">&quot;#userbirth&quot;</span>).val();</span><br><span class="line"></span><br><span class="line">             <span class="type">var</span> <span class="variable">data</span> <span class="operator">=</span> &#123;</span><br><span class="line">                 userid:userid,</span><br><span class="line">                 username:username,</span><br><span class="line">                 usersex:usersex,</span><br><span class="line">                 userbirth:userbirth,</span><br><span class="line">                 flag:flag</span><br><span class="line">             &#125;</span><br><span class="line">            location.reload();</span><br><span class="line">            $.get(<span class="string">&quot;user.do&quot;</span>,data,function (result) &#123;</span><br><span class="line">                alert(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">            <span class="comment">//更新之前的数据选择</span></span><br><span class="line">            function <span class="title function_">preUpdateUser</span><span class="params">(userid)</span> &#123;</span><br><span class="line">                <span class="type">var</span> <span class="variable">arr</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">                $(<span class="string">&quot;#&quot;</span>+userid).closest(<span class="string">&quot;tr&quot;</span>).children().each(function (index,ele) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(index&lt;=<span class="number">3</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        arr[index] = ele.innerText</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                $(<span class="string">&quot;#userid&quot;</span>).val(arr[<span class="number">0</span>]);</span><br><span class="line">                $(<span class="string">&quot;#username&quot;</span>).val(arr[<span class="number">1</span>]);</span><br><span class="line">                $(<span class="string">&quot;#usersex&quot;</span>).val(arr[<span class="number">2</span>]);</span><br><span class="line">                $(<span class="string">&quot;#userbirth&quot;</span>).val(arr[<span class="number">3</span>]);</span><br><span class="line">                $(<span class="string">&quot;#userid&quot;</span>).attr(<span class="string">&quot;readonly&quot;</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//删除用户</span></span><br><span class="line">            function <span class="title function_">deleteUser</span><span class="params">(userid)</span> &#123;</span><br><span class="line">            $(<span class="string">&quot;#&quot;</span>+userid).closest(<span class="string">&quot;tr&quot;</span>).remove();</span><br><span class="line">            $.get(<span class="string">&quot;user.do&quot;</span>,&#123;userid:userid&#125;,function (result) &#123;</span><br><span class="line">                alert(result);</span><br><span class="line">            &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">    &lt;table align=<span class="string">&quot;center&quot;</span> width=<span class="string">&quot;60%&quot;</span> border=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;ID：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userid&quot;</span> id=<span class="string">&quot;userid&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;username&quot;</span> id=<span class="string">&quot;username&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;性别：&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;usersex&quot;</span> id=<span class="string">&quot;usersex&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;生日：&lt;/td&gt; &lt;td&gt;&lt;input type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;userbirth&quot;</span> id=<span class="string">&quot;userbirth&quot;</span>/&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;td colspan=<span class="string">&quot;4&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;添加用户&quot;</span> id=<span class="string">&quot;add&quot;</span> /&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;更新用户&quot;</span> id=<span class="string">&quot;update&quot;</span>/&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table align=<span class="string">&quot;center&quot;</span> width=<span class="string">&quot;60%&quot;</span> bgcolor=<span class="string">&quot;&quot;</span> border=<span class="string">&quot;1&quot;</span> id=<span class="string">&quot;myTable&quot;</span>&gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">            &lt;td&gt;ID&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;姓名&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;性别&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;生日&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;操作&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line">        &lt;tbody id=<span class="string">&quot;tBody&quot;</span>&gt;&lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-在Servlet处理删除用户请求"><a href="#5-2-在Servlet处理删除用户请求" class="headerlink" title="5.2 在Servlet处理删除用户请求"></a>5.2 在Servlet处理删除用户请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.User;</span><br><span class="line"><span class="keyword">import</span> com.common.JsonUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* 用户管理servlet</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/user.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;getData&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.getData(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;addUser&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req, resp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;updateUser&quot;</span>.equals(flag)) &#123;</span><br><span class="line">            <span class="built_in">this</span>.updateUser(req, resp);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">this</span>.deleteUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成模拟数据初始化</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;lizhen&quot;</span>);</span><br><span class="line">        user.setUserid(<span class="number">1</span>);</span><br><span class="line">        user.setUsersex(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        user.setUserbirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user1.setUsername(<span class="string">&quot;lilililiz&quot;</span>);</span><br><span class="line">        user1.setUserid(<span class="number">2</span>);</span><br><span class="line">        user1.setUsersex(<span class="string">&quot;male&quot;</span>);</span><br><span class="line">        user1.setUserbirth(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        List&lt;User&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(user);</span><br><span class="line">        list.add(user1);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取页面初始化数据</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">getData</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) <span class="built_in">this</span>.getServletContext().getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JsonUtils.objectToJson(list);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(s);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUser(req);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) servletContext.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        list.add(user);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(<span class="string">&quot;添加用户&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取请求数据</span></span><br><span class="line">    <span class="keyword">private</span> User <span class="title function_">createUser</span><span class="params">(HttpServletRequest req)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userbirth</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userbirth&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUserid(Integer.parseInt(userid));</span><br><span class="line">        user.setUsername(username);</span><br><span class="line">        user.setUsersex(usersex);</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Date</span> <span class="variable">parse</span> <span class="operator">=</span> sdf.parse(userbirth);</span><br><span class="line">            user.setUserbirth(parse);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理更新用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">updateUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUser(req);</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;) servletContext.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">u</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (User temp : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>(temp.getUserid()==user.getUserid())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//不要在迭代中改变集合的长度</span></span><br><span class="line">                u = temp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(u!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            list.remove(u);</span><br><span class="line">        &#125;</span><br><span class="line">        list.add(user);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.print(<span class="string">&quot;更新成功&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//处理删除用户的请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">deleteUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        List&lt;User&gt; list = (List&lt;User&gt;)servletContext.getAttribute(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (User temp : list) &#123;</span><br><span class="line">            <span class="keyword">if</span>((temp.getUserid()+<span class="string">&quot;&quot;</span>).equals(userid))</span><br><span class="line">            &#123;</span><br><span class="line">                user = temp;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(user!=<span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">            list.remove(user);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">            pw.println(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            pw.flush();</span><br><span class="line">            pw.close();</span><br><span class="line"></span><br><span class="line">            &#125;        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="PROJECT-LINK"><a href="#PROJECT-LINK" class="headerlink" title="PROJECT LINK:"></a>PROJECT LINK:</h2><p>「Ajax技术文档+源码」<a href="https://www.aliyundrive.com/s/CBw7ef1LFqM">https://www.aliyundrive.com/s/CBw7ef1LFqM</a> 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Server Page</title>
      <link href="/archives/bd6b9883.html"/>
      <url>/archives/bd6b9883.html</url>
      
        <content type="html"><![CDATA[<h1 id="JSP技术-Magi"><a href="#JSP技术-Magi" class="headerlink" title="JSP技术(@Magi)"></a>JSP技术(@Magi)</h1><h2 id="一、JSP简介"><a href="#一、JSP简介" class="headerlink" title="一、JSP简介"></a>一、JSP简介</h2><h3 id="1-jsp介绍"><a href="#1-jsp介绍" class="headerlink" title="1.jsp介绍"></a>1.jsp介绍</h3><p>JSP(全称 Java Server Pages)Java 服务端页面技术，是 JavaEE 平台下的技术规范。它允许使用特定的标签在 HTML 网页中插入 Java 代码，实现动态页面处理，所以 JSP 就是 HTML 与Java 代码的复合体。JSP 技术可以快速的实现一个页面的开发，相比在 Servlet 中实现页面开 发将变得更加容易。</p><h3 id="2-常见的视图层技术"><a href="#2-常见的视图层技术" class="headerlink" title="2.常见的视图层技术"></a>2.常见的视图层技术</h3><p>HTML、JSP、Thymeleaf等</p><h3 id="3-前后端分离开发方式"><a href="#3-前后端分离开发方式" class="headerlink" title="3.前后端分离开发方式"></a>3.前后端分离开发方式</h3><p>在前后端分离的项目中真正可以做到“术业有专攻”（开发人员分离） 。前后端分离开发方式中前端页面由专业团队完成页面的开发，并通过请求调用后端的 api 接口进行数据交互。在开发前端页面的团队中更多关注的技术如：html、CSS、jQuery、Vue、Nodejs 等前端技术。前端追求的是：页面表现，速度流畅，兼容性，用户体验等等。而后端团队则更多的是业务的具体实现。在后端开发的团队中更多关注的技术如：设计模式、分布式架构、微 服务架构、数据库的操作、Java 的性能优化以及数据库优化等技术。前后端分离已成为互联 网项目开发的业界标准使用方式，特别是为大型分布式架构、弹性计算架构、微服务架构、 多端化服务（多种客户端，例如：浏览器，车载终端，安卓、IOS 等等）打下坚实的基础。</p><h2 id="二、JSP运行原理"><a href="#二、JSP运行原理" class="headerlink" title="二、JSP运行原理"></a>二、JSP运行原理</h2><h3 id="1-JSP技术特点"><a href="#1-JSP技术特点" class="headerlink" title="1.JSP技术特点"></a>1.JSP技术特点</h3><p><img src="file://C:/Users/LZH/AppData/Roaming/Typora/typora-user-images/image-20220323235757392.png?lastModify=1648051126" alt="image-20220323235757392"></p><p>JSP 和 Servlet 是本质相同的技术。当一个 JSP 文件第一次被请求时、JSP 引擎会将该 JSP编译成一个 Servlet，并执行这个 Servlet。如果 JSP 文件被修改了，那么 JSP 引擎会重新编译 这个 JSP。 </p><p>JSP 引擎对 JSP 编译时会生成两个文件分别是.java 的源文件以及编译后的.class 文件，并放到 Tomcat 的 work 目录的 Catalina 对应的虚拟主机目录中的 org\apache\jsp 目录中。两个 文件的名称会使用 JSP 的名称加”_jsp”表示。如：index_jsp.java、index_jsp.class</p><h3 id="3-JSP与Servlet区别"><a href="#3-JSP与Servlet区别" class="headerlink" title="3.JSP与Servlet区别"></a>3.JSP与Servlet区别</h3><p>JSP 以源文件形式部署到容器中。而 Servlet 需要编译成 class 文件后部署到容器中。</p><p>JSP 部署到 web 项目的根目录下或根目录下的其他子目录和静态同资源位于相同位置。而 Servlet 需要部署到 WEB-INF&#x2F;classes 目录中</p><p>JSP 中的 HTML 代码会被 JSP 引擎放入到 Servlet 的 out.write()方法中。而在 Servlet 中我们需要自己通过对字符流输出流的操作生成响应的页面。</p><p>JSP 更擅长表现于页面显示，Servlet 更擅长于逻辑控制。</p><h2 id="三、-JSP的使用"><a href="#三、-JSP的使用" class="headerlink" title="三、 JSP的使用"></a>三、 JSP的使用</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324000759109.png" alt="image-20220324000759109"></p><h3 id="1-JSP的三种原始标签"><a href="#1-JSP的三种原始标签" class="headerlink" title="1 JSP的三种原始标签"></a>1 JSP的三种原始标签</h3><p>JSP 的原始标签在 JSP 的任何版本中都可以使用。</p><h4 id="1-1-lt-gt-声明标签"><a href="#1-1-lt-gt-声明标签" class="headerlink" title="1.1 &lt;%!  %&gt;声明标签"></a>1.1 &lt;%!  %&gt;声明标签</h4><p>声明标签用于在 JSP 中定义成员变量与方法的定义。标签中的内容会出现在 JSP 被编译后的 Servlet 的 class 的{}中。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  Welcome JSP！</span><br><span class="line">  &lt;%!</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324001848464.png" alt="image-20220324001848464"></p><h4 id="1-2-lt-gt-脚本标签"><a href="#1-2-lt-gt-脚本标签" class="headerlink" title="1.2&lt;% %&gt;脚本标签"></a>1.2&lt;% %&gt;脚本标签</h4><p>脚本标签用于在 JSP 中编写业务逻辑。标签中的内容会出现在 JSP 被编译后的 Servlet 的_jspService 方法体中。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  Welcome JSP！</span><br><span class="line">  &lt;%!</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324001903528.png" alt="image-20220324001903528"></p><h4 id="1-3-lt-x3D-gt-赋值标签"><a href="#1-3-lt-x3D-gt-赋值标签" class="headerlink" title="1.3&lt;%&#x3D; %&gt;赋值标签"></a>1.3&lt;%&#x3D; %&gt;赋值标签</h4><p>赋值标签用于在 JSP 中做内容输出。标签中的内容会出现在_jspService 方法的 out.print()方法的参数中。注意我们在使用赋值标签时不需要在代码中添加 ”；”。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;$Title$&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">  Welcome JSP！</span><br><span class="line">  &lt;%!</span><br><span class="line">  <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">  <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">return</span> a+b;</span><br><span class="line">  &#125;</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%</span><br><span class="line">  <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span><span class="number">20</span>;</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;%=a%&gt;</span><br><span class="line">  &lt;%=c%&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324002446066.png" alt="image-20220324002446066"></p><h4 id="1-4-JSP原始标签的使用"><a href="#1-4-JSP原始标签的使用" class="headerlink" title="1.4 JSP原始标签的使用"></a>1.4 JSP原始标签的使用</h4><p>需求：以 20%概率显示你中奖了。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Random&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--jsp的原始标签是不允许嵌套的--%&gt;</span><br><span class="line">    &lt;%</span><br><span class="line">        <span class="type">int</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>().nextInt(<span class="number">100</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(flag&lt;=<span class="number">20</span>)</span><br><span class="line">        &#123;</span><br><span class="line">        str = <span class="string">&quot;中奖了&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        str = <span class="string">&quot;再试试！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    %&gt;</span><br><span class="line">    &lt;%=str%&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="2-JSP的指令标签"><a href="#2-JSP的指令标签" class="headerlink" title="2 JSP的指令标签"></a>2 JSP的指令标签</h3><p>JSP 指令标签的作用是声明 JSP 页面的一些属性和动作。 </p><p>&lt;%@指令名称 属性&#x3D;”值” 属性&#x3D;”值”%&gt;</p><h4 id="2-1-JSP指令标签分类"><a href="#2-1-JSP指令标签分类" class="headerlink" title="2.1 JSP指令标签分类:"></a>2.1 JSP指令标签分类:</h4><p>page:主要声明 JSP 页面的一些属性</p><p>include:静态包含</p><p>taglib:导入标签库</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324100419061.png" alt="image-20220324100419061"></p><h5 id="2-1-1-Page指令标签"><a href="#2-1-1-Page指令标签" class="headerlink" title="2.1.1 Page指令标签"></a>2.1.1 Page指令标签</h5><h6 id="2-1-1-1-contentType"><a href="#2-1-1-1-contentType" class="headerlink" title="2.1.1.1 contentType"></a>2.1.1.1 contentType</h6><p>设置响应类型和编码。 </p><h6 id="2-1-1-2-pageEncoding"><a href="#2-1-1-2-pageEncoding" class="headerlink" title="2.1.1.2 pageEncoding"></a><strong>2.1.1.2 pageEncoding</strong></h6><p>设置页面的编码。</p><h6 id="2-1-1-3-import"><a href="#2-1-1-3-import" class="headerlink" title="2.1.1.3 import"></a><strong>2.1.1.3 import</strong></h6><p>导入所需要的包</p><h6 id="2-1-1-4-language"><a href="#2-1-1-4-language" class="headerlink" title="2.1.1.4 language"></a><strong>2.1.1.4 language</strong></h6><p>当前 JSP 页面里面可以嵌套的语言。</p><h6 id="2-1-1-5-session"><a href="#2-1-1-5-session" class="headerlink" title="2.1.1.5 session"></a><strong>2.1.1.5 session</strong></h6><p>设置 JSP 页面是否获取 session 内置对象。</p><h6 id="2-1-1-6-buffer"><a href="#2-1-1-6-buffer" class="headerlink" title="2.1.1.6 buffer"></a><strong>2.1.1.6 buffer</strong></h6><p>设置 JSP 页面的流的缓冲区的大小。</p><h6 id="2-1-1-7-autoFlush"><a href="#2-1-1-7-autoFlush" class="headerlink" title="2.1.1.7 autoFlush"></a><strong>2.1.1.7 autoFlush</strong></h6><p>是否自动刷新。</p><h6 id="2-1-1-8-extends"><a href="#2-1-1-8-extends" class="headerlink" title="2.1.1.8 extends"></a><strong>2.1.1.8 extends</strong></h6><p>声明当前 JSP 的页面继承于那个类.必须继承的是 httpservlet 及其子类。</p><h6 id="2-1-1-9-isELIgnored"><a href="#2-1-1-9-isELIgnored" class="headerlink" title="2.1.1.9 isELIgnored"></a><strong>2.1.1.9 isELIgnored</strong></h6><p>是否忽略 el 表达式。 </p><h6 id="2-1-1-10-errorPage"><a href="#2-1-1-10-errorPage" class="headerlink" title="2.1.1.10 errorPage"></a>2.1.1.10 errorPage</h6><p>当前 JSP 页面出现异常的时候要跳转到的 JSP 页面。</p><h6 id="2-1-1-11-isErrorPage"><a href="#2-1-1-11-isErrorPage" class="headerlink" title="2.1.1.11 isErrorPage"></a><strong>2.1.1.11</strong> isErrorPage</h6><p>当前 JSP 页面是否是一个错误页面。若值为 true,可以使用 JSP 页面的一个内置对象 exception。</p><p><strong>2.1.2 Include</strong> <strong>指令标签</strong></p><p>静态包含,可以将其他页面内容包含进来,一起进行编译运行.生成一个 java 文件. &lt;%@include file&#x3D;”被包含 JSP 的相对路径” %&gt;</p><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="2-1-3-Taglib指令标签"><a href="#2-1-3-Taglib指令标签" class="headerlink" title="2.1.3 Taglib指令标签"></a>2.1.3 Taglib指令标签</h5><p>导入标签库&lt;%@taglib prefix&#x3D;”前缀名” uri&#x3D;”名称空间” %&gt;</p><h3 id="3-JSP的内置对象"><a href="#3-JSP的内置对象" class="headerlink" title="3. JSP的内置对象"></a>3. JSP的内置对象</h3><p>JSP 中一共预先定义了 9 个这样的对象，分别为：request、response、session、application、 out、pagecontext、config、page、exception。</p><h4 id="3-1-request对象"><a href="#3-1-request对象" class="headerlink" title="3.1 request对象"></a>3.1 request对象</h4><p>request对象是HttpServletRequest 类型的对象。</p><h4 id="3-2-response对象"><a href="#3-2-response对象" class="headerlink" title="3.2 response对象"></a>3.2 response对象</h4><p>response 对象是 HttpServletResponse 类型的对象</p><h4 id="3-3-session对象"><a href="#3-3-session对象" class="headerlink" title="3.3 session对象"></a>3.3 session对象</h4><p>session 对象是 HttpSession 类型的对象。只有在包含 session&#x3D;“true” 的页面中才 可以被使用</p><h4 id="3-4-application对象"><a href="#3-4-application对象" class="headerlink" title="3.4 application对象"></a>3.4 application对象</h4><p>application 对象是 ServletContext 类型的对象</p><h4 id="3-5-out对象"><a href="#3-5-out对象" class="headerlink" title="3.5 out对象"></a>3.5 out对象</h4><p>out 对象是 JspWriter 类型的对象。</p><h4 id="3-6-config对象"><a href="#3-6-config对象" class="headerlink" title="3.6 config对象"></a>3.6 config对象</h4><p>config 对象是 ServletConfig 类型的对象。</p><h4 id="3-7pageContext-对象"><a href="#3-7pageContext-对象" class="headerlink" title="3.7pageContext 对象"></a><strong>3.7pageContext</strong> <strong>对象</strong></h4><p>pageContext 对象是 PageContext 类型的对象。作用是取得任何范围的参数，通过 它可以获取 JSP 页面的 out、request、reponse、session、application 等对象。pageContext对象的创建和初始化都是由容器来完成的，在 JSP 页面中可以直接使用 pageContext 象</p><h4 id="3-8-page对象"><a href="#3-8-page对象" class="headerlink" title="3.8 page对象"></a>3.8 page对象</h4><p>page 对象代表 JSP 本身。</p><h4 id="3-9-exception对象"><a href="#3-9-exception对象" class="headerlink" title="3.9 exception对象"></a>3.9 exception对象</h4><p>exception 对象的作用是显示异常信息，只有在包含 isErrorPage&#x3D;”true” 的页面中 才可以被使用。</p><h3 id="4-请求转发"><a href="#4-请求转发" class="headerlink" title="4 请求转发"></a>4 请求转发</h3><h4 id="4-1-什么是请求转发"><a href="#4-1-什么是请求转发" class="headerlink" title="4.1 什么是请求转发"></a>4.1 什么是请求转发</h4><p>请求转发是服务端的一种请求方式，相当于在服务端中直接请求某个资源。 RequestDispatcher dispatcher &#x3D; request.getRequestDispatcher(“&#x2F;test.jsp”); dispatcher.forward(request,response);</p><p> 简写方式： </p><p>request.getRequestDispatcher(“&#x2F;test.jsp”).forword(request,response);</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324102245782.png" alt="image-20220324102245782"></p><h4 id="4-2-请求转发-服务端操作-与重定向-客户端操作-的区别"><a href="#4-2-请求转发-服务端操作-与重定向-客户端操作-的区别" class="headerlink" title="4.2 请求转发(服务端操作)与重定向(客户端操作)的区别"></a>4.2 请求转发(服务端操作)与重定向(客户端操作)的区别</h4><p>请求转发对于客户端浏览器而言是在一次请求与响应中完成，而重定向是在两次请求两次响应中完成。</p><p>请求转发并不会改变客户端浏览器的地址栏中的内容。而重定向会改变客户端浏览器地 址栏中的内容。</p><p>请求转发可以使用 request 对象传递数据，而重定向不能使用 request 对象传递数据。 </p><p>如果是处理的 DML 操作，建议使用重定向方式为客户端浏览器产生响应，可以解决表 单重复提交现象。</p><h4 id="4-3-请求转发案例"><a href="#4-3-请求转发案例" class="headerlink" title="4.3 请求转发案例"></a>4.3 请求转发案例</h4><p>需求：在 Servlet 中获取客户端浏览器所支持的语言，并通过 JSP 页面将客户端浏览器 所支持的语言响应给客户端浏览器。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *在servlet中获取客户端浏览器所支持的语言，</span></span><br><span class="line"><span class="comment"> * 并通过JSP页面将客户端浏览器所支持的语言响应给客户端浏览器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/language.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LanguageServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取请求头中所支持的语言</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line">        <span class="comment">//将数据存放到Request对象中</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;header&quot;</span>,header);</span><br><span class="line">        <span class="comment">//使用请求转发跳转到JSP</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;showMsg.jsp&quot;</span>).forward(req,resp);;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">24</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">52</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;header&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;font color=<span class="string">&quot;blue&quot;</span>&gt;&lt;%= header%&gt;&gt;&lt;/font&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-JSP中的四大作用域对象"><a href="#5-JSP中的四大作用域对象" class="headerlink" title="5  JSP中的四大作用域对象"></a>5  JSP中的四大作用域对象</h3><p>作用域:”数据共享的范围”，也就说数据能够在多大的范围内有效</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324105659466.png" alt="image-20220324105659466"></p><h3 id="6-JSTL标签库"><a href="#6-JSTL标签库" class="headerlink" title="6 JSTL标签库"></a>6 JSTL标签库</h3><h4 id="6-1-什么是JSTL标签库"><a href="#6-1-什么是JSTL标签库" class="headerlink" title="6.1 什么是JSTL标签库"></a>6.1 什么是JSTL标签库</h4><p>JSTL（Java server pages standarded tag library，即 JSP 标准标签库）JSTL 标签是基于 JSP 页面的。这些标签可以插入在 JSP 代码中，本质上 JSTL 也是提前定义好的一组标签，这些标签封装了不同的功能，在页面上调用标签时，就等于调用了封装起来的功能。JSTL 的目标是 使 JSP 页面的可读性更强、简化 JSP 页面的设计、实现了代码复用、提高效率。</p><p>在 JSP2.0 版本后开始支持 JSTL 标签库。在使用 JSTL 标签库时需要在 JSP 中添加对应的 taglib 指令标签。 </p><p>&lt;%@ taglib prefix&#x3D;”c” uri&#x3D;”<a href="http://java.sun.com/jsp/jstl/core&quot;">http://java.sun.com/jsp/jstl/core&quot;</a> %&gt;</p><h4 id="6-2-JSTL标签分类"><a href="#6-2-JSTL标签分类" class="headerlink" title="6.2  JSTL标签分类"></a>6.2  JSTL标签分类</h4><p>根据 JSTL 标签所提供的功能，可以将其分为 5 个类别</p><h5 id="6-2-1-核心标签"><a href="#6-2-1-核心标签" class="headerlink" title="6.2.1 核心标签"></a>6.2.1 核心标签</h5><p>最常用、最重要、也是最基本的标签</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p> <img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324191407424.png" alt="image-20220324191407424"></p><h5 id="6-2-2-格式化标签"><a href="#6-2-2-格式化标签" class="headerlink" title="6.2.2 格式化标签"></a>6.2.2 格式化标签</h5><p>JSTL 格式化标签用来格式化并输出文本、日期、时间、数字</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324191521773.png" alt="image-20220324191521773"></p><h5 id="6-2-3-SQL标签"><a href="#6-2-3-SQL标签" class="headerlink" title="6.2.3 SQL标签"></a>6.2.3 SQL标签</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;sql&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/sql&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p>JSTL SQL 标签库提供了与关系型数据库（Oracle，MySQL，SQL Server 等等）进行交互的 标签。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324191627096.png" alt="image-20220324191627096"></p><h5 id="6-2-4-XML标签"><a href="#6-2-4-XML标签" class="headerlink" title="6.2.4 XML标签"></a>6.2.4 XML标签</h5><p>JSTL XML 标签库提供了创建和操作 XML 文档的标签。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;x&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/xml&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324191724405.png" alt="image-20220324191724405"></p><h5 id="6-2-5-JSTL函数"><a href="#6-2-5-JSTL函数" class="headerlink" title="6.2.5 JSTL函数"></a>6.2.5 JSTL函数</h5><p>JSTL 包含一系列标准函数，大部分是通用的字符串处理函数</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fn&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/functions&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324191809405.png" alt="image-20220324191809405"></p><h3 id="7-EL表达式"><a href="#7-EL表达式" class="headerlink" title="7 EL表达式"></a>7 EL表达式</h3><h4 id="7-1-什么是EL表达式"><a href="#7-1-什么是EL表达式" class="headerlink" title="7.1 什么是EL表达式"></a>7.1 什么是EL表达式</h4><p>EL（Expression Language）是一种表达式语言。是为了使 JSP 写起来更加简单，减少 java 代码，可以使得获取存储在 Java 对象中的数据变得非常简单。在 JSP2.0 版本后开始支持 EL 表达式。</p><h4 id="7-2-语法结构"><a href="#7-2-语法结构" class="headerlink" title="7.2 语法结构"></a>7.2 语法结构</h4><p>${表达式}</p><p>${对象.属性名}</p><h4 id="7-3-EL表达式中的操作符"><a href="#7-3-EL表达式中的操作符" class="headerlink" title="7.3 EL表达式中的操作符"></a>7.3 EL表达式中的操作符</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324193033972.png" alt="image-20220324193033972"></p><h4 id="7-4-EL表达式的隐含对象"><a href="#7-4-EL表达式的隐含对象" class="headerlink" title="7.4 EL表达式的隐含对象"></a>7.4 EL表达式的隐含对象</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324193105197.png" alt="image-20220324193105197"></p><h4 id="7-5-使用EL表达式取出作用域中的值"><a href="#7-5-使用EL表达式取出作用域中的值" class="headerlink" title="7.5 使用EL表达式取出作用域中的值"></a>7.5 使用EL表达式取出作用域中的值</h4><p>${pageScope.name} </p><p>${requestScope.name} </p><p>${sessionScope.name} </p><p>${applicationScope.name}</p><p>获取作用域属性中的数据时，也可以只写属性名，EL 表达式会按照 pageScope、 requestScope、sessionScope、applicationScope 的顺序查找该属性的值。</p><h3 id="8-JSTL标签库与EL表达式的使用"><a href="#8-JSTL标签库与EL表达式的使用" class="headerlink" title="8  JSTL标签库与EL表达式的使用"></a>8  JSTL标签库与EL表达式的使用</h3><h4 id="8-1-JSTL标签库的使用步骤"><a href="#8-1-JSTL标签库的使用步骤" class="headerlink" title="8.1 JSTL标签库的使用步骤"></a>8.1 JSTL标签库的使用步骤</h4><p>添加 jstl.jar 与 standard.jar </p><p>在 Idea 中添加 JSTL 标签的约束文件(DTD)。 </p><p>在 JSP 页面中添加 taglib 指令标签。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324194243139.png" alt="image-20220324194243139"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324194622881.png" alt="image-20220324194622881"></p><h4 id="8-2-JSTL核心标签的使用"><a href="#8-2-JSTL核心标签的使用" class="headerlink" title="8.2 JSTL核心标签的使用"></a>8.2 JSTL核心标签的使用</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h5 id="8-2-1-lt-c-if-gt"><a href="#8-2-1-lt-c-if-gt" class="headerlink" title="8.2.1 &lt;c:if&gt;"></a>8.2.1 &lt;c:if&gt;</h5><p>标签判断表达式的值，如果表达式的值为 true 则执行其主体内容。 </p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;1==1&#125;&quot;</span>&gt;</span><br><span class="line">    Hello JSTL!</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="8-2-1-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt"><a href="#8-2-1-lt-c-choose-gt-lt-c-when-gt-lt-c-otherwise-gt" class="headerlink" title="8.2.1 &lt;c:choose&gt;, &lt;c:when&gt;, &lt;c:otherwise&gt;"></a>8.2.1 <strong>&lt;c:choose&gt;, &lt;c:when&gt;, &lt;c:otherwise&gt;</strong></h5><p>&lt;c:choose&gt;标签与 Java switch 语句的功能一样，用于在众多选项中做出选择。switch 语句中有 case，而&lt;c:choose&gt;标签中对应有&lt;c:when&gt;，switch 语句中有 default，而&lt;c:choose&gt;标签中有&lt;c:otherwise&gt;。</p><p>&lt;c:when&gt;中如果有多个条件满足，则只会执行第一个&lt;c:when&gt;标签里的内容</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;1==1&#125;&quot;</span>&gt;</span><br><span class="line">    Hello JSTL!</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;2==1&#125;&quot;</span>&gt;</span><br><span class="line">        Hello When1!</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;2==1&#125;&quot;</span>&gt;</span><br><span class="line">        Hello When2!</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        Hello Otherwise!</span><br><span class="line">    &lt;/c:otherwise&gt;:</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="8-2-3-lt-c-forEach-gt"><a href="#8-2-3-lt-c-forEach-gt" class="headerlink" title="8.2.3 &lt;c:forEach&gt;"></a>8.2.3 &lt;c:forEach&gt;</h5><p>迭代器，用于迭代集合</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324193500430.png" alt="image-20220324193500430"></p><p>varStatus 属性 </p><p>current: 当前这次迭代的（集合中的）项 </p><p>index: 当前这次迭代从 0 开始的迭代索引 </p><p>count: 当前这次迭代从 1 开始的迭代计数 </p><p>first: 用来表明当前这轮迭代是否为第一次迭代的标志 </p><p>last: 用来表明当前这轮迭代是否为最后一次迭代的标志 </p><p>begin: 属性值 </p><p>end: 属性值</p><p>step: 属性值</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">&quot;$&#123;1==1&#125;&quot;</span>&gt;</span><br><span class="line">    Hello JSTL!</span><br><span class="line">&lt;/c:<span class="keyword">if</span>&gt;</span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;1==1&#125;&quot;</span>&gt;</span><br><span class="line">        Hello When1!</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">&quot;$&#123;1==1&#125;&quot;</span>&gt;</span><br><span class="line">        Hello When2!</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:otherwise&gt;</span><br><span class="line">        Hello Otherwise!</span><br><span class="line">    &lt;/c:otherwise&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;c:forEach begin=<span class="string">&quot;0&quot;</span> end=<span class="string">&quot;9&quot;</span> step=<span class="string">&quot;2&quot;</span> varStatus=<span class="string">&quot;suibian&quot;</span>&gt;</span><br><span class="line">    ForEach.....$&#123;suibian.count&#125;,$&#123;suibian.first&#125;,$&#123;suibian.last&#125;,$&#123;suibian.index&#125;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="8-2-3-1-使用-ForEach-迭代-List"><a href="#8-2-3-1-使用-ForEach-迭代-List" class="headerlink" title="8.2.3.1 使用 ForEach 迭代 List"></a><strong>8.2.3.1</strong> <strong>使用</strong> <strong>ForEach</strong> <strong>迭代</strong> <strong>List</strong></h6><p>需求： </p><p>创建 Users 对象，含有 userid，username 属性。 </p><p>创建一个 Servlet，在 Servlet 中创建多个 Users 对象并放到 List 集合中，在 showUsers.jsp </p><p>的页面中显示所有的 Users 对象的信息。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324202856629.png" alt="image-20220324202856629"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/findUsers.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindUsersServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建测试数据</span></span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>(<span class="number">1</span>,<span class="string">&quot;fgrggdg&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>(<span class="number">2</span>,<span class="string">&quot;GFGFGFGF&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化List</span></span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(users);</span><br><span class="line">        list.add(users1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将List添加request对象中</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过请求转发方式跳转</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;showUsers.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;table border=<span class="string">&quot;1&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;用户ID&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户姓名&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;u&quot;</span>&gt;</span><br><span class="line">            &lt;tr&gt;</span><br><span class="line">                &lt;td&gt;$&#123;u.userid&#125;&lt;/td&gt;</span><br><span class="line">                &lt;td&gt;$&#123;u.username&#125;&lt;/td&gt;</span><br><span class="line">            &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h6 id="8-2-3-2-使用-ForEach-迭代-Map"><a href="#8-2-3-2-使用-ForEach-迭代-Map" class="headerlink" title="8.2.3.2 使用 ForEach 迭代 Map"></a><strong>8.2.3.2</strong> <strong>使用</strong> <strong>ForEach</strong> <strong>迭代</strong> <strong>Map</strong></h6><p>需求： </p><p>创建 Users 对象，含有 userid，username 属性。 </p><p>创建一个 Servlet，在 Servlet 中创建多个 Users 对象并放到 Map 集合中，在 showUsers2.jsp </p><p>的页面中显示所有的 Users 对象的信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/findUser2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindUsers2Servlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建测试数据</span></span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>(<span class="number">1</span>,<span class="string">&quot;fgrggdg&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>(<span class="number">2</span>,<span class="string">&quot;GFGFGFGF&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//实例化Map</span></span><br><span class="line">        Map&lt;String,Users&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;users1&quot;</span>,users);</span><br><span class="line">        map.put(<span class="string">&quot;users2&quot;</span>,users1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将Map添加request对象中</span></span><br><span class="line">        req.setAttribute(<span class="string">&quot;Map&quot;</span>,map);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过请求转发方式跳转</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;showUsers1.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table border=<span class="string">&quot;1&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;Map-Key&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;用户ID&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;用户姓名&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;map&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;u&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.key&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.value.userid&#125;&lt;/td&gt;</span><br><span class="line">        &lt;td&gt;$&#123;u.value.username&#125;&lt;/td&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="8-3-JSTL格式化标签的使用"><a href="#8-3-JSTL格式化标签的使用" class="headerlink" title="8.3 JSTL格式化标签的使用"></a>8.3 JSTL格式化标签的使用</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><h4 id="8-3-1-对日期的格式化处理"><a href="#8-3-1-对日期的格式化处理" class="headerlink" title="8.3.1 对日期的格式化处理"></a>8.3.1 对日期的格式化处理</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;fmt:formatDate value=<span class="string">&quot;$&#123;data&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h4 id="8-3-2-对数字格式化的处理"><a href="#8-3-2-对数字格式化的处理" class="headerlink" title="8.3.2 对数字格式化的处理"></a>8.3.2 对数字格式化的处理</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;fmt:formatNumber value=<span class="string">&quot;$&#123;balance&#125;&quot;</span> type=<span class="string">&quot;currency&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">24</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">47</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;fmt&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/fmt&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    $&#123;date&#125;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;fmt:formatDate value=<span class="string">&quot;$&#123;date&#125;&quot;</span> pattern=<span class="string">&quot;yyyy-MM-dd&quot;</span>/&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;fmt:formatNumber value=<span class="string">&quot;$&#123;balance&#125;&quot;</span> type=<span class="string">&quot;currency&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/format.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FormatServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;date&quot;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        req.setAttribute(<span class="string">&quot;balance&quot;</span>,<span class="number">45645657657.765756756</span>);</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;format.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四、MVC模式"><a href="#四、MVC模式" class="headerlink" title="四、MVC模式"></a>四、MVC模式</h2><h3 id="1-什么是MVC模式"><a href="#1-什么是MVC模式" class="headerlink" title="1.什么是MVC模式"></a>1.什么是MVC模式</h3><p>MVC 模式：Model、View、Controller 即模型、视图、控制器。是软件的一种架构模式 （Architecture pattern）。MVC 要实现的目标是将软件的用户界面和业务逻辑分离，可提高代码可扩展性、可复用性、可维护性、以及灵活性。 </p><p>View(视图)：用户的操作界面。如：html、jsp。 </p><p>Model(模型)：具体的业务模型与数据模型。如：service、dao、pojo。 </p><p>Controller(控制)：处理从视图层发送的请求，并选取模型层的业务模型完成响应的业务 </p><p>实现，并产生响应。如：Servlet。 </p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324204323698.png" alt="image-20220324204323698"></p><h3 id="2-MVC模式与应用程序分层的区别"><a href="#2-MVC模式与应用程序分层的区别" class="headerlink" title="2 MVC模式与应用程序分层的区别"></a>2 MVC模式与应用程序分层的区别</h3><p>MVC 模式是一种软件的架构方式，而应用程序分层这是一种代码的组织方式。MVC 模式与应用程序分层的目标都是一致的：为了解耦和、提高代码复用性。 </p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220324204354929.png" alt="image-20220324204354929"></p><h2 id="Link-Addr："><a href="#Link-Addr：" class="headerlink" title="Link-Addr："></a>Link-Addr：</h2><p><a href="https://www.aliyundrive.com/s/fWBtTsfqQah">https://www.aliyundrive.com/s/fWBtTsfqQah</a>          提取码: 7tb2 </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JSP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven的应用与实战</title>
      <link href="/archives/130d9e8d.html"/>
      <url>/archives/130d9e8d.html</url>
      
        <content type="html"><![CDATA[<h1 id="Maven的应用与实战"><a href="#Maven的应用与实战" class="headerlink" title="Maven的应用与实战"></a>Maven的应用与实战</h1><h2 id="Maven简介"><a href="#Maven简介" class="headerlink" title="Maven简介"></a>Maven简介</h2><h3 id="什么是Maven"><a href="#什么是Maven" class="headerlink" title="什么是Maven"></a>什么是Maven</h3><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330221201399.png" alt="image-20220330221201399"></p><h3 id="Maven的作用"><a href="#Maven的作用" class="headerlink" title="Maven的作用"></a>Maven的作用</h3><p>Maven的两大作用：一键构建和依赖管理</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330221552332.png" alt="image-20220330221552332"></p><p><em><strong>一键构建</strong></em></p><p>我们的项目往往都要经历编译、测试、运行、打包、安装 ，部署等一系列过程，这些过程称之为构建。通过Maven工具，可以使用简单的命令轻松完成构建工作</p><p><em><strong>依赖管理</strong></em></p><p>传统的Web项目中，我们必须将工程所依赖的jar包复制到工程中，导致了工程的变得很大。如果一个公司具有相同架构的项目有十个，那么就需要将这一份jar包复制到十个不同的工程中，非常浪费资源。</p><p>同样的项目内容，传统Web项目大小如下：</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330221647155.png" alt="image-20220330221647155"></p><p>而使用Maven构建的项目大小如下：</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330221714994.png" alt="image-20220330221714994"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330221728479.png" alt="image-20220330221728479"></p><p>maven工程中不直接将jar包导入到工程中，而是有一个专门存放jar包的仓库，仓库中的每个jar包都有自己的坐标。maven工程中只要配置jar包坐标即可，运行项目需要使用jar包时，根据坐标即可从maven仓库中拿到jar包即可运行。</p><h2 id="Maven的下载与IDE的整合"><a href="#Maven的下载与IDE的整合" class="headerlink" title="Maven的下载与IDE的整合"></a>Maven的下载与IDE的整合</h2><p><em><strong>下载</strong></em></p><p>进入<a href="https://maven.apache.org/download.cgi%E5%8D%B3%E5%8F%AF%E5%AE%8C%E6%88%90%E4%B8%8B%E8%BD%BD">https://maven.apache.org/download.cgi即可完成下载</a></p><p><em><strong>安装</strong></em></p><p>解压下载好的安装文件，解压后目录结构如下：</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330222330910.png" alt="image-20220330222330910"></p><ul><li>bin：存放maven的命令</li><li>boot：存放maven本身的引导程序，如类加载器等</li><li>conf：存放maven的配置文件</li><li>lib：存放maven本身运行所需的jar包</li></ul><p><em><strong>配置环境变量</strong></em></p><p>由于Maven是由Java语言开发的，运行时依赖Java环境，所以要在计算机的环境变量中配置<code>JAVA_HOME</code></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330222406666.png" alt="image-20220330222406666"></p><p>为了更方便的使用Maven命令，需要在环境变量中配置<code>MAVEN_HOME</code>和<code>Path</code></p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211111164554502.png" alt="image-20211111164554502"></p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211111164847238.png" alt="image-20211111164847238"></p><h3 id="查看版本"><a href="#查看版本" class="headerlink" title="查看版本"></a>查看版本</h3><p>打开CMD命令窗口，输入<code>mvn -v</code>，显示Maven版本和Java版本，证明安装成功</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211111165412679.png" alt="image-20211111165412679"></p><h2 id="Maven工程的类型与结构"><a href="#Maven工程的类型与结构" class="headerlink" title="Maven工程的类型与结构"></a>Maven工程的类型与结构</h2><h3 id="Maven工程类型"><a href="#Maven工程类型" class="headerlink" title="Maven工程类型"></a>Maven工程类型</h3><ul><li><p>POM工程</p><p>POM工程是逻辑工程，Maven并不会对该类型工程做打包处理，这些工程往往不包含具体的业务，而是用来整合其他工程的。</p></li><li><p>JAR工程</p><p>普通Java工程，在打包时会将项目打成jar包。</p></li><li><p>WAR工程</p><p>JAVA Web工程，在打包时会将项目打成war包。</p></li></ul><h3 id="Maven工程结构"><a href="#Maven工程结构" class="headerlink" title="Maven工程结构"></a>Maven工程结构</h3><p>接下来我们通过一个WAR工程学习Maven工程的结构文件目录结构：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211111174140361.png" alt="image-20211111174140361"></p><ul><li>src：源代码</li><li>target：编译生成的文件</li><li>pom.xml：Maven工程配置文件，如坐标信息等。</li></ul><p>项目结构：</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330223019451.png" alt="image-20220330223019451"></p><ul><li>src&#x2F;main&#x2F;java：存放项目的java 文件</li><li>src&#x2F;main&#x2F;resources：存放项目资源文件，如配置文件</li><li>src&#x2F;test&#x2F;java：存放项目的测试文件</li><li>src&#x2F;test&#x2F;resources：存放测试时的资源文件</li></ul><h2 id="一键构建-–项目的生命周期"><a href="#一键构建-–项目的生命周期" class="headerlink" title="一键构建 –项目的生命周期"></a>一键构建 –项目的生命周期</h2><p>使用maven完成项目的构建的过程中，包括：验证、编译、测试、打包、部署等过程，maven将这些过程规范为项目构建的生命周期。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211111180257011.png" alt="image-20211111180257011"></p><table><thead><tr><th>生命周期</th><th>所做工作</th></tr></thead><tbody><tr><td>验证 validate</td><td>验证项目是否正确</td></tr><tr><td>编译 compile</td><td>源代码编译</td></tr><tr><td>测试 Test</td><td>使用适当的单元测试框架（例如junit）运行测试。</td></tr><tr><td>打包 package</td><td>创建JAR&#x2F;WAR包</td></tr><tr><td>检查 verify</td><td>对集成测试的结果进行检查，以保证质量达标。</td></tr><tr><td>安装 install</td><td>安装打包的项目到本地仓库，以供其他项目使用。</td></tr><tr><td>部署 deploy</td><td>拷贝最终的工程包到远程仓库中，以共享给其他开发人员和工程。</td></tr></tbody></table><p><strong>maven有三套相互独立的生命周期。分为是构建生命周期，clean生命周期（清理构建后的文件）、site生命周期（生成项目报告）。作为开发人员我们一般重点学习构建生命周期即可。</strong></p><h2 id="一键构建-Maven常用命令"><a href="#一键构建-Maven常用命令" class="headerlink" title="一键构建_Maven常用命令"></a>一键构建_Maven常用命令</h2><p>在Maven构建项目的每一步都可以使用一句简单的命令完成，接下来我们学习这些命令：</p><table><thead><tr><th>mvn clean</th><th>清除编译的class文件，即删除</th></tr></thead><tbody><tr><td>mvn validate</td><td>验证项目是否正确</td></tr><tr><td>mvn compile</td><td>编译maven项目</td></tr><tr><td>mvn test</td><td>编译maven项目及运行测试文件</td></tr><tr><td>mvn package</td><td>编译maven项目及运行测试文件，并打包</td></tr><tr><td>mvn install</td><td>编译maven项目及运行测试文件并打包，并发布到本地仓库</td></tr><tr><td>mvn deploy</td><td>部署项目到远程仓库</td></tr><tr><td>mvn tomcat7:run</td><td>使用tomcat运行项目</td></tr><tr><td>mvn tomcat7:run</td><td>使用tomcat运行项目</td></tr></tbody></table><p>Maven依赖插件来执行命令，比如clean、validate等命令是maven自带的，tomcat7命令是引入的第三方插件。</p><h2 id="依赖管理-Maven仓库类型"><a href="#依赖管理-Maven仓库类型" class="headerlink" title="依赖管理_Maven仓库类型"></a>依赖管理_Maven仓库类型</h2><h3 id="本地仓库"><a href="#本地仓库" class="headerlink" title="本地仓库"></a>本地仓库</h3><p>本地仓库指用户计算机中的文件夹。用来存储从远程仓库或中央仓库下载的jar包，只有下载到本地仓库的jar包才能使用，项目使用jar包时优先从本地仓库查找。</p><h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>​远程仓库一般指私服，它是架设在局域网的仓库服务，可以从中央仓库下载资源，供局域网使用，从而减少每个程序员都从中央仓库下载浪费的带宽。如果项目需要的jar包本地仓库没有，则会去远程仓库下载，下载到本地仓库即可使用。</p><p>​<em><strong>远程仓库不是必须配置的，如果本地仓库没有jar包，也没有配置远程仓库，则会直接从中央仓库下载。</strong></em></p><h3 id="中央仓库"><a href="#中央仓库" class="headerlink" title="中央仓库"></a>中央仓库</h3><p>中央仓库是互联网上的服务器，是Maven提供的最大的仓库，里面拥有最全的jar包资源。如果项目需要的jar包，本地仓库和远程仓库都没有，则会去中央仓库下载，下载到本地仓库使用。</p><p>Maven中央仓库访问页面：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p>中央仓库访问速度较慢，我们一般都会配置镜像代理中央仓库的下载请求，如阿里镜像、华为镜像等。</p><h2 id="依赖管理-Maven配置文件"><a href="#依赖管理-Maven配置文件" class="headerlink" title="依赖管理_Maven配置文件"></a>依赖管理_Maven配置文件</h2><p>本地仓库的默认位置是<code>$&#123;user.dir&#125;/.m2/repository</code>，<code>$&#123;user.dir&#125;</code>表示 windows用户目录，我们可以通过修改<code>$&#123;MAVEN_HOME&#125;\conf\settings.xml</code>，修改本地仓库的位置。</p><p><em><strong>配置本地仓库</strong></em></p><p>在<code>&lt;settings&gt;</code>中添加如下标签：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 本地仓库路径 --&gt;</span></span><br><span class="line">2<span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>F://repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330224540277.png" alt="image-20220330224540277"></p><p><em><strong>配置镜像</strong></em></p><p>由于中央仓库访问速度较慢，可以配置镜像代理中央仓库的下载请求。在<code>&lt;settings&gt;</code>下的<code>&lt;mirrors&gt;</code>中添加如下标签即可配置镜像：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">   <span class="comment">&lt;!-- 指定镜像ID --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">   <span class="comment">&lt;!-- 匹配中央仓库。--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">   <span class="comment">&lt;!-- 指定镜像名称 --&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">   <span class="comment">&lt;!-- 指定镜像路径 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置JDK版本"><a href="#配置JDK版本" class="headerlink" title="配置JDK版本"></a>配置JDK版本</h3><p>创建maven项目的时候，默认使用的JDK是1.5版本，验证语法、编译、运行时都会按照JDK1.5操作，这样就有很多语法无法使用。我们本机安装的JDK是JDK11，可以配置maven按照JDK11创建项目。</p><p>在<code>&lt;settings&gt;</code>下的<code>&lt;profiles&gt;</code>中添加如下标签即可配置JDK版本：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;<span class="name">id</span>&gt;</span>jdk11<span class="tag">&lt;/<span class="name">id</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">activation</span>&gt;</span>   </span><br><span class="line">       <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">jdk</span>&gt;</span>11<span class="tag">&lt;/<span class="name">jdk</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">activation</span>&gt;</span>    </span><br><span class="line">   <span class="tag">&lt;<span class="name">properties</span>&gt;</span>   </span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span>    </span><br><span class="line">       <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">maven.compiler.compilerVersion</span>&gt;</span>11<span class="tag">&lt;/<span class="name">maven.compiler.compilerVersion</span>&gt;</span>   </span><br><span class="line">   <span class="tag">&lt;/<span class="name">properties</span>&gt;</span>   </span><br><span class="line"><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="Maven工程开发-构建Maven工程"><a href="#Maven工程开发-构建Maven工程" class="headerlink" title="Maven工程开发_构建Maven工程"></a>Maven工程开发_构建Maven工程</h2><p>打开 idea，选择创建一个新工程</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112110347836.png" alt="image-20211112110347836"></p><p>选择Maven工程，并使用maven的web工程模板</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112110523133.png" alt="image-20211112110523133"></p><p>点击 Next 填写项目信息</p><p>点击 Next，此处不做改动，点击Finish构建项目</p><p>手动添加src&#x2F;main&#x2F;java目录，此时该目录还不能写Java代码。</p><p>将src&#x2F;main&#x2F;java目录设置为Java代码目录。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330232604512.png" alt="image-20220330232604512"></p><h2 id="Maven工程开发-pom文件配置"><a href="#Maven工程开发-pom文件配置" class="headerlink" title="Maven工程开发_pom文件配置"></a>Maven工程开发_pom文件配置</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330233707916.png" alt="image-20220330233707916"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220330233727119.png" alt="image-20220330233727119"></p><p>pom文件最上方是项目基本信息：</p><ul><li><p>groupId</p><p>groupId一般定义项目组名，命名规则使用反向域名。例如com.itbaizhan</p></li><li><p>artifactId</p><p>artifactId一般定义项目名，命名使用小写字母。项目发布后，它的坐标是groupId+artifactId。</p></li><li><p>version</p><p>version定义版本号。版本号一般有三段，第一段：革命性的产品升级。第二段：新功能版本。第三段：修正一些bug。</p></li><li><p>packaging</p><p>packaging定义打包方式。</p></li></ul><p><code>&lt;properties&gt;</code>中定义一些配置信息：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112154945589.png" alt="image-20211112154945589"></p><p><dependencies>&#96;中定义依赖的jar包坐标：</p><p>由于项目是web项目，需要写Servlet和JSP，所以需要引入Servlet和JSP的依赖。查找依赖坐标的网站：<a href="https://mvnrepository.com/">https://mvnrepository.com/</a></p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115162817221.png" alt="image-20211115162817221"></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为什么之前的web项目中没有引入jsp和servlet的jar包？</p><p>因为之前项目中使用的是tomcat中的jsp和servlet中的jar包，在项目中没有引入。</p><p><code>&lt;plugins&gt;</code>中定义第三方插件：</p><p>web项目依赖tomcat运行，所以添加tomcat7插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven工程开发-编写代码"><a href="#Maven工程开发-编写代码" class="headerlink" title="Maven工程开发_编写代码"></a>Maven工程开发_编写代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       req.getRequestDispatcher(<span class="string">&quot;hello.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">3</span>/<span class="number">31</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">47</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;测试&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;你好，百战程序员！&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>运行项目，按照如图步骤，配置使用maven中的tomcat7插件运行项目：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112162439840.png" alt="image-20211112162439840"></p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211122151215570.png" alt="image-20211122151215570"></p><p>点击OK后配置完成，点击Idea的运行符号即可使用maven中的tomcat7插件运行项目。</p><h2 id="Maven工程开发-依赖范围"><a href="#Maven工程开发-依赖范围" class="headerlink" title="Maven工程开发_依赖范围"></a>Maven工程开发_依赖范围</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220331111146575.png" alt="image-20220331111146575"></p><p>访问servlet后，发现报500异常，这是为什么呢？</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112165109276.png" alt="image-20211112165109276"></p><p>这是由于项目中引入了Servlet和Jsp的jar包，而在项目运行时，Tomcat要使用它自带的Servlet和Jsp的jar包，这样就造成了jar包冲突。但如果项目不引入Servlet和Jsp的jar包，则根本无法通过编译。</p><p>此时可以设置依赖的作用范围解决该问题，设置Servlet和Jsp的jar包只在编译期起作用，运行时不起作用，这样不仅可以通过编译，还能在运行时避免jar包冲突。</p><p>通过在<code>&lt;dependency&gt;</code>中添加<code>&lt;scope&gt;</code>，可以设置依赖的作用范围，有以下取值：</p><ul><li><p>compile</p><p>默认范围。表示该依赖在编译和运行时生效，项目打包时也会将该依赖打包进去。</p></li><li><p>provided</p><p>使用此依赖范围的Maven依赖，编译和测试时有效，但在运行时无效。典型的例子是servlet-api，在运行时Web容器已经提供依赖，就不需要Maven重复地引入一遍。</p></li><li><p>runtime</p><p>runtime范围表明编译时不需要生效，而只在运行时生效。典型的例子是JDBC驱动包，编译时只需要JDK的JDBC接口即可，只有运行项目时才需要具体的JDBC驱动。</p></li><li><p>test</p><p>test范围表明使用此依赖范围的依赖，只在编译和运行测试代码的时生效，程序的正常运行不需要此类依赖。典型的例子就是JUnit，它只有在编译测试代码及运行测试的时候才需要。</p></li><li><p>system</p><p>如果有些你依赖的jar包没有Maven坐标的，它完全不在Maven体系中，这时候你可以把它下载到本地硬盘，然后通过system来引用。（不推荐使用）</p></li></ul><p>所以对于Servlet和Jsp依赖，我们添加依赖范围为provided即可。</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;jsp-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">2.2</span>&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;javax.servlet&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;<span class="number">3.0</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>重启项目，即可正常访问Servlet和Jsp</p><h2 id="Maven工程测试-测试概述"><a href="#Maven工程测试-测试概述" class="headerlink" title="Maven工程测试_测试概述"></a>Maven工程测试_测试概述</h2><p>测试即在交付前对写好的代码进行测评，分为黑盒测试和白盒测试；</p><ul><li><p>黑盒测试：不需要写代码，给输入值，看程序是否能够输出期望的值。</p></li><li><p>白盒测试：需要写代码的。关注程序具体的执行流程。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112173759329.png" alt="image-20211112173759329"></p></li></ul><p>单元测试是指对软件中的最小可测试单元进行检查和验证，Java里单元测试指一个类的功能。单元测试是在软件开发过程中要进行的最低级别的测试活动，软件的独立单元将在与程序的其他部分相隔离的情况下进行测试。</p><p>Junit是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。从分类中属于白盒测试。</p><h2 id="Maven工程测试-Junit使用步骤"><a href="#Maven工程测试-Junit使用步骤" class="headerlink" title="Maven工程测试_Junit使用步骤"></a>Maven工程测试_Junit使用步骤</h2><h3 id="在Maven项目中引入依赖"><a href="#在Maven项目中引入依赖" class="headerlink" title="在Maven项目中引入依赖"></a>在Maven项目中引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="定义被测试的类"><a href="#定义被测试的类" class="headerlink" title="定义被测试的类"></a>定义被测试的类</h3><p>我们定义一个计算器工具类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="comment">// 加法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">// 除法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a/b;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对定义的类进行测试"><a href="#对定义的类进行测试" class="headerlink" title="对定义的类进行测试"></a>对定义的类进行测试</h3><ol><li><p>创建src&#x2F;test&#x2F;java包，并将改包设置为测试包。</p></li><li><p>在src&#x2F;test&#x2F;java中创建测试类的包，包名一般与被测试包名一致。</p></li><li><p>定义测试类，类名一般为被测试类+Test</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112175314440.png" alt="image-20211112175314440"></p></li></ol><p> 4.测试类中编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTest</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试方法是可以独立运行的，写法如下：</span></span><br><span class="line"><span class="comment">     * 1.方法名一般为test+被测试方法名</span></span><br><span class="line"><span class="comment">     * 2.方法上添加<span class="doctag">@Test</span></span></span><br><span class="line"><span class="comment">     * 3.测试方法没有参数和返回值</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculator.add(<span class="number">12</span>,<span class="number">56</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testdiv</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">        <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculator.div(<span class="number">45</span>,<span class="number">5</span>);</span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Maven工程测试-Junit结果判定"><a href="#Maven工程测试-Junit结果判定" class="headerlink" title="Maven工程测试_Junit结果判定"></a>Maven工程测试_Junit结果判定</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211021115534302.png" alt="image-20211021115534302"></p><p>点击测试方法边的三角运行测试方法，如果出现绿色对钩，证明方法能正常运行；如果出现红色感叹号，证明方法抛出异常，需要修改方法。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112180426210.png" alt="image-20211112180426210"></p><p>当然，不是能正常运行就代表方法一定没有问题，也有可能方法的结果和预期结果不一致，这时就需要使用断言操作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">calculator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Calculator</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">add</span> <span class="operator">=</span> calculator.add(<span class="number">12</span>,<span class="number">56</span>);</span><br><span class="line">    System.out.println(add);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 断言</span></span><br><span class="line"><span class="comment">     * 参数一：预期结果</span></span><br><span class="line"><span class="comment">     * 参数二：实际结果</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果真实结果和预期结果不一致，则会抛出以下异常：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211112180802735.png" alt="image-20211112180802735"></p><h2 id="Maven工程测试-Before、-After"><a href="#Maven工程测试-Before、-After" class="headerlink" title="Maven工程测试_@Before、@After"></a>Maven工程测试_@Before、@After</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220331195310101.png" alt="image-20220331195310101"></p><p>在测试类中，@Before修饰的方法会在测试方法之前自动执行，@After修饰的方法会在测试方法执行之后自动执行。之后的学习中，我们可以设置前置方法为获取资源，后置方法为释放资源。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;开始测试&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;结束测试&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖冲突调解-最短路径优先原则"><a href="#依赖冲突调解-最短路径优先原则" class="headerlink" title="依赖冲突调解_最短路径优先原则"></a>依赖冲突调解_最短路径优先原则</h2><h3 id="依赖冲突产生的原因——依赖传递"><a href="#依赖冲突产生的原因——依赖传递" class="headerlink" title="依赖冲突产生的原因——依赖传递"></a>依赖冲突产生的原因——依赖传递</h3><p>假设你的项目依赖jar包A，jar包A又依赖jar包B。当添加jar包A时，Maven会把jar包B也自动加入到项目中。比如刚刚我们添加了junit依赖，junit又依赖hamcrest，所以Maven会将junit和hamcrest都加入项目中。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115102709538.png" alt="image-20211115102709538"></p><p>这时就可能会产生依赖冲突问题，比如依赖A会引入依赖C，依赖B也会引入依赖C。如果不进行调解则会引入两个依赖C，那么Maven是如何解决依赖冲突问题的呢？</p><h3 id="依赖冲突调解"><a href="#依赖冲突调解" class="headerlink" title="依赖冲突调解"></a>依赖冲突调解</h3><p>我们以Spring依赖为例，spring-webmvc依赖spring-aop，spring-context也依赖spring-aop，如果两个同时引入，会引入哪个版本的spring-aop呢？</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Maven调解依赖冲突的第一原则是最短路径优先原则："><a href="#Maven调解依赖冲突的第一原则是最短路径优先原则：" class="headerlink" title="Maven调解依赖冲突的第一原则是最短路径优先原则："></a>Maven调解依赖冲突的第一原则是最短路径优先原则：</h3><p>也就是说项目依赖关系树中路径最短的版本会被使用。例如，假设有几个jar包之间的依赖关系是：<code>A-&gt;B-&gt;C-&gt;D(2.0)</code>和<code>E-&gt;F-&gt;D(1.0)</code>，如果同时引入A和E，那么D(1.0)会被使用，因为E到D的路径更短。</p><p>查看依赖路径的方式如下：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115105502648.png" alt="image-20211115105502648"></p><p>spring-webmvc到spring-aop的路径如下：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115105712751.png" alt="image-20211115105712751"></p><p>spring-context到spring-aop的路径如下：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115105839128.png" alt="image-20211115105839128"></p><p>可以看到，spring-webmvc到spring-aop的路径为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-webmvc` -&gt; `spring-context` -&gt;`spring-aop</span><br></pre></td></tr></table></figure><p>而spring-context到spring-aop的路径为：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">spring-context` -&gt;`spring-aop</span><br></pre></td></tr></table></figure><p>spring-context到spring-aop的路径更短，所以spring-aop会按照spring-context的版本引入。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115110247260.png" alt="image-20211115110247260"></p><h2 id="依赖冲突调解-最先声明原则"><a href="#依赖冲突调解-最先声明原则" class="headerlink" title="依赖冲突调解_最先声明原则"></a>依赖冲突调解_最先声明原则</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211116163041084.png" alt="image-20211116163041084"></p><p>最短路径优先原则不能解决所有问题，比如这样的依赖关系：<code>A–&gt;B–&gt;C(1.0)</code>和<code>D–&gt;E–&gt;C(2.0)</code>，同时引入A和D之后，C(1.0)和C(2.0)的依赖路径长度都为2。此时第一原则将不能解决问题</p><h3 id="Maven调解依赖冲突的第二原则是最先声明原则："><a href="#Maven调解依赖冲突的第二原则是最先声明原则：" class="headerlink" title="Maven调解依赖冲突的第二原则是最先声明原则："></a>Maven调解依赖冲突的第二原则是最先声明原则：</h3><p>在依赖路径长度相等的前提下，在POM中依赖声明的顺序靠前的会被解析使用。比如：以上案例中，spring-webmvc和spring-context到spring-core的路径都为1。谁声明在上方，spring-core会按照谁的版本引入。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115105712751.png" alt="image-20211115105712751"></p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115105839128.png" alt="image-20211115105839128"></p><h2 id="依赖冲突调解-排除依赖、锁定版本"><a href="#依赖冲突调解-排除依赖、锁定版本" class="headerlink" title="依赖冲突调解_排除依赖、锁定版本"></a>依赖冲突调解_排除依赖、锁定版本</h2><p>如果不想使用Maven默认的冲突调解方式，有两种方式可以手动进行冲突调解。</p><h3 id="排除依赖"><a href="#排除依赖" class="headerlink" title="排除依赖"></a>排除依赖</h3><p>比如以上案例中，想使用spring-webmvc的spring-aop包，那么可以让spring-context引入时排除引入spring-aop包，这样就可以使用spring-webmvc的spring-aop包了，写法如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="锁定版本"><a href="#锁定版本" class="headerlink" title="锁定版本"></a>锁定版本</h3><p>在Maven中为某个jar包配置锁定版本后，不考虑依赖的声明顺序和依赖路径，以锁定的版本的为准添加到工程中，此方法在企业开发中常用。以下可以直接配置spring-aop锁定的版本。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.4.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">9<span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven聚合开发-聚合关系"><a href="#Maven聚合开发-聚合关系" class="headerlink" title="Maven聚合开发_聚合关系"></a>Maven聚合开发_聚合关系</h2><p>之前我们在Idea中开发时会将项目的所有包放在同一个工程当中。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115142419217.png" alt="image-20211115142419217"></p><ul><li>domain：定义实体类</li><li>dao：操作数据库</li><li>service：具体的业务逻辑，需要调用dao的方法。</li><li>controller：前后端交互，需要调用service的方法。</li><li>webapp：存放前端资源</li></ul><p>假如我们现在写了两个项目分别是电商卖家端和电商买家端，两个项目都需要调用serive层查询订单的方法。原来的写法如下：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115143743553.png" alt="image-20211115143743553"></p><p>重复编码造成开发效率降低。</p><p>而使用maven后，我们可以把之前的项目按需拆分成一个个小项目，之后将小项目发布到仓库中，小项目之间也可以互相引用，并且在我们的项目中引入需要的小项目即可。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115144639752.png" alt="image-20211115144639752"></p><p>Maven将一个大项目分成一个个小项目开发，最后打包时会将这些小的项目打成一个完整的war包独立运行。</p><h2 id="Maven聚合开发-继承关系"><a href="#Maven聚合开发-继承关系" class="headerlink" title="Maven聚合开发_继承关系"></a>Maven聚合开发_继承关系</h2><p>Maven中的继承是针对于父工程和子工程。父工程定义的依赖和插件子工程可以直接使用。注意父工程类型一定为<em><strong>POM</strong></em>类型工程。</p><h3 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h3><p>在Maven中对于继承采用的也是单继承，也就是说一个子项目只能有一个父项目。但我们可以在<code>&lt;dependencyManagement&gt;</code>配置多继承。写法如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--父项目a--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent_a<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT&lt;/version*&gt;</span><br><span class="line">           <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 引入父项目，scope的值为import --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--父项目b--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>parent_b<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Maven聚合案例-搭建父工程"><a href="#Maven聚合案例-搭建父工程" class="headerlink" title="Maven聚合案例_搭建父工程"></a>Maven聚合案例_搭建父工程</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115161858878.png" alt="image-20211115161858878"></p><p>1.创建一个Maven工程，创建时不需要选择模板</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115160427830.png" alt="image-20211115160427830"></p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211122151517139.png" alt="image-20211122151517139"></p><p>2.由于父工程是虚拟工程，不需要写逻辑代码，所以删除父工程的src目录</p><p>3.由于父工程的依赖和插件子工程都能继承，可以将需要的依赖和插件都配置在父工程中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_ParentDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>13<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>13<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--jdbc驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--jstl--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-spec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">java.util.logging.SimpleFormatter.format</span>&gt;</span>%1$tH:%1$tM:%1$tS %2$s%n%4$s: %5$s%6$s%n<span class="tag">&lt;/<span class="name">java.util.logging.SimpleFormatter.format</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;/<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>IDEA中工程和模块有什么区别？</p><p>没什么区别，只是新工程会占据一个新窗口，我们一般写父工程时定义为新工程，写子工程时定义为新模块。</p><h2 id="Maven聚合案例-搭建dao模块"><a href="#Maven聚合案例-搭建dao模块" class="headerlink" title="Maven聚合案例_搭建dao模块"></a>Maven聚合案例_搭建dao模块</h2><p>dao子工程中一般写实体类和dao层：</p><p>1.在父工程下创建maven模块，不选择模板，创建时一定要选择父工程。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211122151610326.png" alt="image-20211122151610326"></p><p>2.子模块的pom文件中写入父工程证明继承成功。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211122151640657.png" alt="image-20211122151640657"></p><p>3.准备数据库</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE DATABASE `student`;</span><br><span class="line">USE `student`;</span><br><span class="line">3DROP TABLE IF EXISTS `student`;</span><br><span class="line">4CREATE TABLE `student` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `name` varchar(255) DEFAULT NULL,</span><br><span class="line">  `sex` varchar(10) DEFAULT NULL,</span><br><span class="line">  `address` varchar(255) DEFAULT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;</span><br><span class="line"></span><br><span class="line">insert  into `student`(`id`,`name`,`sex`,`address`) values (1,&#x27;百战程序员&#x27;,&#x27;男&#x27;,&#x27;北京&#x27;),(2,&#x27;北京尚学堂&#x27;,&#x27;女&#x27;,&#x27;北京&#x27;);</span><br></pre></td></tr></table></figure><p>4.编写实体类</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220401132611122.png" alt="image-20220401132611122"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name, String sex, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.在resources中编写连接数据库的配置文件db.properties</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.url=jdbc:mysql:///student1</span><br><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=root</span><br></pre></td></tr></table></figure><p>6.编写dao方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="comment">//查询所有学生</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SQLException &#123;</span><br><span class="line">        <span class="comment">//读取配置文件</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(<span class="string">&quot;db.properties&quot;</span>);</span><br><span class="line">        properties.load(resourceAsStream);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;jdbc.url&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;jdbc.user&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;jdbc.password&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询数据库</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url,user,password);</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connection.createStatement();</span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> statement.executeQuery(<span class="string">&quot;select * from student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//处理结果集</span></span><br><span class="line">        List&lt;Student&gt; students = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next())&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;address&quot;</span>);</span><br><span class="line">            <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, name, sex, address);</span><br><span class="line">            students.add(student);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        resultSet.close();</span><br><span class="line">        statement.close();</span><br><span class="line">        connection.close();</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.测试dao方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoTest</span> &#123;</span><br><span class="line">    <span class="comment">//测试findAll</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SQLException &#123;</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDao</span>();</span><br><span class="line">        List&lt;Student&gt; all = studentDao.findAll();</span><br><span class="line">        all.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Maven聚合案例-搭建service模块"><a href="#Maven聚合案例-搭建service模块" class="headerlink" title="Maven聚合案例_搭建service模块"></a>Maven聚合案例_搭建service模块</h2><p>service子工程中一般写service层的内容，也需要继承父工程，由于需要调用dao子工程的方法，所以需要导入dao子工程的依赖。</p><ol><li><p>在父工程下创建maven模块，不选择模板，选择父工程。</p></li><li><p>在service模块的pom文件中引入dao子工程的依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_ParentDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_ParentDemo_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--依赖Dao--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_ParnetDemo_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220401154350645.png" alt="image-20220401154350645"></p></li></ol><p>3.编写Service方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">  <span class="keyword">private</span>  <span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDao</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询所有学生</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAllStudent</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SQLException &#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试service方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAllStudent</span><span class="params">()</span> <span class="keyword">throws</span> IOException, SQLException &#123;</span><br><span class="line">        <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentService</span>();</span><br><span class="line">        List&lt;Student&gt; allstudent = studentService.findAllStudent();</span><br><span class="line">        <span class="keyword">for</span> (Student student : allstudent) &#123;</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Maven聚合案例_搭建web模块</p><p>web子工程中一般要写控制器和前端页面的内容。它不是普通的java工程，而是一个web工程，需要继承父工程，导入service子工程的依赖。</p><p>1.在父工程下创建maven模块，选择web工程模板，选择父工程</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211122151800147.png" alt="image-20211122151800147"></p><p>2.创建好后，添加父工程，删除pom文件中的jdk编译版本，删掉junit依赖，引入service依赖。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_ParentDemo_web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_ParentDemo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>Maven_ParentDemo_web Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>Maven_ParentDemo_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>Maven_ParentDemo_web<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写控制器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.service.StudentService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;allStudent&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FindAllStudentServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentService</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            List&lt;Student&gt; allStudent = studentService.findAllStudent();</span><br><span class="line">            req.setAttribute(<span class="string">&quot;allStudent&quot;</span>,allStudent);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        req.getRequestDispatcher(<span class="string">&quot;allStudent.jsp&quot;</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.编写页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">4</span>/<span class="number">1</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">01</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;%<span class="meta">@taglib</span> prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;所有学生&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;table width=<span class="string">&quot;500px&quot;</span> align=<span class="string">&quot;center&quot;</span> border=<span class="string">&quot;1&quot;</span> cellpadding=<span class="string">&quot;0&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">        &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">        &lt;th&gt;地址&lt;/th&gt;</span><br><span class="line">    &lt;/tr&gt;</span><br><span class="line">    &lt;c:forEach items=<span class="string">&quot;$&#123;allStudent&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.id&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.name&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.sex&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;student.address&#125;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">    &lt;/c:forEach&gt;</span><br><span class="line">&lt;/table&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220401200938530.png" alt="image-20220401200938530"></p><h2 id="Maven聚合案例-运行项目"><a href="#Maven聚合案例-运行项目" class="headerlink" title="Maven聚合案例_运行项目"></a>Maven聚合案例_运行项目</h2><p>有以下两种方式可以运行项目：</p><p>1.配置tomcat插件运行父工程，此时会自动聚合运行项目。点开配置tomcat7插件：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211115174949604.png" alt="image-20211115174949604"></p><p>进行如下配置：</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220401202246714.png" alt="image-20220401202246714"></p><p>工具路径记得选择父工程所在的路径</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220401202325026.png" alt="image-20220401202325026"></p><p>父工程一定要记得写encoding</p><p>2.配置tomcat插件运行web子工程。运行web子工程时会从本地仓库下载依赖的jar包，所以必须将dao模块和service模块发布到本地仓库，我们可以直接发布整个项目。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220401202726632.png" alt="image-20220401202726632"></p><p>之后按照tomcat插件配置父工程的方式配置web工程即可：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211122152040100.png" alt="image-20211122152040100"></p><p>点击运行箭头即可访问<a href="http://localhost:8080/allStudent">http://localhost:8080/allStudent</a></p><h2 id="PROJECT-LINK"><a href="#PROJECT-LINK" class="headerlink" title="PROJECT LINK:"></a>PROJECT LINK:</h2><p><a href="https://www.aliyundrive.com/s/RLFdyCxrav7">https://www.aliyundrive.com/s/RLFdyCxrav7</a> </p><p>提取码: we37 </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis学习笔记</title>
      <link href="/archives/5177b49d.html"/>
      <url>/archives/5177b49d.html</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架</h1><h2 id="什么是框架"><a href="#什么是框架" class="headerlink" title="什么是框架"></a>什么是框架</h2><p><em><strong>框架即是一个半成品软件。</strong></em></p><p>​开发者从头开发一个软件需要花费大量精力，于是有一些项目组开发出半成品软件，开发者在这些软件的基础上进行开发，这样的软件就称之为框架。</p><p>​如果将开发完成的软件比作是一套已经装修完毕的新房，框架就好比是一套已经修建好的毛坯房。用户直接购买毛坯房，保证建筑质量和户型合理的同时可以进行风格的自由装修</p><h3 id="使用框架开发的好处："><a href="#使用框架开发的好处：" class="headerlink" title="使用框架开发的好处："></a>使用框架开发的好处：</h3><ol><li>省去大量的代码编写、减少开发时间、降低开发难度。</li><li>限制程序员必须使用框架规范开发，增强代码的规范性，降低程序员之间沟通及日后维护的成本。</li><li>将程序员的注意力从技术中抽离出来，更集中在业务层面。</li></ol><h2 id="什么是ORM框架？"><a href="#什么是ORM框架？" class="headerlink" title="什么是ORM框架？"></a>什么是ORM框架？</h2><p><strong>ORM（Object Relationl Mapping），对象关系映射，即在数据库和对象之间作映射处理。</strong></p><p>之前我们使用JDBC操作数据库，必须手动进行数据库和对象间的数据转换。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 新增方法，将对象转为sql语句字段</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">AddUser</span><span class="params">(User user)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot;</span>,<span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;INSERT INTO user values (null,?,?,?,?)&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">    preparedStatement.setString(<span class="number">1</span>,user.getName());</span><br><span class="line"></span><br><span class="line">    preparedStatement.setInt(<span class="number">2</span>,user.getAge());</span><br><span class="line"></span><br><span class="line">    preparedStatement.setString(<span class="number">3</span>,user.getAddress());</span><br><span class="line"></span><br><span class="line">    preparedStatement.setString(<span class="number">4</span>,user.getSex());</span><br><span class="line"></span><br><span class="line">    preparedStatement.executeUpdate();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 省略资源关闭...</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询方法，将数据库结果集转为对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAllUser</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(<span class="string">&quot;select * from user&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历查询结果集</span></span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拿到每一列数据</span></span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;id&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> resultSet.getInt(<span class="string">&quot;age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">address</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;address&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">sex</span> <span class="operator">=</span> resultSet.getString(<span class="string">&quot;sex&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将数据封装到对象中</span></span><br><span class="line"> <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line"> user.setId(id);</span><br><span class="line">user.setName(name);</span><br><span class="line"> user.setAge(age);</span><br><span class="line">user.setAddress(address);</span><br><span class="line"> user.setSex(sex);</span><br><span class="line">users.add(user);</span><br><span class="line">&#125; </span><br><span class="line">    <span class="comment">// 省略资源关闭...</span></span><br><span class="line"><span class="keyword">return</span> users;&#125;</span><br></pre></td></tr></table></figure><p>这段代码中，数据库数据与对象数据的转换代码繁琐、无技术含量。</p><p>而使用ORM框架代替JDBC后，框架可以帮助程序员自动进行转换，只要像平时一样操作对象，ORM框架就会根据映射完成对数据库的操作，极大的增强了开发效率。</p><h2 id="什么是MyBatis？"><a href="#什么是MyBatis？" class="headerlink" title="什么是MyBatis？"></a>什么是MyBatis？</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220402090018524.png" alt="image-20220402090018524"></p><p><strong>MyBatis是一个半自动的ORM框架</strong>，其本质是对JDBC的封装。使用MyBatis不需要写JDBC代码，<strong>但需要程序员编写SQL语句</strong>。之前是apache的一个开源项目iBatis，2010年改名为MyBatis。</p><h3 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h3><p>Hibernate也是一款持久层ORM框架，多年前的市场占有率很高，但近年来市场占有率越来越低。MyBatis与Hibernate的比较：</p><ul><li><em><strong>MyBatis是一个半自动的ORM框架，需要手写SQL语句。</strong></em></li><li><em><strong>Hibernate是一个全自动的ORM框架，不需要手写SQL语句。</strong></em></li><li><em><strong>使用MyBatis的开发量要大于Hibernate。</strong></em></li></ul><p>为什么Hibernate市场占有率越来越低：</p><ul><li>对于新手学习Hibernate时间成本比MyBatis大很多，MyBatis上手很快。</li><li>Hibernate不需要写SQL语句是因为框架来生成SQL语句。对于复杂查询，开发者很难控制生成的SQL语句，这就导致SQL调优很难进行。</li><li>之前的项目功能简单，数据量小，所以使用Hibernate可以快速完成开发。而近年来项目的数据量越来越大，而互联网项目对查询速度要求也很高，这就要求我们一定要精细化的调整SQL语句。此时灵活性更强，手动编写SQL语句的MyBatis慢慢代替了Hibernate使用。</li><li><strong>在高并发、大数据、高性能、高响应的互联网项目中，MyBatis是首选的持久框架</strong>。而对于对性能要求不高的比如内部管理系统等可以使用Hibernate。</li></ul><h2 id="MyBatis入门"><a href="#MyBatis入门" class="headerlink" title="MyBatis入门"></a>MyBatis入门</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220402100111727.png" alt="image-20220402100111727"></p><h3 id="环境搭建："><a href="#环境搭建：" class="headerlink" title="环境搭建："></a>环境搭建：</h3><ol><li>将SQL文件导入数据库</li><li>创建maven工程，引入依赖</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisDemo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!--必须引入的依赖有两个--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mybatis--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--mysql驱动包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--log4j--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.创建mybatis核心配置文件SqlMapConfig.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  事务类型  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  数据源  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.将log4j.properties文件放入resources中，让控制台打印SQL语句</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Set root category priority to INFO and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.rootCategory=INFO, CONSOLE            debug   info   warn error fatal</span></span><br><span class="line"><span class="attr">log4j.rootCategory</span>=<span class="string">debug, CONSOLE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># Set the enterprise logger category to FATAL and its only appender to CONSOLE.</span></span><br><span class="line"><span class="comment">#log4j.logger.org.apache.axis.enterprise=FATAL, CONSOLE</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># CONSOLE is set to be a ConsoleAppender using a PatternLayout.</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">[%d&#123;MM/dd HH:mm:ss&#125;] %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure><p>5.创建实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(<span class="type">int</span> id, String username, String sex, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="创建持久层接口和映射文件"><a href="#创建持久层接口和映射文件" class="headerlink" title="创建持久层接口和映射文件"></a>创建持久层接口和映射文件</h2><ol><li><p>在java目录创建持久层接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>2.在resource目录创建映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.将映射文件配置到mybatis核心配置文件中</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  事务类型  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  数据源  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///mybatis&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  注册映射文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itbaizhan/mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="映射文件注意事项："><a href="#映射文件注意事项：" class="headerlink" title="映射文件注意事项："></a>映射文件注意事项：</h3><ul><li><p>映射文件要和接口名称相同。</p></li><li><p>映射文件要和接口的目录结构相同。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220402102933888.png" alt="image-20220402102933888"></p></li><li><p><strong>映射文件中namespace属性要写接口的全名。</strong></p></li><li><p>映射文件中标签的<strong>id属性是接口方法的方法名</strong>。</p></li><li><p>映射文件中标签的<strong>resultType属性是接口方法的返回值类型</strong>。</p></li><li><p>映射文件中标签的<strong>parameterType属性是接口方法的参数类型</strong>。</p></li><li><p>映射文件中resultType、parameterType属性要写全类名，如果是集合类型，则写其泛型的全类名。</p></li></ul><h2 id="测试持久层接口方法"><a href="#测试持久层接口方法" class="headerlink" title="测试持久层接口方法"></a>测试持久层接口方法</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220402201101710.png" alt="image-20220402201101710"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//(1)读取核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//(2)创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//(3)SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span>  <span class="operator">=</span> builder.build(is);</span><br><span class="line">        <span class="comment">//(4)SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sesison</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="comment">//(5)SqlSession对象获取代理对象</span></span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> sesison.getMapper(UserMapper.class);</span><br><span class="line">        <span class="comment">//(6)代理对象执行方法</span></span><br><span class="line">        List&lt;User&gt; all = mapper.findAll();</span><br><span class="line">        <span class="keyword">for</span> (User user : all) &#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//(7) 释放资源</span></span><br><span class="line">        sesison.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis核心对象以及工作流程"><a href="#MyBatis核心对象以及工作流程" class="headerlink" title="MyBatis核心对象以及工作流程"></a>MyBatis核心对象以及工作流程</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220402204856384.png" alt="image-20220402204856384"></p><h3 id="MyBatis核心对象"><a href="#MyBatis核心对象" class="headerlink" title="MyBatis核心对象"></a>MyBatis核心对象</h3><p><strong>SqlSessionFactoryBuilder</strong></p><p>SqlSession工厂构建者对象，使用构造者模式创建SqlSession工厂对象。</p><p><strong>SqlSessionFactory</strong></p><p>SqlSession工厂，使用工厂模式创建SqlSession对象。</p><p><strong>SqlSession</strong></p><p>该对象可以操作数据库，也可以使用动态代理模式创建持久层接口的代理对象操作数据库。</p><p><strong>Mapper</strong></p><p>持久层接口的代理对象，他具体实现了持久层接口，用来操作数据库</p><h3 id="MyBatis工作流程"><a href="#MyBatis工作流程" class="headerlink" title="MyBatis工作流程"></a>MyBatis工作流程</h3><ol><li>创建SqlSessionFactoryBuilder对象</li><li>SqlSessionFactoryBuilder对象构建了SqlSessionFactory对象：构造者模式</li><li>SqlSessionFactory对象生产了SqlSession对象：工厂模式</li><li>SqlSession对象创建了持久层接口的代理对象：动态代理模式</li><li>代理对象操作数据库</li></ol><h2 id="使用SqlSession操作数据库"><a href="#使用SqlSession操作数据库" class="headerlink" title="使用SqlSession操作数据库"></a>使用SqlSession操作数据库</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220402211818633.png" alt="image-20220402211818633"></p><p>除了代理对象能够操作数据库，SqlSession也能操作数据库。只是这种方式在开发中使用的较少，接下来我们使用SqlSession操作数据库：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//(1)读取核心配置文件</span></span><br><span class="line">       <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">       <span class="comment">//(2)创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">       <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">       <span class="comment">//(3)SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">       <span class="type">SqlSessionFactory</span> <span class="variable">factory</span>  <span class="operator">=</span> builder.build(is);</span><br><span class="line">       <span class="comment">//(4)SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">       <span class="type">SqlSession</span> <span class="variable">sesison</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">       <span class="comment">//SqlSession对象直接操纵数据库</span></span><br><span class="line">       <span class="comment">//持久层接口全类名+方法名</span></span><br><span class="line">       List&lt;Object&gt; users = sesison.selectList(<span class="string">&quot;com.itbaizhan.mapper.UserMapper.findAll&quot;</span>);</span><br><span class="line">       <span class="keyword">for</span> (Object user : users) &#123;</span><br><span class="line">           System.out.println(user.toString());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//(6)关闭资源</span></span><br><span class="line">       sesison.close();</span><br><span class="line">       is.close();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br></pre></td></tr></table></figure><h2 id="Mapper动态代理原理"><a href="#Mapper动态代理原理" class="headerlink" title="Mapper动态代理原理"></a>Mapper动态代理原理</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220402212625287.png" alt="image-20220402212625287"></p><p>接下来我们通过源码，了解MyBatis的Mapper对象究竟是怎么生成的，他又是如何代理接口的方法。</p><h3 id="获取代理对象"><a href="#获取代理对象" class="headerlink" title="获取代理对象"></a>获取代理对象</h3><p>点开测试类的<code>getMapper</code>方法，查看该方法最终调用了什么方法。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211019162901115.png" alt="image-20211019162901115"></p><p>当看到<code>Proxy.newProxyInstance</code>时，可以确定<code>getMapper</code>方法最终调用的是JDK动态代理方法，且使用MapperProxy类定义代理方式</p><h3 id="查看代理方式"><a href="#查看代理方式" class="headerlink" title="查看代理方式"></a>查看代理方式</h3><p>点开MapperProxy类，查看invoke方法，查看代理对象是如何工作的。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211019163829272.png" alt="image-20211019163829272"></p><p>可以看到，MapperProxy调用了MapperMethod的execute方法定义了代理方式，且底层调用的是SqlSession的方法，根据映射文件标签不同调用不同的SqlSession方法。</p><p>结论：</p><ul><li>SqlSession的getMapper方法，最终是调用的是<strong>JDK动态代理方法</strong>，生成一个代理对象，类型就是传入的接口类型。</li><li>MapperProxy对象通过调用MapperMethod的execute方法定义了代理方式，该方法的底层调用的是SqlSession的方法。</li></ul><h2 id="MyBatis新增"><a href="#MyBatis新增" class="headerlink" title="MyBatis新增"></a>MyBatis新增</h2><h3 id="新增用户"><a href="#新增用户" class="headerlink" title="新增用户"></a>新增用户</h3><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;))</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;程序员&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">    userMapper.add(user);</span><br><span class="line">    <span class="comment">//提交事务（增删改）在MyBatis中事务提交是默认关闭的</span></span><br><span class="line">    <span class="comment">//提交事务（增删改）再MyBatis中事务提交是默认关闭的</span></span><br><span class="line">    <span class="comment">//在MyBatis中，执行查询操作后不需要手动提交事务</span></span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">    is.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>1.当接口方法的参数类型为POJO类型时，SQL语句中绑定参数时使用#{POJO的属性名}即可</p><p>2.MyBatis事务默认手动提交，所以在执行完增删改方法后，需要手动调用SqlSession对象的事务提交方法，否则数据库将不发生改变。</p><h2 id="MyBatis修改"><a href="#MyBatis修改" class="headerlink" title="MyBatis修改"></a>MyBatis修改</h2><h3 id="优化测试类"><a href="#优化测试类" class="headerlink" title="优化测试类"></a>优化测试类</h3><p>我们发现MyBatis的测试方法在操作数据库前都需要获取代理对象，操作数据库后都需要释放资源，可以利用Junit的前置与后置方法，优化测试类代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserMapper2</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">         is = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//(2)创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//(3)SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span>  <span class="operator">=</span> builder.build(is);</span><br><span class="line">        <span class="comment">//(4)SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">         session = factory.openSession();</span><br><span class="line">        <span class="comment">//(5)SqlSession对象获取代理对象</span></span><br><span class="line">        userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        is.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="修改用户"><a href="#修改用户" class="headerlink" title="修改用户"></a>修改用户</h3><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">        </span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address=#&#123;address&#125; where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>,<span class="string">&quot;程序员1&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;深圳&quot;</span>);</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">    session.commit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis删除、根据ID查询"><a href="#MyBatis删除、根据ID查询" class="headerlink" title="MyBatis删除、根据ID查询"></a>MyBatis删除、根据ID查询</h2><p>删除用户</p><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：</p><p>当方法的参数类型是简单数据类型时，#{}中可以写任意名称</p><ul><li>简单数据类型：基本数据类型、字符串等</li></ul><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span></span><br><span class="line">   &#123;</span><br><span class="line">       userMapper.delete(<span class="number">7</span>);</span><br><span class="line">       session.commit();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="根据ID查询用户"><a href="#根据ID查询用户" class="headerlink" title="根据ID查询用户"></a>根据ID查询用户</h3><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;userid&#125;</span><br><span class="line">        select * from user where id = #&#123;userid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis模糊查询"><a href="#MyBatis模糊查询" class="headerlink" title="MyBatis模糊查询"></a>MyBatis模糊查询</h2><h3 id="使用-定义参数"><a href="#使用-定义参数" class="headerlink" title="使用#定义参数"></a>使用#定义参数</h3><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsernameLike</span><span class="params">(String username)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsernameLike</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;userid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsernameLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where username like #&#123;user&#125;</span><br><span class="line">        select * from user where username like #&#123;user&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByNameLike</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.findByUsernameLike(<span class="string">&quot;%尚学堂%&quot;</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.findByUsernameLike(<span class="string">&quot;%尚学堂%&quot;</span>)；</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看到在映射文件中，parameterType的值为string而没有写java.lang.String，这是为什么呢？</p><p>参数&#x2F;返回值类型为基本数据类型&#x2F;包装类&#x2F;String等类型时，我们可以写全类名，也可以写别名</p><table><thead><tr><th>数据类型</th><th>别名</th></tr></thead><tbody><tr><td>byte</td><td>_byte</td></tr><tr><td>long</td><td>_long</td></tr><tr><td>short</td><td>_short</td></tr><tr><td>int</td><td>_int</td></tr><tr><td>int</td><td>_integer</td></tr><tr><td>double</td><td>_double</td></tr><tr><td>float</td><td>_float</td></tr><tr><td>boolean</td><td>_boolean</td></tr><tr><td>String</td><td>string</td></tr><tr><td>Byte</td><td>byte</td></tr><tr><td>Long</td><td>long</td></tr><tr><td>Short</td><td>short</td></tr><tr><td>Integer</td><td>int&#x2F;integer</td></tr><tr><td>Double</td><td>double</td></tr><tr><td>Float</td><td>float</td></tr><tr><td>Boolean</td><td>boolean</td></tr><tr><td>Date</td><td>date</td></tr><tr><td>BigDecimal</td><td>decimal&#x2F;bigdecimal</td></tr><tr><td>Object</td><td>object</td></tr><tr><td>Map</td><td>map</td></tr><tr><td>HashMap</td><td>hashmap</td></tr><tr><td>List</td><td>list</td></tr><tr><td>ArrayList</td><td>arraylist</td></tr><tr><td>Collection</td><td>collection</td></tr><tr><td>Iterator</td><td>iterator</td></tr></tbody></table><h3 id="使用-定义参数-1"><a href="#使用-定义参数-1" class="headerlink" title="使用$定义参数"></a>使用$定义参数</h3><p>模糊查询如果不想在调用方法时参数加%，可以使用拼接参数的方式设置Sql：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsernameLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      select * from user where username like &#x27;%$&#123;value&#125;%&#x27;</span><br><span class="line">    select * from user where username like &#x27;%$&#123;value&#125;%&#x27; </span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法写法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByNameLike</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userMapper.findByUsernameLike(<span class="string">&quot;尚学堂&quot;</span>);</span><br><span class="line"></span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>#和$的区别：</p><ol><li>#表示sql模板的占位符，$表示将字符串拼接到sql模板中。</li><li>#可以防止sql注入，一般能用#就不用$。</li><li>#可以防止sql注入，一般能用#就不用$</li><li>${}内部的参数名必须写value。</li></ol><h3 id="使用定义参数"><a href="#使用定义参数" class="headerlink" title="使用定义参数"></a>使用<bind>定义参数</h3><p>如果使用<code>#</code>还不想在调用方法的参数中添加<code>%</code>，可以使用<code>&lt;bind&gt;</code>，<code>&lt;bind&gt;</code>允许我们在 Sql语句以外创建一个变量，并可以将其绑定到当前的Sql语句中。用法如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;userid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findByUsernameLike&quot; parameterType=&quot;string&quot; resultType=&quot;com.itbaizhan.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        select * from user where username like #&#123;user&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findByUsernameLike&quot; parameterType=&quot;string&quot; resultType=&quot;com.itbaizhan.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        select * from user where username like &#x27;%$&#123;value&#125;%&#x27;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsernameLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;likeName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+username+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;likeName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+username+&#x27;%&#x27;&quot;</span>&gt;</span></span><br><span class="line">        select * from user where username like #&#123;likeName&#125;</span><br><span class="line">        select * from user where username like #&#123;likeName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试方法写法如下;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByNameLike</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.findByUsernameLike(<span class="string">&quot;尚学堂&quot;</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis分页查询"><a href="#MyBatis分页查询" class="headerlink" title="MyBatis分页查询"></a>MyBatis分页查询</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220403110555397.png" alt="image-20220403110555397"></p><p>分页查询时，Sql语句使用limit关键字，需要传入开始索引和每页条数两个参数。MyBatis的多参数处理有以下方式：</p><h3 id="顺序传参："><a href="#顺序传参：" class="headerlink" title="顺序传参："></a>顺序传参：</h3><p>Sql中的参数使用arg0，arg1…或param1，param2…表示参数的顺序。此方法可读性较低，在开发中不建议使用。</p><p>1.持久层接口方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsernameLike</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex 开始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage</span><span class="params">(<span class="type">int</span> startIndex,<span class="type">int</span> pageSize)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage</span><span class="params">(<span class="type">int</span> startIndex,<span class="type">int</span> pageSize)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;arg0&#125;,#&#123;arg1&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;param1&#125;,#&#123;param2&#125;</span><br><span class="line">    selecy * from user limit #&#123;param1&#125;,#&#123;param2&#125;</span><br><span class="line"> <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3.测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindPage</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.findPage(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Param传参"><a href="#Param传参" class="headerlink" title="@Param传参"></a>@Param传参</h3><p>在接口方法的参数列表中通过@Param定义参数名称，在Sql语句中通过注解中所定义的参数名称指定参数位置。此方式参数比较直观的，推荐使用。</p><p>1.持久层接口方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsernameLike</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex 开始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage</span><span class="params">(<span class="type">int</span> startIndex,<span class="type">int</span> pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex 开始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage1</span><span class="params">(<span class="meta">@Param(&quot;startIndex&quot;)</span> <span class="type">int</span> startIndex, <span class="meta">@Param(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage1</span><span class="params">(<span class="meta">@Param(&quot;startIndex&quot;)</span> <span class="type">int</span> startIndex, <span class="meta">@Param(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">   select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">   select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindPage1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;User&gt; users = userMapper.findPage1(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MyBatis映射文件的Sql语句中表示接口方法的第一个参数可以写成：</p><p>#{arg0}或#{param1}</p><p>MyBatis接口方法的参数前使用，定义映射文件中Sql语句的参数名：</p><p>@Param</p><h3 id="POJO传参"><a href="#POJO传参" class="headerlink" title="POJO传参"></a>POJO传参</h3><p>自定义POJO类，该类的属性就是要传递的参数，在SQL语句中绑定参数时使用POJO的属性名作为参数名即可。此方式推荐使用。</p><p>1.自定义POJO类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageQuery</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> startIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getStartIndex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStartIndex</span><span class="params">(<span class="type">int</span> startIndex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getPageSize</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPageSize</span><span class="params">(<span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageQuery</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">PageQuery</span><span class="params">(<span class="type">int</span> startIndex, <span class="type">int</span> pageSize)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.startIndex = startIndex;</span><br><span class="line">        <span class="built_in">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.持久层接口方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.PageQuery;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsernameLike</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex 开始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage</span><span class="params">(<span class="type">int</span> startIndex,<span class="type">int</span> pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex 开始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage1</span><span class="params">(<span class="meta">@Param(&quot;startIndex&quot;)</span> <span class="type">int</span> startIndex, <span class="meta">@Param(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询2</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage2</span><span class="params">(PageQuery pageQuery)</span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.PageQuery&quot;</span>&gt;</span></span><br><span class="line">2</span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">3</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindPage2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">PageQuery</span> <span class="variable">pageQuery</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageQuery</span>(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.findPage2(pageQuery);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Map传参"><a href="#Map传参" class="headerlink" title="Map传参"></a>Map传参</h3><p>如果不想自定义POJO，可以使用Map作为传递参数的载体，在SQL语句中绑定参数时使用Map的Key作为参数名即可。此方法推荐使用。</p><p>1.持久层接口方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.PageQuery;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> userId)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsernameLike</span><span class="params">(String username)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex 开始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage</span><span class="params">(<span class="type">int</span> startIndex,<span class="type">int</span> pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询1</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> startIndex 开始索引</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage1</span><span class="params">(<span class="meta">@Param(&quot;startIndex&quot;)</span> <span class="type">int</span> startIndex, <span class="meta">@Param(&quot;pageSize&quot;)</span> <span class="type">int</span> pageSize)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询2</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage2</span><span class="params">(PageQuery pageQuery)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//分页查询3</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage3</span><span class="params">(Map&lt;String,Object&gt; params)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findPage3</span><span class="params">(Map&lt;String,Object&gt; params)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;userid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findByUsernameLike&quot; parameterType=&quot;string&quot; resultType=&quot;com.itbaizhan.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        select * from user where username like #&#123;user&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findByUsernameLike&quot; parameterType=&quot;string&quot; resultType=&quot;com.itbaizhan.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        select * from user where username like &#x27;%$&#123;value&#125;%&#x27;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsernameLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;likeName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+username+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">        select * from user where username like #&#123;likeName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findPage&quot; resultType=&quot;com.itbaizhan.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       select * from user limit #&#123;arg0&#125;,#&#123;arg1&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user limit #&#123;param1&#125;,#&#123;param2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.PageQuery&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage3&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindPage3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Map&lt;String,Object&gt; params = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    params.put(<span class="string">&quot;startIndex&quot;</span>,<span class="number">0</span>);</span><br><span class="line">    params.put(<span class="string">&quot;pageSize&quot;</span>,<span class="number">4</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.findPage3(params);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在MyBatis中，能作为参数载体的是：</p><p>Map</p><h2 id="MyBatis聚合查询、主键回填"><a href="#MyBatis聚合查询、主键回填" class="headerlink" title="MyBatis聚合查询、主键回填"></a>MyBatis聚合查询、主键回填</h2><h3 id="查询用户总数"><a href="#查询用户总数" class="headerlink" title="查询用户总数"></a>查询用户总数</h3><p>1.持久层方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询用户总数</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">findCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>2.映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    select count(id) from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindCount</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> userMapper.findCount();</span><br><span class="line">    System.out.println(count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="主键回填"><a href="#主键回填" class="headerlink" title="主键回填"></a>主键回填</h3><p>有时我们需要获取新插入数据的主键值。如果数据库中主键是自增的，这时我们就需要使用MyBatis的主键回填功能。</p><p>1.持久层接口方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主键回填功能(运用在主键自增的情况下)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add2</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><p>2.映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id对应的是接口中的方法名  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resultType对应的是接口方法的参数类型   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        insert into user (username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        update user set username = #&#123;username&#125;,sex = #&#123;sex&#125;,address=#&#123;address&#125;</span><br><span class="line">        where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        delete from user where id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where id = #&#123;userid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findByUsernameLike&quot; parameterType=&quot;string&quot; resultType=&quot;com.itbaizhan.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        select * from user where username like #&#123;user&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findByUsernameLike&quot; parameterType=&quot;string&quot; resultType=&quot;com.itbaizhan.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        select * from user where username like &#x27;%$&#123;value&#125;%&#x27;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsernameLike&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;likeName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+username+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">        select * from user where username like #&#123;likeName&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findPage&quot; resultType=&quot;com.itbaizhan.pojo.User&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--       select * from user limit #&#123;arg0&#125;,#&#123;arg1&#125;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user limit #&#123;param1&#125;,#&#123;param2&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage1&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.PageQuery&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage3&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">        select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select count(id) from user</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--keyProperty:主键属性名 keyColumn:主键列名 resultType：主键类型 order：执行--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">            SELECT LAST_INSERT_ID();</span><br><span class="line">           //SELECT LAST_INSERT_ID();</span><br><span class="line">       <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">        insert into user(username, sex, address)</span><br><span class="line">        VALUES (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line"> <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add2&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">keyColumn</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">order</span>=<span class="string">&quot;AFTER&quot;</span>&gt;</span></span><br><span class="line">          SELECT LAST_INSERT_ID();</span><br><span class="line">        <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span>  </span><br><span class="line">        insert into user(username,sex,address)</span><br><span class="line">        VALUES(#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SELECT LAST_INSERT_ID()：查询刚刚插入的记录的主键值，只适用于自增主键，且必须和insert语句一起执行。</p><p>3.测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;程序猿&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    userMapper.add2(user);</span><br><span class="line">    session.commit();</span><br><span class="line">    System.out.println(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis配置文件"><a href="#MyBatis配置文件" class="headerlink" title="MyBatis配置文件_"></a>MyBatis配置文件_<properties></h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220403231936003.png" alt="image-20220403231936003"></p><p>MyBatis配置文件结构：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-configuration</span><br><span class="line"></span><br><span class="line">    -properties（属性）</span><br><span class="line"></span><br><span class="line">        -property</span><br><span class="line"></span><br><span class="line">    -settings（全局配置参数）</span><br><span class="line"></span><br><span class="line">        -setting</span><br><span class="line"></span><br><span class="line">    -plugins（插件）</span><br><span class="line"></span><br><span class="line">        -plugin</span><br><span class="line"></span><br><span class="line">    -typeAliases（别名）</span><br><span class="line"></span><br><span class="line">        -typeAliase</span><br><span class="line"></span><br><span class="line">        -package</span><br><span class="line"></span><br><span class="line">    -environments（环境）</span><br><span class="line"></span><br><span class="line">        -environment</span><br><span class="line"></span><br><span class="line">            -transactionManager（事务管理）</span><br><span class="line">            -dataSource（数据源）</span><br><span class="line"></span><br><span class="line">    -mappers（映射器）</span><br><span class="line"></span><br><span class="line">        -mapper</span><br><span class="line"></span><br><span class="line">        -package</span><br></pre></td></tr></table></figure><h3 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h3><p>属性值定义。properties标签中可以定义属性值，也可以引入外部配置文件。无论是内部定义还是外部引入，都可以使用${name}获取值。</p><p>例如：我们可以将数据源配置写到外部的db.properties中，再使用properties标签引入外部配置文件，这样可以做到动态配置数据源。</p><p>1.编写db.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span> = <span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span> = <span class="string">jdbc:mysql:///mybatis</span></span><br><span class="line"><span class="attr">jdbc.username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span> = <span class="string">root</span></span><br></pre></td></tr></table></figure><p>2.在配置文件中引入db.properties</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过引入外部的配置文件可以动态修改配置，不需要修改核心配置文件，利用$&#123;name&#125;   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  事务类型  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  数据源  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  注册映射文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itbaizhan/mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然我们也可以将数据源数据通过<code>&lt;properties&gt;</code>配置到MyBatis配置文件内，但这样做没什么意义。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 通过引入外部的配置文件可以动态修改配置，不需要修改核心配置文件，利用$&#123;name&#125;   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可以有以下的写法，不过没有意义   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;properties&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql:///mybatis&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;username&quot; value=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;password&quot; value=&quot;root&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/properties&gt;--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  事务类型  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--  数据源  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  注册映射文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itbaizhan/mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在MyBatis配置文件中，<properties>引入外部文件的属性为：resource</p><h2 id="MyBatis配置文件-1"><a href="#MyBatis配置文件-1" class="headerlink" title="MyBatis配置文件_"></a>MyBatis配置文件_<settings></h2><p><code>&lt;settings&gt;</code>是配置MyBatis运行时的一些行为的，例如缓存、延迟加载、命名规则等一系列控制性参数。后期我们会使用该标签配置缓存和延迟加载等。</p><h2 id="MyBatis配置文件-2"><a href="#MyBatis配置文件-2" class="headerlink" title="MyBatis配置文件_"></a>MyBatis配置文件_<plugins></h2><p><code>&lt;plugins&gt;</code>是配置MyBatis插件的。插件可以增强MyBatis功能，比如进行sql增强，打印日志，异常处理等。后期我们会使用该标签配置分页插件。</p><h2 id="MyBatis配置文件-3"><a href="#MyBatis配置文件-3" class="headerlink" title="MyBatis配置文件_"></a>MyBatis配置文件_<typeAliases></h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220403233518087.png" alt="image-20220403233518087"></p><p>MyBatis对常用类有默认别名支持，比如java.lang.Stirng的别名为string。除此之外，我们也可以使用<code>&lt;typeAliases&gt;</code>设置自定义别名。</p><h3 id="为一个类配置别名"><a href="#为一个类配置别名" class="headerlink" title="为一个类配置别名"></a>为一个类配置别名</h3><p>1.配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;全类名&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;别名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type:全类名 alias：别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为该包下的所有类配置别名，别名省略包名，和类型相同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itbaizhan.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="为一个所有包下的所有类配置别名"><a href="#为一个所有包下的所有类配置别名" class="headerlink" title="为一个所有包下的所有类配置别名"></a>为一个所有包下的所有类配置别名</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;包名&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">package</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时该包下的所有类都有了别名，别名省略包名，和类名相同。如：</p><p>1.配置文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--type:全类名 alias：别名--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">alias</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">typeAlias</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--为该包下的所有类配置别名，别名省略包名，和类型相同--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itbaizhan.pojo&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.映射文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findPage2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;PageQuery&quot;</span>&gt;</span></span><br><span class="line">    select * from user limit #&#123;startIndex&#125;,#&#123;pageSize&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis配置文件-4"><a href="#MyBatis配置文件-4" class="headerlink" title="MyBatis配置文件_"></a>MyBatis配置文件_<environments></h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220403234207474.png" alt="image-20220403234207474"></p><p><code>&lt;environments&gt;</code>可以为MyBatis配置数据环境。</p><h3 id="事务管理"><a href="#事务管理" class="headerlink" title="事务管理"></a>事务管理</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- JDBC：使用JDBC的提交和回滚 MANAGED：不做事务处理（既不用提交事务）--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;mysql&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 连接池设置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 数据源设置... --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure><p>dataSource的type属性；</p><p>POOLED：使用连接池管理连接，使用MyBatis自带的连接池</p><p>UNPOOLED:不使用连接池，直接由JDBC连接</p><p>JNDI:由JAVAEE服务器管理连接，如果使用Tomcat作为服务器则使用Tomcat自带的连接池管理</p><h2 id="MyBatis配置文件-5"><a href="#MyBatis配置文件-5" class="headerlink" title="MyBatis配置文件_"></a>MyBatis配置文件_<mappers></h2><p><code>&lt;mappers&gt;</code>用于注册映射文件或持久层接口，只有注册的映射文件才能使用，共有四种方式都可以完成注册：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   相对路径注册映射文件     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/itbaizhan/mapper/UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   绝对路径注册映射文件      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">&quot;file:///E:\Eclipse_workspace1\MyBatisCase\mybatisDemo1\src\main\resources\com\itbaizhan\mapper\UserMapper.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册持久层接口   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.mapper.UserMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 注册一个包下的所有持久层接口   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itbaizhan.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis映射文件"><a href="#MyBatis映射文件" class="headerlink" title="MyBatis映射文件_"></a>MyBatis映射文件_<resultMap></h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220404134300155.png" alt="image-20220404134300155"></p><p>MyBatis映射文件中除了<code>&lt;insert&gt;</code>、<code>&lt;delete&gt;</code>、<code>&lt;update&gt;</code>、<code>&lt;select&gt;</code>外，还有一些标签可以使用：</p><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><p>标签的作用的自定义映射关系。</p><p>MyBatis可以将数据库结果集封装到对象中，是因为结果集的列名和对象属性名相同：</p><p>MyBaits可以将数据库结果集封装到对象中，是因为结果集的列名和对面属性名相同；</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211103144440901.png" alt="image-20211103144440901"></p><p>当POJO属性名和数据库列名不一致时，MyBatis无法自动完成映射关系。如：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211103144728224.png" alt="image-20211103144728224"></p><p>这个时候有两种解决方案：</p><p>1.Sql语句的查询字段起与POJO属性相同的别名。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">      select tid as id, tname as teacherName from teacher--&gt;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.自定义映射关系、</p><p>在映射文件中，使用<code>&lt;resultMap&gt;</code>自定义映射关系：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  id:自定义映射名 type:自定义映射的对象类型  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   id定义主键列  property:POJO属性名 column:数据库列名   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   result定义普通列  property:POJO属性名 column:数据库列名   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span> =<span class="string">&quot;teacherMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<select>标签中，使用resultMap属性代替resultType属性，使用自定义映射关系</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;select id=&quot;findAll&quot; resultType=&quot;com.itbaizhan.pojo.Teacher&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      select tid as id, tname as teacherName from teacher--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  id:自定义映射名 type:自定义映射的对象类型  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   id定义主键列  property:POJO属性名 column:数据库列名   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   result定义普通列  property:POJO属性名 column:数据库列名   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;teacherName&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &lt;select id=&quot;findAll&quot; resultType=&quot;com.itbaizhan.pojo.Teacher&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--      select * from teacher--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  &lt;/select&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMapper&quot;</span>&gt;</span></span><br><span class="line">      select * from teacher</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis映射文件-1"><a href="#MyBatis映射文件-1" class="headerlink" title="MyBatis映射文件_"></a>MyBatis映射文件_<sql><include></h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220404155100744.png" alt="image-20220404155100744"></p><p><sql> 用来定义可重用的Sql片段，通过 <include> 引入该片段。如：Sql语句的查询字段起与POJO属性相同的别名，该Sql片段就可以重用</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">//id是随便起的 </span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectAllField&quot;</span>&gt;</span></span><br><span class="line">       select tid as id, tname as teacherName</span><br><span class="line">  <span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectAllField&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>&gt;</span><br><span class="line">    from teacher</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectAllField&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span>&gt;</span><br><span class="line">      from teacher where tid = #&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis映射文件-特殊字符处理"><a href="#MyBatis映射文件-特殊字符处理" class="headerlink" title="MyBatis映射文件_特殊字符处理"></a>MyBatis映射文件_特殊字符处理</h2><p>在Mybatis映射文件中尽量不要使用一些特殊字符，如：<code>&lt;</code>，<code>&gt;</code>等。</p><p>我们可以使用符号的实体来表示：（点击实体即可查看）</p><table><thead><tr><th>符号</th><th>实体</th></tr></thead><tbody><tr><td>&lt;</td><td>&lt;</td></tr><tr><td>&gt;</td><td>&gt;</td></tr><tr><td>&amp;</td><td>&amp;</td></tr><tr><td>‘</td><td>&amp;apos;</td></tr><tr><td>“</td><td>&quot;</td></tr></tbody></table><p>例子：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findById2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectAllField&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">    from teacher where tid <span class="symbol">&amp;gt;</span> #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;Teacher&gt; byId2 = teacherMapper.findById2(<span class="number">2</span>);</span><br><span class="line">    byId2.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL_"></a>动态SQL_<if></h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211103160027828.png" alt="image-20211103160027828"></p><p>一个查询的方法的Sql语句不一定是固定的。比如电商网站的查询商品，用户使用不同条件查询，Sql语句就会添加不同的查询条件。此时就需要在方法中使用动态Sql语句。</p><h3 id=""><a href="#" class="headerlink" title=""></a><if></h3><p><code>&lt;if&gt;</code>标签内的Sql片段在满足条件后才会添加，用法为：<code>&lt;if test=&quot;条件&quot;&gt;</code>。例如：根据不同条件查询用户：</p><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper2</span> &#123;</span><br><span class="line">    <span class="comment">//用户通过查询</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByCondition</span><span class="params">(User user)</span>;</span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByCondition</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">        select * from user where 1 = 1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username.length()!=0 &quot;</span> &gt;</span></span><br><span class="line">        and username like #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex.length()!=0 &quot;</span> &gt;</span></span><br><span class="line">            and sex like = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address.length()!=0 &quot;</span> &gt;</span></span><br><span class="line">            and address = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">       select * from user where 1 = 1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username.length()!=0 &quot;</span>&gt;</span></span><br><span class="line">        and username like #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex.length()!=0 &quot;</span>&gt;</span></span><br><span class="line">        and sex like = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">text</span>=<span class="string">&quot;address != null and address.length()!=0&quot;</span>&gt;</span></span><br><span class="line">        and address = #&#123;address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.UserMapper2;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.PageQuery;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserMapper3</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">UserMapper2</span> <span class="variable">userMapper2</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="meta">@Before</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            is = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">            <span class="comment">//(2)创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="comment">//(3)SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span>  <span class="operator">=</span> builder.build(is);</span><br><span class="line">            <span class="comment">//(4)SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">            session = factory.openSession();</span><br><span class="line">            <span class="comment">//(5)SqlSession对象获取代理对象</span></span><br><span class="line">            userMapper2 = session.getMapper(UserMapper2.class);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@After</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            <span class="comment">//释放资源</span></span><br><span class="line">            session.close();</span><br><span class="line">            is.close();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testfindByCondition</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">            List&lt;User&gt; users = userMapper2.findByCondition(user);</span><br><span class="line"><span class="comment">//            users.forEach(System.out::println);</span></span><br><span class="line"></span><br><span class="line">            user.setUsername(<span class="string">&quot;%尚学堂%&quot;</span>);</span><br><span class="line">            List&lt;User&gt; users1 = userMapper2.findByCondition(user);</span><br><span class="line">            users1.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">            user.setAddress(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">            List&lt;User&gt; users2 = userMapper2.findByCondition(user);</span><br><span class="line">            users2.forEach(System.out::println);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>if中的条件不能使用&amp;&amp;&#x2F;||，而应该使用and&#x2F;or</p></li><li><p>if中的条件可以直接通过属性名获取参数POJO的属性值，并且该值可以调用方法。</p></li><li><p>where后为什么要加1&#x3D;1？</p><p>任意条件都可能拼接到Sql中。如果有多个条件，从第二个条件开始前都需要加And关键字<strong>。加上1&#x3D;1这个永久成立的条件，就不需要考虑后面的条件哪个是第一个条件，后面的条件前都加And关键字即可。（where 1&#x3D;1 是为了避免where 关键字后面的第一个词直接就是 “and”而导致语法错误。)</strong></p></li></ol><h2 id="动态SQL-1"><a href="#动态SQL-1" class="headerlink" title="动态SQL_"></a>动态SQL_<where></h2><p><code>&lt;where&gt;</code>可以代替sql中的where 1&#x3D;1 和第一个and，更符合程序员的开发习惯，使用<code>&lt;where&gt;</code>后的映射文件如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username.length()!=0 &quot;</span> &gt;</span></span><br><span class="line">        and username like #&#123;username&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex.length()!=0 &quot;</span> &gt;</span></span><br><span class="line">        and sex like = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address.length()!=0 &quot;</span> &gt;</span></span><br><span class="line">        and address = #&#123;sex&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态SQL-2"><a href="#动态SQL-2" class="headerlink" title="动态SQL_"></a>动态SQL_<set></h2><p><code>&lt;set&gt;</code>标签用在update语句中。借助<code>&lt;if&gt;</code>，可以只对有具体值的字段进行更新。<code>&lt;set&gt;</code>会自动添加set关键字，并去掉最后一个if语句中多余的逗号。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    update user</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username.length != 0&quot;</span>&gt;</span></span><br><span class="line">            username = #&#123;username&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;sex != null and sex.length != 0&quot;</span>&gt;</span></span><br><span class="line">            sex = #&#123;sex&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;address != null and address.length != 0&quot;</span>&gt;</span></span><br><span class="line">            address = #&#123;address&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        id = #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="动态SQL-3"><a href="#动态SQL-3" class="headerlink" title="动态SQL_"></a>动态SQL_<choose><when><otherwise></h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220404170153333.png" alt="image-20220404170153333"></p><p>这些标签表示多条件分支，类似JAVA中的<code>switch...case</code>。<code>&lt;choose&gt;</code>类似<code>switch</code>，<code>&lt;when&gt;</code>类似<code>case</code>，<code>&lt;otherwise&gt;</code>类似<code>default</code>，用法如下：</p><p>1.持久层方法编写</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户名查询用户</span></span><br><span class="line"><span class="comment"> * 参数长度小于5：模糊查询</span></span><br><span class="line"><span class="comment"> * 参数长度5~10：精确查询</span></span><br><span class="line"><span class="comment"> * 否则：返回id为1的用户</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String name)</span>;</span><br></pre></td></tr></table></figure><p>2.映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByUsername&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;username.length() <span class="symbol">&amp;lt;</span> 5&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bind</span> <span class="attr">name</span>=<span class="string">&quot;likename&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&#x27;%&#x27;+username+&#x27;%&#x27;&quot;</span>/&gt;</span></span><br><span class="line">                username like #&#123;likename&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;username.length() <span class="symbol">&amp;lt;</span> 10&quot;</span>&gt;</span></span><br><span class="line">               username = #&#123;username&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span></span><br><span class="line">                id = 1</span><br><span class="line">            <span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByUsername</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;User&gt; users = userMapper2.findByUsername(<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码的含义为：用户名&lt;5时使用模糊查询，用户名&gt;&#x3D;5并且&lt;10时使用精确查询，否则查询id为1的用户</p><h2 id="动态SQL-4"><a href="#动态SQL-4" class="headerlink" title="动态SQL_"></a>动态SQL_<foreach></h2><p><code>&lt;foreach&gt;</code>类似JAVA中的for循环，可以遍历集合或数组。<code>&lt;foreach&gt;</code>有如下属性：</p><ul><li><p>collection：遍历的对象类型</p></li><li><p>open：开始的sql语句</p></li><li><p>close：结束的sql语句</p></li><li><p>separator：遍历每项间的分隔符</p></li><li><p>item：表示本次遍历获取的元素，遍历List、Set、数组时表示每项元素，遍历map时表示键值对的值。</p></li><li><p>index：遍历List、数组时表示遍历的索引，遍历map时表示键值对的键。</p></li></ul><h3 id="遍历数组"><a href="#遍历数组" class="headerlink" title="遍历数组"></a>遍历数组</h3><p>我们使用<code>&lt;foreach&gt;</code>遍历数组进行批量删除。</p><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量删除 delete from user in(1,2,3)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(<span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">    delete from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">open</span>=<span class="string">&quot;id in (&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">            #&#123;id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteBatch</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span>[] ids = &#123;<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        userMapper2.deleteBatch(ids);</span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="遍历Collection"><a href="#遍历Collection" class="headerlink" title="遍历Collection"></a>遍历Collection</h2><p><code>&lt;foreach&gt;</code>遍历List和Set的方法是一样的，我们使用<code>&lt;foreach&gt;</code>遍历List进行批量添加。</p><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//批量新增 insert into user(username,sex,address) values(),(),();</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;User&gt; users)</span>;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    insert into user values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">        (null,#&#123;user.username&#125;,#&#123;user.sex&#125;,#&#123;user.address&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsertBatch</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;程序员1&quot;</span>,<span class="string">&quot;男&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;程序员2&quot;</span>,<span class="string">&quot;女&quot;</span>,<span class="string">&quot;肇庆&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        users.add(user1);</span><br><span class="line">        users.add(user2);</span><br><span class="line">        userMapper2.insertBatch(users);</span><br><span class="line">        session.commit();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="遍历Map"><a href="#遍历Map" class="headerlink" title="遍历Map"></a>遍历Map</h2><p>我们使用<code>&lt;foreach&gt;</code>遍历Map进行多条件查询。</p><p>1.持久层接口添加方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *多条件查询</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> map 查询的条件键值对 键：属性名 值：属性值</span></span><br><span class="line"><span class="comment"> *  select * from user where username = ？ and sex = ？</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findUser</span><span class="params">(<span class="meta">@Param(&quot;queryMap&quot;)</span> Map&lt;String,Object&gt; map)</span>;</span><br></pre></td></tr></table></figure><p>2.映射文件添加标签</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.User&quot;</span>&gt;</span></span><br><span class="line">    select * from user</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;queryMap&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;and&quot;</span> <span class="attr">index</span>=<span class="string">&quot;key&quot;</span> <span class="attr">item</span>=<span class="string">&quot;value&quot;</span>&gt;</span></span><br><span class="line">            $&#123;key&#125; = #&#123;value&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindUser</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Map&lt;String,Object&gt; queryMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        queryMap.put(<span class="string">&quot;sex&quot;</span>,<span class="string">&quot;男&quot;</span>);</span><br><span class="line">        queryMap.put(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">        List&lt;User&gt; users = userMapper2.findUser(queryMap);</span><br><span class="line">        <span class="keyword">for</span> (User user : users) &#123;</span><br><span class="line">            System.out.println(user.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="缓存介绍"><a href="#缓存介绍" class="headerlink" title="缓存介绍"></a>缓存介绍</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220404230401766.png" alt="image-20220404230401766"></p><p>缓存是内存当中一块存储数据的区域，目的是提高<strong>查询</strong>效率。MyBatis会将查询结果存储在缓存当中，当下次执行<strong>相同</strong>的SQL时不访问数据库，而是直接从缓存中获取结果，从而减少服务器的压力。</p><ul><li><p>什么是缓存？</p><blockquote><p>存在于内存中的一块数据。</p></blockquote></li><li><p>缓存有什么作用？</p><blockquote><p>减少程序和数据库的交互，提高查询效率，降低服务器和数据库的压力。</p></blockquote></li><li><p>什么样的数据使用缓存？</p><blockquote><p>经常查询但不常改变的，改变后对结果影响不大的数据。</p></blockquote></li><li><p>MyBatis缓存分为哪几类？</p><blockquote><p>一级缓存和二级缓存</p></blockquote></li><li><p>如何判断两次Sql是相同的？</p><blockquote><ol><li>查询的Sql语句相同</li><li>传递的参数值相同</li><li>对结果集的要求相同</li><li>预编译的模板Id相同</li></ol></blockquote></li></ul><h2 id="MyBatis缓存-MyBaits一级缓存"><a href="#MyBatis缓存-MyBaits一级缓存" class="headerlink" title="MyBatis缓存_MyBaits一级缓存"></a>MyBatis缓存_MyBaits一级缓存</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220404231739216.png" alt="image-20220404231739216"></p><ul><li>MyBatis一级缓存也叫<strong>本地缓存</strong>。SqlSession对象中包含一个Executor对象，Executor对象中包含一个PerpetualCache对象，在该对象存放一级缓存数据。</li><li>由于一级缓存是在SqlSession对象中，所以只有使用同一个SqlSession对象操作数据库时才能共享一级缓存。</li><li>MyBatis的一级缓存是默认开启的，不需要任何的配置。</li></ul><h3 id="测试一级缓存"><a href="#测试一级缓存" class="headerlink" title="测试一级缓存"></a>测试一级缓存</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserMapper4</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache1</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//(1)读取核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//(2)创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//(3)SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span>  <span class="operator">=</span> builder.build(is);</span><br><span class="line">        <span class="comment">//(4)SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">        <span class="comment">//同一个SqlSession查询</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sesison</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sesison.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sesison.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper1.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user1.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache2</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//(1)读取核心配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//(2)创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">//(3)SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span>  <span class="operator">=</span> builder.build(is);</span><br><span class="line">        <span class="comment">//(4)SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">        <span class="comment">//不同的SqlSession查询</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sesison1</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">sesison2</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sesison1.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sesison2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper1.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user1.hashCode());</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user2.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis缓存-清除一级缓存"><a href="#MyBatis缓存-清除一级缓存" class="headerlink" title="MyBatis缓存_清除一级缓存"></a>MyBatis缓存_清除一级缓存</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220404233731479.png" alt="image-20220404233731479"></p><p>进行以下操作可以清空MyBatis一级缓存：</p><ol><li><code>SqlSession</code>调用<code>close()</code>：操作后SqlSession对象不可用，该对象的缓存数据也不可用。</li><li><code>SqlSession</code>调用<code>clearCache()</code>&#x2F;<code>commit()</code>：操作会清空一级缓存数据。</li><li><code>SqlSession</code>调用增删改方法：操作会清空一级缓存数据，因为增删改后数据库发生改变，缓存数据将不准确。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache3</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//(1)读取核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//(2)创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="comment">//(3)SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">factory</span>  <span class="operator">=</span> builder.build(is);</span><br><span class="line">    <span class="comment">//(4)SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">    <span class="comment">//同一个SqlSession查询</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper1.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1.hashCode());</span><br><span class="line">    <span class="comment">//   session.close();</span></span><br><span class="line">       session.clearCache();</span><br><span class="line">    <span class="comment">//   session.commit();</span></span><br><span class="line">    <span class="comment">//   mapper1.delete(2);</span></span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBaits二级缓存"><a href="#MyBaits二级缓存" class="headerlink" title="MyBaits二级缓存"></a>MyBaits二级缓存</h2><ul><li><p>MyBatis二级缓存也叫全局缓存。数据存放在SqlSessionFactory中，<strong>只要是同一个工厂对象创建的SqlSession，在进行查询时都能共享数据。</strong>一般在项目中只有一个SqlSessionFactory对象，所以二级缓存的数据是全项目共享的。</p></li><li><p>MyBatis一级缓存存放的是对象，二级缓存存放的是对象的数据。所以要求二级缓存存放的POJO必须是可序列化的，也就是要实现Serializable接口。</p></li><li><p>MyBatis二级缓存默认不开启，手动开启后数据先存放在一级缓存中，只有一级缓存数据清空后，数据才会存到二级缓存中。</p><p><code>SqlSession</code>调用<code>clearCache()</code>无法将数据存到二级缓存中</p></li></ul><h3 id="一级缓存存放的是对象，二级缓存存放的是对象的数据"><a href="#一级缓存存放的是对象，二级缓存存放的是对象的数据" class="headerlink" title="一级缓存存放的是对象，二级缓存存放的是对象的数据"></a>一级缓存存放的是对象，二级缓存存放的是对象的数据</h3><h3 id="开启二级缓存"><a href="#开启二级缓存" class="headerlink" title="开启二级缓存"></a>开启二级缓存</h3><p>1.POJO类实现Serializable接口。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在MyBatis核心配置文件添加如下设置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>由于cacheEnabled默认值是true，所以该设置可以省略。</p><p>3.在映射文件添加<code>&lt;cache /&gt;</code>标签，该映射文件下的所有方法都支持二级缓存。</p><p>如果查询到的集合中对象过多，二级缓存只能缓存1024个对象引用。可以通过<code>&lt;cache /&gt;</code>标签的size属性修改该数量。</p><cache size="2048"/><p>4.测试二级缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache4</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//(1)读取核心配置文件</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//(2)创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">    <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">    <span class="comment">//(3)SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">factory</span>  <span class="operator">=</span> builder.build(is);</span><br><span class="line">    <span class="comment">//(4)SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">    <span class="comment">//不同的SqlSession查询</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sesison1</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sesison2</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper1</span> <span class="operator">=</span> sesison1.getMapper(UserMapper.class);</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">mapper2</span> <span class="operator">=</span> sesison2.getMapper(UserMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> mapper1.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user1);</span><br><span class="line">    System.out.println(user1.hashCode());</span><br><span class="line">    <span class="comment">//让一级缓存失效</span></span><br><span class="line">    sesison1.commit();</span><br><span class="line">    System.out.println(<span class="string">&quot;----------------------------&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> mapper2.findById(<span class="number">1</span>);</span><br><span class="line">    System.out.println(user2);</span><br><span class="line">    System.out.println(user2.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis关联查询"><a href="#MyBatis关联查询" class="headerlink" title="MyBatis关联查询"></a>MyBatis关联查询</h2><p>MyBatis的关联查询分为一对一关联查询和一对多关联查询</p><p>查询对象时，将关联的另一个对象查询出来，就是一对一关联查询。</p><p>查询对象时，将关联的另一个对象的集合查询出来，就是一对多关联查询</p><p>例如有学生类和班级类：</p><p>一个学生对应一个班级，也就是学生类中有一个班级属性，这就是一对一关系。</p><p>一个班级对应多个学生，也就是班级类中有一个学生集合属性，这就是一对多关系。</p><p>实体类设计如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Classes classes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getSid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSid</span><span class="params">(<span class="type">int</span> sid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sid = sid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;sid=&quot;</span> + sid +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, classes=&quot;</span> + classes +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Classes <span class="title function_">getClasses</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClasses</span><span class="params">(Classes classes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classes = classes;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Classes</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassName</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudentList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentList</span><span class="params">(List&lt;Student&gt; studentList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentList = studentList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220405171904377.png" alt="image-20220405171904377"></p><h2 id="MyBatis一对一关联查询"><a href="#MyBatis一对一关联查询" class="headerlink" title="MyBatis一对一关联查询"></a>MyBatis一对一关联查询</h2><p>查询学生时，将关联的一个班级对象查询出来，就是一对一关联查询</p><h3 id="创建持久层接口"><a href="#创建持久层接口" class="headerlink" title="创建持久层接口"></a>创建持久层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建映射文件"><a href="#创建映射文件" class="headerlink" title="创建映射文件"></a>创建映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.StudentMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主键列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 普通列 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 一对一对象列 property:属性名  column:关联列名 javaType：对象类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;classes&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 关联对象主键列 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 关联对象普通列 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;className&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;classes&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span> = <span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;className&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from student left join classes on student.classId = classes.cid;</span><br><span class="line">        select * from student left join classes on student.classId = classes.cid;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置文件注册映射文件"><a href="#配置文件注册映射文件" class="headerlink" title="配置文件注册映射文件"></a>配置文件注册映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itbaizhan.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试一对一关联查询"><a href="#测试一对一关联查询" class="headerlink" title="测试一对一关联查询"></a>测试一对一关联查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestManyTableQuery</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// （1）读取核心配置文件</span></span><br><span class="line">        is = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="comment">// （2）创建SqlSessionFactoryBuilder对象</span></span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="comment">// （3）SqlSessionFactoryBuilder对象获取SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> builder.build(is);</span><br><span class="line">        <span class="comment">// （4）SqlSessionFactory对象获取SqlSession对象</span></span><br><span class="line">        session = factory.openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 释放资源</span></span><br><span class="line">        session.close();</span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAllStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">StudentMapper</span> <span class="variable">studentMapper</span> <span class="operator">=</span> session.getMapper(StudentMapper.class);</span><br><span class="line">        List&lt;Student&gt; all = studentMapper.findAll();</span><br><span class="line">        all.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis一对多查询"><a href="#MyBatis一对多查询" class="headerlink" title="MyBatis一对多查询"></a>MyBatis一对多查询</h2><p>查询班级时，将关联的学生集合查询出来，就是一对多关联查询。</p><h3 id="创建持久层接口-1"><a href="#创建持久层接口-1" class="headerlink" title="创建持久层接口"></a>创建持久层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassesMapper</span> &#123;</span><br><span class="line">    List&lt;Classes&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建映射文件-1"><a href="#创建映射文件-1" class="headerlink" title="创建映射文件"></a>创建映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.ClassesMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;classesMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;className&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 集合列  property：属性名  column：关联列名 ofType：集合的泛型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多表查询，级联查询班级和它的学生  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;classesMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from classes left join student on classes.cid = student.classId;</span><br><span class="line">        select * from classes left join student on classes.cid = student.classId;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试一对多关联查询"><a href="#测试一对多关联查询" class="headerlink" title="测试一对多关联查询"></a>测试一对多关联查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAllClasses</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ClassesMapper</span> <span class="variable">classesMapper</span> <span class="operator">=</span> session.getMapper(ClassesMapper.class);</span><br><span class="line">    List&lt;Classes&gt; all = classesMapper.findAll();</span><br><span class="line">    <span class="keyword">for</span> (Classes classes : all) &#123;</span><br><span class="line">        System.out.println(classes.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mybatis映射文件表示关联集合列的标签是<collection></p><h2 id="MyBatis多对多关联查询"><a href="#MyBatis多对多关联查询" class="headerlink" title="MyBatis多对多关联查询"></a>MyBatis多对多关联查询</h2><p>MyBatis多对多关联查询本质就是两个一对多关联查询。</p><p>例如有老师类和班级类：</p><p>一个老师对应多个班级，也就是老师类中有一个班级集合属性。</p><p>一个班级对应多个老师，也就是班级类中有一个老师集合属性。</p><p>实体类设计如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Classes</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer cid;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; studentList;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Teacher&gt; teacherList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCid</span><span class="params">(Integer cid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cid = cid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassName</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudentList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentList</span><span class="params">(List&lt;Student&gt; studentList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentList = studentList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Teacher&gt; <span class="title function_">getTeacherList</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> teacherList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTeacherList</span><span class="params">(List&lt;Teacher&gt; teacherList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.teacherList = teacherList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Classes&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cid=&quot;</span> + cid +</span><br><span class="line">                <span class="string">&quot;, className=&#x27;&quot;</span> + className + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, studentList=&quot;</span> + studentList +</span><br><span class="line">                <span class="string">&quot;, teacherList=&quot;</span> + teacherList +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tid;</span><br><span class="line">    <span class="keyword">private</span> String tname;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Classes&gt; classes;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getTid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTid</span><span class="params">(Integer tid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tid = tid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTname</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTname</span><span class="params">(String tname)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tname = tname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Classes&gt; <span class="title function_">getClasses</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClasses</span><span class="params">(List&lt;Classes&gt; classes)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.classes = classes;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Teacher&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;tid=&quot;</span> + tid +</span><br><span class="line">                <span class="string">&quot;, tname=&#x27;&quot;</span> + tname + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, classes=&quot;</span> + classes +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在数据库设计中，需要建立中间表，双方与中间表均为一对多关系。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211026152034008.png" alt="image-20211026152034008"></p><p>接下来测试查询老师时，将关联的班级集合查询出来</p><h3 id="创建持久层接口-2"><a href="#创建持久层接口-2" class="headerlink" title="创建持久层接口"></a>创建持久层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line">List&lt;Teacher&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建映射文件-2"><a href="#创建映射文件-2" class="headerlink" title="创建映射文件"></a>创建映射文件</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--命名空间--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.TeacherMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;classes&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;className&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;teacherMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from teacher left join classes_teacher on teacher.tid = classes_teacher.tid</span><br><span class="line">        left join classes on classes_teacher.cid = classes.cid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试多对多关联查询"><a href="#测试多对多关联查询" class="headerlink" title="测试多对多关联查询"></a>测试多对多关联查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAllTeacher</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">TeacherMapper</span> <span class="variable">teacherMapper</span> <span class="operator">=</span> session.getMapper(TeacherMapper.class);</span><br><span class="line">    List&lt;Teacher&gt; all = teacherMapper.findAll();</span><br><span class="line">    all.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果想查询班级时，将关联的老师集合查询出来，只需要修改班级映射文件的Sql语句和<code>&lt;resultMap&gt;</code>即可：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper.ClassesMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;classesMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;className&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 集合列  property：属性名  column：关联列名 ofType：集合的泛型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classId&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;teacherList&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itbaizhan.pojo.Teacher&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;tname&quot;</span> <span class="attr">column</span>=<span class="string">&quot;tname&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 多表查询，级联查询班级和它的学生  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;classesMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from classes left join student on classes.cid = student.classId</span><br><span class="line">        left join classes_teacher on classes.cid = classes_teacher.cid left join</span><br><span class="line">        teacher on classes_teacher.tid = teacher.tid</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>关于MyBatis多对多关系，以下说法正确的是：</p><p>两方实体类中都有另一方实体类的集合属性</p><h2 id="MyBatis分解式查询-一对多"><a href="#MyBatis分解式查询-一对多" class="headerlink" title="MyBatis分解式查询_一对多"></a>MyBatis分解式查询_一对多</h2><p>在MyBatis多表查询中，使用连接查询时一个Sql语句就可以查询出所有的数据。如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询班级时关联查询出学生</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span></span><br><span class="line">    <span class="keyword">from</span> classes</span><br><span class="line">    <span class="keyword">left</span> <span class="keyword">join</span> student</span><br><span class="line">    <span class="keyword">on</span> student.classId <span class="operator">=</span> classes.cid</span><br></pre></td></tr></table></figure><p>也可以使用分解式查询，即将一个连接Sql语句分解为多条Sql语句，如：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 查询班级时关联查询出学生</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> classes;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> classId <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student <span class="keyword">where</span> classId <span class="operator">=</span> <span class="number">2</span>;  </span><br></pre></td></tr></table></figure><p>这种写法也叫N+1查询。</p><p>连接查询：</p><ul><li>优点：降低查询次数，从而提高查询效率。</li><li>缺点：如果查询返回的结果集较多会消耗内存空间。</li></ul><p>N+1查询：</p><ul><li>优点：结果集分步获取，节省内存空间。</li><li>缺点：由于需要执行多次查询，相比连接查询效率低。</li></ul><p>我们以查询班级时关联查询出学生为例，使用N+1查询：</p><h3 id="创建每个查询语句的持久层方法"><a href="#创建每个查询语句的持久层方法" class="headerlink" title="创建每个查询语句的持久层方法"></a>创建每个查询语句的持久层方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassesMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有班级</span></span><br><span class="line">    List&lt;Classes&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 根据班级Id查询学生</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findByClassId</span><span class="params">(<span class="type">int</span> classId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在映射文件中进行配置"><a href="#在映射文件中进行配置" class="headerlink" title="在映射文件中进行配置"></a>在映射文件中进行配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper2.StudentMapper2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByClassId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from student where classId = $&#123;classId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper2.ClassesMapper2&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义映射关系   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyClassesMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;className&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- select：从表查询调用的方法  column：调用方法时传入的参数字段    --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.itbaizhan.mapper2.StudentMapper2.findByClassId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyClassesMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from classes</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试查询方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAllClasses2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ClassesMapper2</span> <span class="variable">classesMapper2</span> <span class="operator">=</span> session.getMapper(ClassesMapper2.class);</span><br><span class="line">    List&lt;Classes&gt; all = classesMapper2.findAll();</span><br><span class="line">    all.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis分解式查询-一对一"><a href="#MyBatis分解式查询-一对一" class="headerlink" title="MyBatis分解式查询_一对一"></a>MyBatis分解式查询_一对一</h2><p>查询学生时关联查询出班级也可以使用分解式查询，首先将查询语句分开：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> student;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> classes <span class="keyword">where</span> cid <span class="operator">=</span> ?;</span><br></pre></td></tr></table></figure><h3 id="创建每个查询语句的持久层方法-1"><a href="#创建每个查询语句的持久层方法-1" class="headerlink" title="创建每个查询语句的持久层方法"></a>创建每个查询语句的持久层方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">     <span class="comment">// 查询所有学生</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassesMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 根据ID查询班级</span></span><br><span class="line">    Classes <span class="title function_">findByCid</span><span class="params">(<span class="type">int</span> cid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="在映射文件中进行配置-1"><a href="#在映射文件中进行配置-1" class="headerlink" title="在映射文件中进行配置"></a>在映射文件中进行配置</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper2.ClassesMapper2&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 自定义映射关系   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyClassesMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;cid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;className&quot;</span> <span class="attr">column</span>=<span class="string">&quot;className&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- select：从表查询调用的方法  column：调用方法时传入的参数字段    --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">select</span>=<span class="string">&quot;com.itbaizhan.mapper2.StudentMapper2.findByClassId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyClassesMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from classes</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from classes where cid = $&#123;cid&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itbaizhan.mapper2.StudentMapper2&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByClassId&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">        select * from student where classId = $&#123;classId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修改主表映射文件中的查询方法  --&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;MyStudentMapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;name&quot;</span> <span class="attr">column</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;classes&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;com.itbaizhan.pojo.Classes&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">select</span>=<span class="string">&quot;com.itbaizhan.mapper2.ClassesMapper2.findByCid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;classId&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;MyStudentMapper&quot;</span>&gt;</span></span><br><span class="line">        select * from student</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试查询方法"><a href="#测试查询方法" class="headerlink" title="测试查询方法"></a>测试查询方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAllStudent2</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">StudentMapper2</span> <span class="variable">studentMapper2</span> <span class="operator">=</span> session.getMapper(StudentMapper2.class);</span><br><span class="line">       List&lt;Student&gt; all = studentMapper2.findAll();</span><br><span class="line">       all.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis延迟加载"><a href="#MyBatis延迟加载" class="headerlink" title="MyBatis延迟加载"></a>MyBatis延迟加载</h2><p>分解式查询又分为两种加载方式：</p><ul><li>立即加载：在查询主表时就执行所有的Sql语句。</li><li>延迟加载：又叫懒加载，首先执行主表的查询语句，使用从表数据时才触发从表的查询语句。</li><li>延迟加载在获取关联数据时速度较慢，但可以节约资源，即用即取。</li></ul><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h3 id="开启延迟加载"><a href="#开启延迟加载" class="headerlink" title="开启延迟加载"></a>开启延迟加载</h3><p>设置所有的N+1查询都为延迟加载：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>设置某个方法为延迟加载：</p><p>在<code>&lt;association&gt;</code>、<code>&lt;collection&gt;</code>中添加fetchType属性设置加载方式。lazy：延迟加载；eager：立即加载。</p></li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;studentList&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;com.itbaizhan.pojo.Student&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">select</span>=<span class="string">&quot;com.itbaizhan.mapper2.StudentMapper2.findByClassId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;cid&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">fetchType</span>=<span class="string">&quot;lazy&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="测试延迟加载"><a href="#测试延迟加载" class="headerlink" title="测试延迟加载"></a>测试延迟加载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAllClasses2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassesMapper2</span> <span class="variable">classesMapper2</span> <span class="operator">=</span> session.getMapper(ClassesMapper2.class);</span><br><span class="line">    List&lt;Classes&gt; all = classesMapper2.findAll();</span><br><span class="line">    all.forEach(System.out::println);</span><br><span class="line">    System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line">    System.out.println(all.get(<span class="number">0</span>).getStudentList());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​由于打印对象时会调用对象的<code>toString</code>方法，<code>toString</code>方法默认会触发延迟加载的查询，所以我们无法测试出延迟加载的效果。</p><p>​我们在配置文件设置lazyLoadTriggerMethods属性，该属性指定对象的什么方法触发延迟加载，设置为空字符串即可。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadTriggerMethods&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般情况下，一对多查询使用延迟加载，一对一查询使用立即加载。</p><h2 id="MyBatis注解开发-环境搭建"><a href="#MyBatis注解开发-环境搭建" class="headerlink" title="MyBatis注解开发_环境搭建"></a>MyBatis注解开发_环境搭建</h2><p>MyBatis可以使用注解替代映射文件。映射文件的作用就是定义Sql语句，可以在持久层接口上使用@Select&#x2F;@Delete&#x2F;@Insert&#x2F;@Update定义Sql语句，这样就不需要使用映射文件了。</p><ol><li>创建maven工程，引入依赖</li><li>创建mybatis核心配置文件SqlMapConfig.xml</li><li>将log4j.properties文件放入resources中，让控制台打印SQL语句。</li><li>创建实体类</li><li>创建持久层接口，并在接口方法上定义Sql语句</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em><strong>由于注解在方法上方，而方法中就有参数类型和返回值类型，所以使用注解开发不需要定义参数类型和返回值类型</strong></em></p><p> 6.在核心配置文件注册持久层接口，由于没有映射文件，所以只能采用注册接口或注册包的方法。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.itbaizhan.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>7.测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserMapper</span> &#123;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">         resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(resourceAsStream);</span><br><span class="line">         session = factory.openSession();</span><br><span class="line">         userMapper = session.getMapper(UserMapper.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        session.close();</span><br><span class="line">        resourceAsStream.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testfindAll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;User&gt; all = userMapper.findAll();</span><br><span class="line">        all.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis注解开发-增删改查"><a href="#MyBatis注解开发-增删改查" class="headerlink" title="MyBatis注解开发_增删改查"></a>MyBatis注解开发_增删改查</h2><p>接下来写一套基于MyBatis注解的增删改查方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SelectKey(keyColumn = &quot;id&quot;,keyProperty = &quot;id&quot;,resultType = int.class,before = false,statement = &quot;SELECT LAST_INSERT_ID()&quot;)</span></span><br><span class="line"><span class="meta">@SelectKey(keyColumn = &quot;id&quot;,keyProperty = &quot;id&quot;,reslutType = int.class,before = false,statement = &quot;SELECT LAST_INSERT_ID()&quot;)</span></span><br><span class="line"><span class="meta">@Insert(&quot;insert into user(username,sex,address) values (#&#123;username&#125;,#&#123;sex&#125;,#&#123;address&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Update(&quot;update user set username = #&#123;username&#125;,sex=#&#123;sex&#125;,address=#&#123;address&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Delete(&quot;delete from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where username like #&#123;username&#125;&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findByUsernameLike</span><span class="params">(String username)</span>;</span><br></pre></td></tr></table></figure><p>编写测试方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testallUser</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;失效&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;火星&quot;</span>);</span><br><span class="line">    System.out.println(user);</span><br><span class="line">    userMapper.add(user);</span><br><span class="line">    session.commit();</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">11</span>, <span class="string">&quot;天选之人&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;肇庆&quot;</span>);</span><br><span class="line">    userMapper.update(user);</span><br><span class="line">    session.commit();</span><br><span class="line">    System.out.println(user);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    userMapper.delete(<span class="number">11</span>);</span><br><span class="line">    session.commit();</span><br><span class="line">    List&lt;User&gt; all = userMapper.findAll();</span><br><span class="line">    all.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testfindByUsernameLike</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    List&lt;User&gt; lists = userMapper.findByUsernameLike(<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line">    lists.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis注解开发-动态Sql"><a href="#MyBatis注解开发-动态Sql" class="headerlink" title="MyBatis注解开发_动态Sql"></a>MyBatis注解开发_动态Sql</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220406103932365.png" alt="image-20220406103932365"></p><p>MyBatis注解开发中有两种方式构建动态Sql：</p><h3 id="使用脚本标签"><a href="#使用脚本标签" class="headerlink" title="使用脚本标签"></a>使用脚本标签</h3><p>将Sql嵌套在<code>&lt;script&gt;</code>内即可使用动态Sql标签：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 根据任意条件查询</span></span><br><span class="line"><span class="meta">@Select(&quot;&lt;script&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;   select * from user\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;        &lt;where&gt;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;            &lt;if test=\&quot;username != null and username.length() != 0\&quot;&gt;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;                username like #&#123;username&#125;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;            &lt;/if&gt;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;            &lt;if test=\&quot;sex != null and sex.length() != 0\&quot;&gt;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;                and sex = #&#123;sex&#125;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;            &lt;/if&gt;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;            &lt;if test=\&quot;address != null and address.length() != 0\&quot;&gt;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;                and address = #&#123;address&#125;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;            &lt;/if&gt;\n&quot; +</span></span><br><span class="line"><span class="meta">        &quot;        &lt;/where&gt;&quot; +</span></span><br><span class="line"><span class="meta">        &quot;&lt;/script&gt;&quot;)</span></span><br><span class="line"></span><br><span class="line">List&lt;User&gt; <span class="title function_">findByCondition</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><h3 id="在方法中构建动态Sql"><a href="#在方法中构建动态Sql" class="headerlink" title="在方法中构建动态Sql"></a>在方法中构建动态Sql</h3><p>在MyBatis中有<code>@SelectProvider</code>、<code>@UpdateProvider</code>、<code>@DeleteProvider</code>、<code>@InsertProvider</code>注解。当使用这些注解时将不在注解中直接编写SQL，而是调用某个类的方法来生成SQL。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SelectProvider(type = UserProvider.class,method = &quot;findByConditionSql&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findByCondition</span><span class="params">(User user)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.provider;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserProvider</span> &#123;</span><br><span class="line">    <span class="comment">//生成根据任意条件查询的Sql语句</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findByConditionSql</span><span class="params">(User user)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;select * from user where 1=1 &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(user.getUsername()!=<span class="literal">null</span>&amp;&amp;user.getUsername().length()!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;and username like #&#123;username&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(user.getSex()!=<span class="literal">null</span>&amp;&amp;user.getSex().length()!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;and sex = #&#123;sex&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(user.getAddress()!=<span class="literal">null</span>&amp;&amp;user.getAddress().length()!=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sb.append(<span class="string">&quot;and address = #&#123;address&#125;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findByCondition</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setUsername(<span class="string">&quot;%北京%&quot;</span>);</span><br><span class="line">    List&lt;User&gt; all = userMapper.findByCondition(user);</span><br><span class="line">    all.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis注解开发-自定义映射关系"><a href="#MyBatis注解开发-自定义映射关系" class="headerlink" title="MyBatis注解开发_自定义映射关系"></a>MyBatis注解开发_自定义映射关系</h2><p>当POJO属性名与数据库列名不一致时，需要自定义实体类和结果集的映射关系，在MyBatis注解开发中，使用@Results定义并使用自定义映射，使用@ResultMap使用自定义映射，用法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有用户</span></span><br><span class="line"><span class="meta">@Results(id = &quot;userDiyMapper&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,property = &quot;id&quot;,column = &quot;id&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;username&quot;,column = &quot;username&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;sex&quot;,column = &quot;sex&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;address&quot;,column = &quot;address&quot;),</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user&quot;)</span></span><br><span class="line">List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据id查询</span></span><br><span class="line"><span class="meta">@ResultMap(&quot;userDiyMapper&quot;)</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findById</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">byId</span> <span class="operator">=</span> userMapper.findById(<span class="number">2</span>);</span><br><span class="line">    System.out.println(byId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis注解开发-二级缓存"><a href="#MyBatis注解开发-二级缓存" class="headerlink" title="MyBatis注解开发_二级缓存"></a>MyBatis注解开发_二级缓存</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220406155654730.png" alt="image-20220406155654730"></p><p>MyBatis默认开启一级缓存，接下来我们学习如何在注解开发时使用二级缓存：</p><p>1.POJO类实现Serializable接口。</p><p>2.在MyBatis配置文件添加如下设置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;cacheEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.在持久层接口上方加注解@CacheNamespace(blocking&#x3D;true)，该接口的所有方法都支持二级缓存</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220406155810412.png" alt="image-20220406155810412"></p><p>4.测试二级缓存</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUserMapper2</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCache</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">        <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(resourceAsStream);</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session1</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session2</span> <span class="operator">=</span> factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> session1.getMapper(UserMapper.class).findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user1);</span><br><span class="line">        System.out.println(user1.hashCode());</span><br><span class="line">        session1.commit();<span class="comment">//清空一级缓存，将数据存到二级缓存</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> session2.getMapper(UserMapper.class).findById(<span class="number">2</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        System.out.println(user2.hashCode());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis注解开发-一对一关联查询"><a href="#MyBatis注解开发-一对一关联查询" class="headerlink" title="MyBatis注解开发_一对一关联查询"></a>MyBatis注解开发_一对一关联查询</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220406162445793.png" alt="image-20220406162445793"></p><p>在MyBatis的注解开发中对于多表查询只支持分解查询，不支持连接查询</p><p>1.创建实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> sid;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Classes classes;</span><br><span class="line">    <span class="comment">// 省略getter/setter/toString</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Classes</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> cid;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">    <span class="comment">// 省略getter/setter/toString</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建分解后的查询方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from student&quot;)</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassesMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 根据id查询班级</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from classes where cid = #&#123;cid&#125;&quot;)</span></span><br><span class="line">    Classes <span class="title function_">findByCid</span><span class="params">(Integer cid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.主表的查询配置自定义映射关系</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.One;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Result;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Results;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.mapping.FetchType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义映射关系</span></span><br><span class="line">    <span class="meta">@Results(id = &quot;studentMapper&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">            @Result(id = true,property = &quot;sid&quot;,column = &quot;sid&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;name&quot;,column = &quot;name&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;age&quot;,column = &quot;age&quot;),</span></span><br><span class="line"><span class="meta">            @Result(property = &quot;sex&quot;,column = &quot;sex&quot;),</span></span><br><span class="line"><span class="meta">       /**</span></span><br><span class="line"><span class="meta">        * property:属性名</span></span><br><span class="line"><span class="meta">        * column：调用从表方法时传入的参数列</span></span><br><span class="line"><span class="meta">        * one：表示该属性是一个对象</span></span><br><span class="line"><span class="meta">        * select：调用的从表方法</span></span><br><span class="line"><span class="meta">        * fetchType：加载方法</span></span><br><span class="line"><span class="meta">        * */</span></span><br><span class="line"><span class="meta">       @Result(property = &quot;classes&quot;,column = &quot;classId&quot;,</span></span><br><span class="line"><span class="meta">       one = @One(select = &quot;com.itbaizhan.mapper.ClassesMapper.findByCid&quot;,</span></span><br><span class="line"><span class="meta">       fetchType = FetchType.EAGER</span></span><br><span class="line"><span class="meta">       ))</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">    &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student&quot;)</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.StudentMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.Student;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestManyTable</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Before</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(resourceAsStream);</span><br><span class="line">            session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@After</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            resourceAsStream.close(); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAllStudent</span><span class="params">()</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">StudentMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(StudentMapper.class);</span><br><span class="line">                List&lt;Student&gt; all = mapper.findAll();</span><br><span class="line">                <span class="keyword">for</span> (Student student : all) &#123;</span><br><span class="line">                    System.out.println(student.toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>1.在MyBatis中，@Reuslt内定义属性表示该字段为对象类型</strong></p><p>one</p><p><strong>2.在MyBatis中使用注解实现多表查询，以下说法正确的是：</strong></p><p>只支持分解查询。</p><h2 id="MyBatis注解开发-一对多关联查询"><a href="#MyBatis注解开发-一对多关联查询" class="headerlink" title="MyBatis注解开发_一对多关联查询"></a>MyBatis注解开发_一对多关联查询</h2><p>1.创建分解后的查询方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ClassesMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 查询所有班级</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from classes&quot;)</span></span><br><span class="line">    List&lt;Classes&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">// 根据班级id查询学生</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student where classId = #&#123;classId&#125;&quot;)</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findByClassId</span><span class="params">(<span class="type">int</span> classId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.主表的查询配置自定义映射关系</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询所有班级</span></span><br><span class="line"><span class="meta">@Results(id = &quot;classMapper&quot;,value = &#123;</span></span><br><span class="line"><span class="meta">        @Result(id = true,property = &quot;cid&quot;,column = &quot;cid&quot;),</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;className&quot;, column = &quot;className&quot;),</span></span><br><span class="line"><span class="meta">  //many:表示该属性是一个集合</span></span><br><span class="line"><span class="meta">        @Result(property = &quot;studentList&quot;, column = &quot;cid&quot;,</span></span><br><span class="line"><span class="meta">                many = @Many(select = &quot;com.itbaizhan.mapper.StudentMapper.findByClassId&quot;,</span></span><br><span class="line"><span class="meta">                fetchType = FetchType.LAZY))</span></span><br><span class="line"><span class="meta">&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Select(&quot;select * from classes&quot;)</span></span><br><span class="line">List&lt;Classes&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findAllClasses</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ClassesMapper</span> <span class="variable">classesMapper</span> <span class="operator">=</span> session.getMapper(ClassesMapper.class);</span><br><span class="line">    List&lt;Classes&gt; all = classesMapper.findAll();</span><br><span class="line">    all.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解开发与映射文件开发的对比"><a href="#注解开发与映射文件开发的对比" class="headerlink" title="注解开发与映射文件开发的对比"></a>注解开发与映射文件开发的对比</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220406173208165.png" alt="image-20220406173208165"></p><p>MyBatis中更推荐使用映射文件开发，Spring、SpringBoot更推荐注解方式。具体使用要视项目情况而定。它们的优点对比如下：</p><p>映射文件：</p><ul><li>代码与Sql语句是解耦的，修改时只需修改配置文件，无需修改源码。</li><li>Sql语句集中，利于快速了解和维护项目。</li><li>级联查询支持连接查询和分解查询两种方式，注解开发只支持分解查询。</li></ul><p>注解：</p><ul><li>配置简单，开发效率高。</li><li>类型安全，在编译期即可进行校验，不用等到运行时才发现错误。</li></ul><h2 id="PageHelper分页插件"><a href="#PageHelper分页插件" class="headerlink" title="PageHelper分页插件"></a>PageHelper分页插件</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211028102435290.png" alt="image-20211028102435290"></p><p>开发过程中如果要进行分页查询，需要传入页数和每页条数。返回页面数据，总条数，总页数，当前页面，每页条数等数据。此时使用PageHelper插件可以快速帮助我们获取这些数据。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211108173513152.png" alt="image-20211108173513152"></p><p>PageHelper是一款非常好用的开源免费的Mybatis第三方分页插件。使用该插件时，只要传入分页参数，即可自动生成页面对象。我们使用该插件分页查询所有用户：</p><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- PageHelper --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.Mybatis配置文件中配置PageHelper插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 设置数据库类型--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.使用PageHelper插件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindPage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// (1)查询前设置分页参数，参数一：页数，从1开始。参数二：每页条数</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">    <span class="comment">// (2)正常查询</span></span><br><span class="line">    List&lt;User&gt; all = userMapper.findAll();</span><br><span class="line">    <span class="comment">// (3)创建页面对象，创建时将查询结果传入构造方法</span></span><br><span class="line">    <span class="type">PageInfo</span> <span class="variable">pageInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageInfo</span>(all);</span><br><span class="line">    <span class="comment">// (4)打印页面对象的属性</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;结果集：&quot;</span>+pageInfo.getList());</span><br><span class="line">    System.out.println(<span class="string">&quot;总条数：&quot;</span>+pageInfo.getTotal());</span><br><span class="line">    System.out.println(<span class="string">&quot;总页数&quot;</span>+pageInfo.getPages());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前页&quot;</span>+pageInfo.getPageNum());</span><br><span class="line">    System.out.println(<span class="string">&quot;每页条数&quot;</span>+pageInfo.getSize());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis-Generator-工具引入"><a href="#MyBatis-Generator-工具引入" class="headerlink" title="MyBatis_Generator_工具引入"></a>MyBatis_Generator_工具引入</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211029105143971.png" alt="image-20211029105143971"></p><p>MyBatis Generator（MBG）是MyBatis官方提供的代码生成器。它可以根据数据库的表结构自动生成POJO类、持久层接口与映射文件，极大减少了代码的编写量，提高开发效率。</p><p>（自动生成POJO类、持久层接口与映射文件）</p><p>MBG可以作为项目引入使用，也可以作为Maven插件使用，其中作为Maven插件使用更加方便快捷。</p><p>1.准备数据库表</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211029103514457.png" alt="image-20211029103514457"></p><p>2.在pom文件中配置MBG插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatisDemo4<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.generator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-generator-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--   MBG配置    --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--MBG配置文件位置 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">configurationFile</span>&gt;</span>src/main/resources/generatorConfig.xml<span class="tag">&lt;/<span class="name">configurationFile</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--运行显示详情 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">verbose</span>&gt;</span>true<span class="tag">&lt;/<span class="name">verbose</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--允许覆盖文件 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写MBG配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">generatorConfiguration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">               <span class="string">&quot;http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">generatorConfiguration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- jdbc的jar包位置，插件需要连接数据库 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">classPathEntry</span> <span class="attr">location</span>=<span class="string">&quot;E:\software\m2\repository\mysql\mysql-connector-java\8.0.26\mysql-connector-java-8.0.26.jar&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">context</span> <span class="attr">id</span>=<span class="string">&quot;default&quot;</span> <span class="attr">targetRuntime</span>=<span class="string">&quot;MyBatis3&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 是否去除自动生成的注释--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suppressAllComments&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">commentGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--数据库连接参数--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">jdbcConnection</span> <span class="attr">driverClass</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">connectionURL</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">userId</span>=<span class="string">&quot;root&quot;</span></span></span><br><span class="line"><span class="tag">                            <span class="attr">password</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">jdbcConnection</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 类型处理器，在数据库类型和java类型之间的转换控制--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;forceBigDecimals&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">javaTypeResolver</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!-- targetProject:JAVA类路径  targetProject:生成的POJO类的包--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">javaModelGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.itbaizhan.pojo&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否生成子包 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 设置是否在getter方法中，对String类型字段调用trim()方法 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;trimStrings&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">javaModelGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- targetProject:配置文件路径 targetPackage:生成映射文件的位置 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sqlMapGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/resources&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.itbaizhan.mapper&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否生成子包 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">sqlMapGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- targetPackage：JAVA类路径 targetProject:生成的持久层接口包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">javaClientGenerator</span> <span class="attr">targetProject</span>=<span class="string">&quot;src/main/java&quot;</span> <span class="attr">targetPackage</span>=<span class="string">&quot;com.itbaizhan.mapper&quot;</span> <span class="attr">type</span>=<span class="string">&quot;XMLMAPPER&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 是否生成子包 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;enableSubPackages&quot;</span> <span class="attr">value</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">javaClientGenerator</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 数据库表，表名不要和其他库中的表名一样 --&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">table</span> <span class="attr">tableName</span>=<span class="string">&quot;product&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">context</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">generatorConfiguration</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211029103915409.png" alt="image-20211029103915409"></p><ul><li>Product.java：POJO类</li><li>ProductMapper.java：持久层接口</li><li>ProductMapper.xml：映射文件</li><li>ProductExample.java：查询扩展类，该类可以构造复杂的查询条件。<ul><li>Criterion：代表一个字段。</li><li>GeneratedCriteria：抽象类，生成查询条件的工具。</li><li>Criteria：GeneratedCriteria的子类，生成查询条件的工具。</li></ul></li></ul><p>5.在配置文件中注册生成的映射文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.mapper.ProductMapper&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="MyBatis-Generator-增删改方法"><a href="#MyBatis-Generator-增删改方法" class="headerlink" title="MyBatis Generator_增删改方法"></a>MyBatis Generator_增删改方法</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211029113211086.png" alt="image-20211029113211086"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.pojo.Product;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.After;</span><br><span class="line"><span class="keyword">import</span> org.junit.Before;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestMBG</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">resourceAsStream</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ProductMapper</span> <span class="variable">productMapper</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Before</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">Before</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            resourceAsStream = Resources.getResourceAsStream(<span class="string">&quot;SqlMapConfig.xml&quot;</span>);</span><br><span class="line">            <span class="type">SqlSessionFactoryBuilder</span> <span class="variable">sqlSessionFactoryBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>();</span><br><span class="line">            <span class="type">SqlSessionFactory</span> <span class="variable">factory</span> <span class="operator">=</span> sqlSessionFactoryBuilder.build(resourceAsStream);</span><br><span class="line">            session = factory.openSession();</span><br><span class="line">            productMapper = session.getMapper(ProductMapper.class);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@After</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">After</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">            session.close();</span><br><span class="line">            resourceAsStream.close(); &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//新增</span></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="string">&quot;百战Python课1234&quot;</span>,<span class="number">15000.0</span>);</span><br><span class="line">            productMapper.insert(product);</span><br><span class="line">            session.commit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 修改</span></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span>&#123;</span><br><span class="line">               <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Product</span>(<span class="number">2</span>,<span class="string">&quot;百战Python课&quot;</span>, <span class="number">25000.0</span>);</span><br><span class="line">                productMapper.updateByPrimaryKey(product);</span><br><span class="line">                session.commit();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 删除</span></span><br><span class="line">        <span class="meta">@Test</span></span><br><span class="line">       <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span>&#123;</span><br><span class="line">               productMapper.deleteByPrimaryKey(<span class="number">5</span>);</span><br><span class="line">                session.commit();</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Mybaits Generator生成的方法中，根据ID删除是什么方法：</p><p>deleteByPrimaryKey</p><h2 id="MyBatis-Generator-查询方法"><a href="#MyBatis-Generator-查询方法" class="headerlink" title="MyBatis Generator_查询方法"></a>MyBatis Generator_查询方法</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.selectByPrimaryKey(<span class="number">1</span>);</span><br><span class="line">    System.out.println(product);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查询所有</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//查询拓展对象，可以构建查询条件</span></span><br><span class="line">    <span class="type">ProductExample</span> <span class="variable">productExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductExample</span>();</span><br><span class="line">    List&lt;Product&gt; products = productMapper.selectByExample(productExample);</span><br><span class="line">    products.forEach(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据商品名查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindByName</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//查询拓展对象，可以构建查询条件</span></span><br><span class="line">    <span class="type">ProductExample</span> <span class="variable">productExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductExample</span>();</span><br><span class="line">    <span class="comment">//构建查询条件</span></span><br><span class="line">    ProductExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> productExample.createCriteria();</span><br><span class="line">    criteria.andProductnameLike(<span class="string">&quot;%尚学堂%&quot;</span>);</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    List&lt;Product&gt; products = productMapper.selectByExample(productExample);</span><br><span class="line">    products.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mybaits Generator生成的方法中，查询所有使用什么方法：</p><p>selectByExample</p><h2 id="MyBatis-Generator-复杂查询"><a href="#MyBatis-Generator-复杂查询" class="headerlink" title="MyBatis Generator_复杂查询"></a>MyBatis Generator_复杂查询</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多条件and查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAnd</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//查询拓展对象，可以构建查询条件</span></span><br><span class="line">    <span class="type">ProductExample</span> <span class="variable">productExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductExample</span>();</span><br><span class="line">    <span class="comment">//构建查询条件</span></span><br><span class="line">    ProductExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> productExample.createCriteria();</span><br><span class="line">    criteria.andProductnameLike(<span class="string">&quot;%百战%&quot;</span>);</span><br><span class="line">    criteria.andPriceBetween(<span class="number">0.0</span>,<span class="number">20000.0</span>);</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    List&lt;Product&gt; products = productMapper.selectByExample(productExample);</span><br><span class="line">    products.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//多条件or查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindOr</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">//查询扩展对象，可以构建查询条件</span></span><br><span class="line">       <span class="type">ProductExample</span> <span class="variable">productExample</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProductExample</span>();</span><br><span class="line">       <span class="comment">// 构建查询条件</span></span><br><span class="line">       ProductExample.<span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> productExample.createCriteria();</span><br><span class="line">       criteria.andProductnameLike(<span class="string">&quot;%百战%&quot;</span>);</span><br><span class="line"></span><br><span class="line">        ProductExample.<span class="type">Criteria</span> <span class="variable">criteria1</span> <span class="operator">=</span> productExample.createCriteria();</span><br><span class="line">        criteria1.andPriceBetween(<span class="number">0.0</span>,<span class="number">10000.0</span>);</span><br><span class="line"></span><br><span class="line">        productExample.or(criteria1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询</span></span><br><span class="line">    List&lt;Product&gt; products = productMapper.selectByExample(productExample);</span><br><span class="line">    products.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.在Mybaits Generator中，Criteria类是类的内部类：Example</p><h2 id="动态代理-代理模式简介"><a href="#动态代理-代理模式简介" class="headerlink" title="动态代理_代理模式简介"></a>动态代理_代理模式简介</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211028155009999.png" alt="image-20211028155009999"></p><p>代理模式是23种设计模式之一。设计模式是前人总结的，在软件开发过程遇到常用问题的解决方案，常见的设计模式有单例模式、工厂模式、适配器模式等等。</p><p>代理模式的作用是在<strong>不修改原对象的基础上增强该对象的方法</strong>。比如官方购买苹果手机不赠送充电头，此时京东平台作为苹果的代理商，可以在代理销售苹果手机时赠送充电头。</p><p>代理模式分为静态代理、动态代理。静态代理会生成一个代理类，动态代理不会生成代理类，直接生成代理对象</p><p>代理模式的作用是：<strong>在不修改原对象的基础上增强该对象的方法</strong></p><h2 id="动态代理-JDK动态代理"><a href="#动态代理-JDK动态代理" class="headerlink" title="动态代理_JDK动态代理"></a>动态代理_JDK动态代理</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220407105136388.png" alt="image-20220407105136388"></p><p>JDK动态代理是<strong>针对接口进行代理</strong>，所以我们要写被代理的接口和该接口的实现类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.jdkdynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    String <span class="title function_">sell</span><span class="params">(<span class="type">double</span> price)</span>;<span class="comment">//卖产品</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">repair</span><span class="params">()</span>;<span class="comment">//维修</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.jdkdynamic;</span><br><span class="line"></span><br><span class="line"><span class="comment">//被代理接口的实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleImpl</span> <span class="keyword">implements</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sell</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品卖了&quot;</span>+price+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HuaWei&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">repair</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;苹果售后维修&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.jdkdynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理方式类，定义被代理方法的增强方式</span></span><br><span class="line"><span class="comment">//该类实现InvocationHandler接口，重写invoke方法，定义方法的增强方式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Apple apple;<span class="comment">//被代理对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShoppingProxy</span><span class="params">(Apple apple)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.apple = apple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义原方法的增强方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 被代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 被代理对象调用的方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 被代理对象调用的方法时，传入的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 方法的返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> method.getName();<span class="comment">//被代理对象执行的方法名</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;sell&quot;</span>.equals(name)) &#123;</span><br><span class="line">            <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> (<span class="type">double</span>) args[<span class="number">0</span>] * <span class="number">0.9</span>;</span><br><span class="line">            <span class="comment">//增强参数</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(apple, price);</span><br><span class="line">            <span class="comment">//执行方法</span></span><br><span class="line">            <span class="keyword">return</span> result + <span class="string">&quot;和充电头&quot;</span>;<span class="comment">//增强返回值</span></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;repair&quot;</span>.equals(name)) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;专属客服为您服务！&quot;</span>);<span class="comment">//增强方法流程</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> method.invoke(apple, args);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.jdkdynamic.Apple;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.jdkdynamic.AppleImpl;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.jdkdynamic.ShoppingProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//被代理对象</span></span><br><span class="line">        <span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AppleImpl</span>();</span><br><span class="line">        <span class="comment">//代理方式对象</span></span><br><span class="line">        <span class="type">ShoppingProxy</span> <span class="variable">shoppingProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingProxy</span>(apple);</span><br><span class="line">        <span class="comment">//生成代理对象</span></span><br><span class="line">        <span class="type">Apple</span> <span class="variable">appleJD</span> <span class="operator">=</span> (Apple) Proxy.newProxyInstance(</span><br><span class="line">                apple.getClass().getClassLoader(),<span class="comment">//类加载器</span></span><br><span class="line">                apple.getClass().getInterfaces(),<span class="comment">//被代理接口</span></span><br><span class="line">                shoppingProxy<span class="comment">//代理方式对象</span></span><br><span class="line">        );</span><br><span class="line">        <span class="comment">//执行增强后的方法</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sell</span> <span class="operator">=</span> appleJD.sell(<span class="number">6000</span>);</span><br><span class="line">        System.out.println(sell);</span><br><span class="line">        appleJD.repair();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="动态代理-CGLib动态代理"><a href="#动态代理-CGLib动态代理" class="headerlink" title="动态代理_CGLib动态代理"></a>动态代理_CGLib动态代理</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220407120847594.png" alt="image-20220407120847594"></p><p>CGLib动态代理简化了JDK动态代理的写法，JDK是针对接口代理，而CGLib是针对类代理。</p><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- CGLib依赖  --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.cglibdynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Apple</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sell</span><span class="params">(<span class="type">double</span> price)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;产品卖了&quot;</span>+price+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HuaWei&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">repair</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;苹果售后维修&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.cglibdynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodInterceptor;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.MethodProxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 代理方式类，实现MethodInterceptor接口，重写intercept方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingProxy</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Apple apple; <span class="comment">// 被代理对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ShoppingProxy</span><span class="params">(Apple apple)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.apple = apple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">           <span class="comment">/**</span></span><br><span class="line"><span class="comment">      * 定义原方法的增强方式</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> o 被代理对象</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> method 被代理对象调用的方法</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> objects 被代理对象调用的方法时，传入的参数</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@param</span> methodProxy 底层生成的代理类的引用</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 方法的返回值</span></span><br><span class="line"><span class="comment">      * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] objects, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> method.getName();</span><br><span class="line">                <span class="keyword">if</span>(<span class="string">&quot;sell&quot;</span>.equals(name))&#123;</span><br><span class="line">                        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> (<span class="type">double</span>)objects[<span class="number">0</span>]*<span class="number">0.8</span>;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(apple, price);</span><br><span class="line">                        <span class="keyword">return</span> result+<span class="string">&quot;和数据线&quot;</span>;</span><br><span class="line">                    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;repair&quot;</span>.equals(name))&#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;专属客服为您服务！&quot;</span>);</span><br><span class="line">                        <span class="keyword">return</span> method.invoke(apple,objects);</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                       <span class="keyword">return</span> method.invoke(apple,objects);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.itbaizhan.cglibdynamic.Apple;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.cglibdynamic.ShoppingProxy;</span><br><span class="line"><span class="keyword">import</span> net.sf.cglib.proxy.Enhancer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test1</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">                <span class="comment">// 被代理对象</span></span><br><span class="line">                <span class="type">Apple</span> <span class="variable">apple</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">                <span class="comment">// 代理方式</span></span><br><span class="line">                <span class="type">ShoppingProxy</span> <span class="variable">shoppingProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingProxy</span>(apple);</span><br><span class="line">               <span class="comment">// 生成代理对象</span></span><br><span class="line">                <span class="type">Apple</span> <span class="variable">appleTB</span> <span class="operator">=</span> (Apple) Enhancer.create(Apple.class, shoppingProxy);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 执行增强后的方法</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">sell</span> <span class="operator">=</span> appleTB.sell(<span class="number">9000</span>);</span><br><span class="line">                System.out.println(sell);</span><br><span class="line">                appleTB.repair();</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Servlet学习笔记</title>
      <link href="/archives/1a5315c2.html"/>
      <url>/archives/1a5315c2.html</url>
      
        <content type="html"><![CDATA[<h1 id="Servlet技术-Author-Magi"><a href="#Servlet技术-Author-Magi" class="headerlink" title="Servlet技术(@Author: Magi)"></a>Servlet技术(@Author: Magi)</h1><h2 id="一、JavaEE简介"><a href="#一、JavaEE简介" class="headerlink" title="一、JavaEE简介"></a>一、JavaEE简介</h2><h3 id="1-什么是javaEE"><a href="#1-什么是javaEE" class="headerlink" title="1.什么是javaEE"></a>1.什么是javaEE</h3><p>​JavaEE（Java Enterprise Edition），java企业版，是一个用于企业版web开发平台。最早由Sun公司定制并发布，后由Oracle负责维护。在Java EE平台规范了在开发企业级web应用中的技术标准。</p><p>​在JavaEE平台共包含了13个技术规范（随着 JavaEE 版本的变化所包含的技术点的数量会有增多）。他们分别是：JDBC,JNDI,EJB,RMI,SERVLET,JSP,XML,JMS,JAVA IDL,JPA,JTA,JavaMail和JAF。</p><h3 id="2-JavaEE版本"><a href="#2-JavaEE版本" class="headerlink" title="2.JavaEE版本"></a>2.JavaEE版本</h3><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313162642208.png" alt="image-20220313162642208"></p><h2 id="二、Servlet简介"><a href="#二、Servlet简介" class="headerlink" title="二、Servlet简介"></a>二、Servlet简介</h2><h3 id="1-Web开发历史回顾"><a href="#1-Web开发历史回顾" class="headerlink" title="1.Web开发历史回顾"></a>1.Web开发历史回顾</h3><h4 id="1-1CGI"><a href="#1-1CGI" class="headerlink" title="1.1CGI"></a>1.1CGI</h4><p>公共网关接口（Common GateWay Interface，CGI）是Web服务器运行时外部程序的规范。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313162820908.png" alt="image-20220313162820908"></p><h4 id="1-2CGI缺点"><a href="#1-2CGI缺点" class="headerlink" title="1.2CGI缺点"></a>1.2CGI缺点</h4><ol><li>以进程方式运行，对每一个客户端的请求都要启动一个进程来运行程序，导致用户数目增加时，服务器端资源被大量占用。</li><li>不同的CGI之间不能共享资源</li><li>由于对操作系统和进程的不深刻理解，使得开发人员开发的CGI程序经常遇到莫名其妙的错误。</li></ol><h4 id="1-3FastCGI"><a href="#1-3FastCGI" class="headerlink" title="1.3FastCGI"></a>1.3FastCGI</h4><p>FastCGI 是对 CGI 模式的一个改进，采用了 Pooling 技术，一定程度上改善了性能，但是 由于仍然是基于进程运行的所以并没有从根本上解决问题。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313163106982.png" alt="image-20220313163106982"></p><h3 id="2-Servlet介绍"><a href="#2-Servlet介绍" class="headerlink" title="2.Servlet介绍"></a>2.Servlet介绍</h3><p><strong>*<u>Servlet是Servlet Applet的简称</u><em><strong>，</strong></em><u>称为服务端小程序。</u><em><strong>是JavaEE平台下的技术标准，基本java语言编写的服务端程序。Web容器或应用服务器实现了Servlet标准所以Servlet需要运行在</strong>Web容器或应用服务器</em>*中，</strong><em>Servlet主要功能在于能够在服务器中执行并生成数据。</em>**</p><h4 id="2-1-Servlet技术特点"><a href="#2-1-Servlet技术特点" class="headerlink" title="2.1 Servlet技术特点"></a>2.1 Servlet技术特点</h4><p>Servlet使用单进程多线程方式运行</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313163813472.png" alt="image-20220313163813472"></p><h3 id="2-2-Servlet在应用程序中的位置"><a href="#2-2-Servlet在应用程序中的位置" class="headerlink" title="2.2 Servlet在应用程序中的位置"></a>2.2 Servlet在应用程序中的位置</h3><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313163927979.png" alt="image-20220313163927979"></p><h2 id="三、服务器"><a href="#三、服务器" class="headerlink" title="三、服务器"></a>三、服务器</h2><h3 id="1-JavaEE应用服务器（Java-EE-Application-Server）"><a href="#1-JavaEE应用服务器（Java-EE-Application-Server）" class="headerlink" title="1.JavaEE应用服务器（Java  EE Application  Server）"></a>1.JavaEE应用服务器（Java  EE Application  Server）</h3><p>​应用服务器是 Java EE 规范的具体实现, 可以执行&#x2F;驱动基于 JavaEE 平台开发的 web 项 目。绝大部分的应用服务器都是付费产品。 </p><p>常见的应用服务： </p><p>Weblogic（BEA Oracle 收费） </p><p>Webshpere（IBM 收费） </p><p>JBoss（RedHad 收费）</p><p>Resin（Caucho 收费） </p><p>JRun（Macromedia 收费） </p><p>Geronimo（Apache 免费） </p><h3 id="2-Web容器（Web-Server）"><a href="#2-Web容器（Web-Server）" class="headerlink" title="2.Web容器（Web Server）"></a>2.Web容器（Web Server）</h3><p>​只实现了JavaEE平台下部分技术标准，如Servlet，Jsp，JNDI，JavaMail，Web容器是开源免费的</p><p>Tomcat（Apache 开源免费的）</p><p>Jetty（Jetty 开源免费的）</p><h3 id="3-Tomcat的使用"><a href="#3-Tomcat的使用" class="headerlink" title="3. Tomcat的使用"></a>3. Tomcat的使用</h3><h4 id="3-1-Tomcat下载与安装"><a href="#3-1-Tomcat下载与安装" class="headerlink" title="3.1 Tomcat下载与安装"></a>3.1 Tomcat下载与安装</h4><h5 id="3-1-1-下载"><a href="#3-1-1-下载" class="headerlink" title="3.1.1 下载"></a>3.1.1 下载</h5><p>下载地址：<a href="https://tomcat.apache.org/">https://tomcat.apache.org/</a></p><h5 id="3-1-2-安装"><a href="#3-1-2-安装" class="headerlink" title="3.1.2 安装"></a>3.1.2 安装</h5><p>Tomcat 是绿色软件，解压就可使用。 </p><h5 id="3-1-3"><a href="#3-1-3" class="headerlink" title="3.1.3"></a>3.1.3</h5><p>Tomcat是用Java语言开发的Web容器，所以在使用Tomcat时需要在操作系统中正确配置环境变量</p><p>JAVA_HOME：C:\Program Files\Java\jdk1.8.0_171（jdk的版本）</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313164927149.png" alt="image-20220313164927149"></p><p>PATH：%JAVA_HOME%\bin</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313165000299.png" alt="image-20220313165000299"></p><p>CLASS_PATH：%JAVA_HOME%\lib</p><h4 id="3-2-Tomcat目录结构与介绍"><a href="#3-2-Tomcat目录结构与介绍" class="headerlink" title="3.2 Tomcat目录结构与介绍"></a>3.2 Tomcat目录结构与介绍</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313165200125.png" alt="image-20220313165200125"></p><h5 id="3-2-1-bin"><a href="#3-2-1-bin" class="headerlink" title="3.2.1. bin"></a>3.2.1. bin</h5><p>bin 目录主要是用来存放 tomcat 的命令文件，主要有两大类，一类是以.sh 结尾的（linux 命令），另一类是以.bat 结尾的（windows 命令）。</p><h5 id="3-2-2-conf"><a href="#3-2-2-conf" class="headerlink" title="3.2.2 conf"></a>3.2.2 conf</h5><p>conf目录主要是用来存放tomcat的一些配置文件。</p><h5 id="3-2-3-lib"><a href="#3-2-3-lib" class="headerlink" title="3.2.3 lib"></a>3.2.3 lib</h5><p>lib目录主要用来存放tomcat运行需要加载的jar包。</p><h5 id="3-2-4-logs"><a href="#3-2-4-logs" class="headerlink" title="3.2.4 logs"></a>3.2.4 logs</h5><p>logs 目录用来存放 tomcat 在运行过程中产生的日志文件。</p><h5 id="3-2-5-temp"><a href="#3-2-5-temp" class="headerlink" title="3.2.5 temp"></a>3.2.5 temp</h5><p>temp 目录用户存放 tomcat 在运行过程中产生的临时文件。（清空不会对 tomcat 运行带来影响） </p><h5 id="3-2-6-webapps"><a href="#3-2-6-webapps" class="headerlink" title="3.2.6 webapps"></a>3.2.6 webapps</h5><p>webapps 目录用来存放应用程序，当 tomcat 启动时会去加载 webapps 目录下的应用程序。可以以文件夹、war 包的形式发布应用。</p><h5 id="3-2-7-work"><a href="#3-2-7-work" class="headerlink" title="3.2.7 work"></a>3.2.7 work</h5><p>work 目录用来存放 tomcat 在运行时的编译后文件，例如 JSP 编译后的文件。</p><h4 id="3-3-Tocmat启动与关闭"><a href="#3-3-Tocmat启动与关闭" class="headerlink" title="3.3 Tocmat启动与关闭"></a>3.3 Tocmat启动与关闭</h4><p>Tomcat 的启动与关闭需要执行 bin 目录中的命令脚本。</p><h5 id="3-3-1-Tomcat启动"><a href="#3-3-1-Tomcat启动" class="headerlink" title="3.3.1 Tomcat启动"></a>3.3.1 Tomcat启动</h5><p>运行shutdown.bat文件</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313165733966.png" alt="image-20220313165733966"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313165751197.png" alt="image-20220313165751197"></p><h5 id="3-3-2-Tomcat关闭"><a href="#3-3-2-Tomcat关闭" class="headerlink" title="3.3.2 Tomcat关闭"></a>3.3.2 Tomcat关闭</h5><h6 id="3-3-2-1-方式一"><a href="#3-3-2-1-方式一" class="headerlink" title="3.3.2.1 方式一"></a>3.3.2.1 方式一</h6><p>运行 shutdown.bat 文件</p><h4 id=""><a href="#" class="headerlink" title=""></a><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313170053117.png" alt="image-20220313170053117"></h4><h6 id="3-3-2-2-方式二"><a href="#3-3-2-2-方式二" class="headerlink" title="3.3.2.2 方式二"></a>3.3.2.2 方式二</h6><p>直接关闭掉启动窗口</p><h5 id="3-3-3-访问Tomcat"><a href="#3-3-3-访问Tomcat" class="headerlink" title="3.3.3 访问Tomcat"></a>3.3.3 访问Tomcat</h5><p>访问 Tomcat 的 URL 格式：<a href="http://ip:port">http://ip:port</a> </p><p>访问本机 Tomcat 的 URL 格式：<a href="http://localhost:8080/">http://localhost:8080</a> </p><h4 id="3-4-Tomcat的配置"><a href="#3-4-Tomcat的配置" class="headerlink" title="3.4 Tomcat的配置"></a>3.4 Tomcat的配置</h4><h5 id="3-4-1-Tomcat配置文件介绍"><a href="#3-4-1-Tomcat配置文件介绍" class="headerlink" title="3.4.1 Tomcat配置文件介绍"></a>3.4.1 Tomcat配置文件介绍</h5><p>Tomcat 的配置文件由 4 个 xml 组成，分别是 ***<u>context.xml、web.xml、server.xml、tomcat-users.xml</u>***。每个文件都有自己的功能与配置方法。</p><h6 id="3-4-1-1-context-xml"><a href="#3-4-1-1-context-xml" class="headerlink" title="3.4.1.1 context.xml"></a>3.4.1.1 context.xml</h6><p>Context.xml 是 Tomcat 公用的环境配置。 Tomcat 服务器会定时去扫描这个文件。一旦发现文件被修改（时间戳改变了），就会自动重新加载这个文件，而不需要重启服务器 。</p><h6 id="3-4-1-2-web-xml"><a href="#3-4-1-2-web-xml" class="headerlink" title="3.4.1.2 web.xml"></a>3.4.1.2 web.xml</h6><p>Web 应用程序描述文件，都是关于是 Web 应用程序的配置文件。所有 Web 应用的web.xml 文件的父文件。 </p><h6 id="3-4-1-3-server-xml"><a href="#3-4-1-3-server-xml" class="headerlink" title="3.4.1.3 server.xml"></a>3.4.1.3 server.xml</h6><p>是 tomcat 服务器的核心配置文件，server.xml 的每一个元素都对应了 tomcat 中的一个组件，通过对 xml 中元素的配置，实现对 tomcat 中的各个组件和端口的配置。</p><h6 id="3-4-1-4-tomcat-users-xml"><a href="#3-4-1-4-tomcat-users-xml" class="headerlink" title="3.4.1.4  tomcat-users.xml"></a>3.4.1.4  tomcat-users.xml</h6><p>配置访问 Tomcat 的用户以及角色的配置文件。</p><h5 id="3-4-2-解决控制台乱码"><a href="#3-4-2-解决控制台乱码" class="headerlink" title="3.4.2 解决控制台乱码"></a>3.4.2 解决控制台乱码</h5><p>​控制台产生乱码的原因是在 Tomcat 在输出日志中使用的是 UTF-8 编码，而我们中文的Windows 操作系统使用的是 GBK 编码。由于编码格式不统一，所以出现了乱码。</p><p>解决方式：</p><p>修改 conf 目录中的 logging.properties 文件重新指定的编码方式。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313171532568.png" alt="image-20220313171532568"></p><p>java.util.logging.ConsoleHandler.encoding &#x3D; GBK</p><h5 id="3-4-3-修改Tomcat监听端口"><a href="#3-4-3-修改Tomcat监听端口" class="headerlink" title="3.4.3 修改Tomcat监听端口"></a>3.4.3 修改Tomcat监听端口</h5><p>​Tomcat 默认监听端口为 8080。可以通过修改 server.xml 文件来改变 Tomcat 的监听端口。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313172154788.png" alt="image-20220313172154788"></p><h5 id="3-4-4-配置Tomcat-Manager"><a href="#3-4-4-配置Tomcat-Manager" class="headerlink" title="3.4.4 配置Tomcat Manager"></a>3.4.4 配置Tomcat Manager</h5><h6 id="3-4-4-1-什么是-Tomcat-Manager"><a href="#3-4-4-1-什么是-Tomcat-Manager" class="headerlink" title="3.4.4.1 什么是 Tomcat Manager"></a><strong>3.4.4.1</strong> <strong>什么是</strong> <strong>Tomcat Manager</strong></h6><p>​Tomcat Manager 是 Tomcat 自带的、用于对 Tomcat 自身以及部署在 Tomcat 上的应用进行管理的 web 应用。默认情况下，Tomcat Manager 是处于禁用状态的。准确的说，TomcatManager 需要以用户角色进行登录并授权才能使用相应的功能，不过 Tomcat 并没有配置任 何默认的用户，因此我们需要先进行用户配置后才能使用 Tomcat Manager。</p><h6 id="3-4-4-2-配置-Tomcat-Manager-的访问用户"><a href="#3-4-4-2-配置-Tomcat-Manager-的访问用户" class="headerlink" title="3.4.4.2 配置 Tomcat Manager 的访问用户"></a><strong>3.4.4.2</strong> <strong>配置</strong> <strong>Tomcat Manager</strong> <strong>的访问用户</strong></h6><p>Tomcat Manager 中没有默认用户，我们需要在 tomcat-users.xml 文件配置。TomcatManager 的用户配置需要配置两个部分：角色配置、用户名及密码配置。   </p><p>Tomcat Manager中的角色分类</p><p>manager-gui 角色： </p><p>允许访问 HTML GUI 和状态页面(即 URL 路径为&#x2F;manager&#x2F;html&#x2F;*) </p><p>manager-script 角色： </p><p>允许访问文本界面和状态页面(即 URL 路径为&#x2F;manager&#x2F;text&#x2F;*) </p><p>manager-jmx 角色： </p><p>允许访问 JMX 代理和状态页面(即 URL 路径为&#x2F;manager&#x2F;jmxproxy&#x2F;*) </p><p>manager- status 角色： </p><p>仅允许访问状态页面(即 URL 路径为&#x2F;manager&#x2F;status&#x2F;*)</p><p>配置用户及角色：</p><role rolename ="admin-gui"/> <user username ="tomcat" password ="tomcat" role ="admin-gui" /><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313194601449.png" alt="image-20220313194601449"></p><h3 id="4-Tomcat版本说明"><a href="#4-Tomcat版本说明" class="headerlink" title="4. Tomcat版本说明"></a>4. Tomcat版本说明</h3><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313194715550.png" alt="image-20220313194715550"></p><h3 id="5-Tomcat工作原理"><a href="#5-Tomcat工作原理" class="headerlink" title="5.Tomcat工作原理"></a>5.Tomcat工作原理</h3><h4 id="5-1-Tomcat作用"><a href="#5-1-Tomcat作用" class="headerlink" title="5.1 Tomcat作用"></a>5.1 Tomcat作用</h4><p>​Tomcat是一个能处理请求并产生响应的应用程序。Tomcat实现了JavaEE平台下的一些技术规范，所以我们可以在Tomcat中运行我们所编写的Jsp、Servlet。</p><h4 id="5-2-Tomcat运行原理"><a href="#5-2-Tomcat运行原理" class="headerlink" title="5.2 Tomcat运行原理"></a>5.2 Tomcat运行原理</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313200449891.png" alt="image-20220313200449891"></p><h3 id="6-Tomcat架构讲解"><a href="#6-Tomcat架构讲解" class="headerlink" title="6. Tomcat架构讲解"></a>6. Tomcat架构讲解</h3><p>6.1 Tomcat架构图</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313200909572.png" alt="image-20220313200909572"></p><p>6.2 Tomcat组件</p><h5 id="6-2-1-Server组件"><a href="#6-2-1-Server组件" class="headerlink" title="6.2.1 Server组件"></a>6.2.1 Server组件</h5><p>​启动一个server实例（即一个JVM），它监听在8005端口以接受shutdown命令。Server的定义不能使用同一个端口，这意味着如果在同一个物理机上启动了多个Server实例，必须配置他们使用不同的端口。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>port: 接收 shutdown 指令的端口，默认为 8005；</p><p>shutdown：发往此 Server 用于实现关闭 tomcat 实例的命令字符串，默认为 SHUTDOWN；</p><h5 id="6-2-2-Service组件"><a href="#6-2-2-Service组件" class="headerlink" title="6.2.2 Service组件"></a>6.2.2 Service组件</h5><p>​Service 主要用于关联一个引擎和与此引擎相关的连接器，每个连接器通过一个特定的 端口和协议接收请求并将其转发至关联的引擎进行处理。困此，Service 要包含一个引擎、一个或多个连接器。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>name：此服务的名称，默认为 Catalina；</p><h5 id="6-2-3-Connector组件"><a href="#6-2-3-Connector组件" class="headerlink" title="6.2.3 Connector组件"></a>6.2.3 Connector组件</h5><p>支持处理不同请求的组件，一个引擎可以有一个或多个连接器，以适应多种请求方式。默认只开启了处理理 Http 协议的连接器。如果需要使用其他协议，需要在 Tomcat 中配置该协议的连接器。 </p><p>在 Tomcat 中连接器类型通常有 4 种： </p><ol><li><p>HTTP 连接器 </p></li><li><p>SSL 连接器 </p></li><li><p>AJP 1.3 连接器 </p></li><li><p>proxy 连接器</p></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8888&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span> <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>port：监听的端口 </p><p>protocol：连接器使用的协议，默认为 HTTP&#x2F;1.1; </p><p>connectionTimeout：等待客户端发送请求的超时时间，单位为毫秒; </p><p>redirectPort：如果某连接器支持的协议是 HTTP，当接收客户端发来的 HTTPS 请求时， </p><p>则转发至此属性定义的端口; </p><p>maxThreads：支持的最大并发连接数，默认为 200 个;</p><h5 id="6-2-4-Engine组件"><a href="#6-2-4-Engine组件" class="headerlink" title="6.2.4 Engine组件"></a>6.2.4 Engine组件</h5><p>​Engine 是 Servlet 处理器的一个实例，即 servlet 引擎，定义在 server.xml 中的 Service标记中。Engine 需要 defaultHost 属性来为其定义一个接收所有发往非明确定义虚拟主机的请求的 host 组件。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>name:Engine组件的名称；</p><p>defaultHost：Tomcat 支持基于 FQDN(Fully Qualified Domain Name 全限定域名)的虚拟主 机，这些虚拟主机可以通过在 Engine 容器中定义多个不同的 Host 组件来实现；但如果此引 擎的连接器收到一个发往非非明确定义虚拟主机的请求时则需要将此请求发往一个默认的 虚拟主机进行处理，因此，在 Engine 中定义的多个虚拟主机的主机名称中至少要有一个跟 defaultHost 定义的主机名称同名；</p><h5 id="6-2-5-Host组件"><a href="#6-2-5-Host组件" class="headerlink" title="6.2.5 Host组件"></a>6.2.5 Host组件</h5><p>​位于 Engine 容器中用于接收请求并进行相应处理的虚拟主机。通过该容器可以运行 Servlet 或者 JSP 来处理请求。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>name：虚拟主机的名称，Tomcat 通过在请求 URL 中的域名与 name 中的值匹配，用于查找能够处理该请求的虚拟主机。如果未找到则交给在 Engine 中 defaultHost 指定的主机处理；</p><p>appBase：此 Host 的 webapps 目录，即指定存放 web 应用程序的目录的路径； </p><p>autoDeploy：在 Tomcat 处于运行状态时放置于 appBase 目录中的应用程序文件是否自 动进行 deploy；默认为 true； </p><p>unpackWARs：在启用此 webapps 时是否对 WAR 格式的归档文件先进行展开；默认为 true； </p><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5><h5 id="6-2-6-Context组件"><a href="#6-2-6-Context组件" class="headerlink" title="6.2.6 Context组件"></a>6.2.6 Context组件</h5><p>Context是Host的子标签，代表指定一个Web应用，它运行在某个指定的虚拟主机（Host）上；每个 Web 应用都是一个 WAR 文件，或文件的目录；</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/test&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;D:\bjsxt\itbaizhan.war&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>path：context path 既浏览器访问项目的访问路径。 </p><p>docBase：相应的 Web 应用程序的存放位置；也可以使用相对路径，起始路径为此 Context所属 Host 中 appBase 定义的路径；</p><h4 id="6-3-Tomcat处理请求过程"><a href="#6-3-Tomcat处理请求过程" class="headerlink" title="6.3  Tomcat处理请求过程"></a>6.3  Tomcat处理请求过程</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313204000523.png" alt="image-20220313204000523"></p><p>1、用户访问 localhost:8080&#x2F;test&#x2F;index.jsp，请求被发送到 Tomcat，被监听 8080 端口并处理 HTTP&#x2F;1.1 协议的 Connector 获得。 </p><p>2、Connector 把该请求交给它所在的 Service 的 Engine 来处理，并等待 Engine 的回应。 </p><p>3、Engine 获得请求 localhost&#x2F;test&#x2F;index.jsp，匹配所有的虚拟主机 Host。 </p><p>4、Engine 匹配到名为 localhost 的 Host 虚拟主机来处理&#x2F;test&#x2F;index.jsp 请求（即使匹配 </p><p>不到会请求交给默认 Host 处理），Host 会根据&#x2F;test 匹配它所拥有的所有的 Context。 </p><p>5、匹配到的 Context 获得请求&#x2F;index.jsp。</p><p>6、构造 HttpServletRequest 对象和 HttpServletResponse 对象，作为参数调用 JspServlet 的 doGet（）或 doPost（) 执行业务逻辑、数据存储等程序。 </p><p>7、Context 把执行完之后的结果通过 HttpServletResponse 对象返回给 Host。 </p><p>8、Host 把 HttpServletResponse 返回给 Engine。 </p><p>9、Engine 把 HttpServletResponse 对象返回 Connector。 </p><p>10、Connector 把 HttpServletResponse 对象返回给客户 Browser。</p><h2 id="四、-Servlet技术详解"><a href="#四、-Servlet技术详解" class="headerlink" title="四、 Servlet技术详解"></a>四、 Servlet技术详解</h2><p>Servlet4.0</p><h3 id="1-创建第一个Servlet案例"><a href="#1-创建第一个Servlet案例" class="headerlink" title="1.创建第一个Servlet案例"></a>1.创建第一个Servlet案例</h3><h4 id="1-1-创建Servlet"><a href="#1-1-创建Servlet" class="headerlink" title="1.1 创建Servlet"></a>1.1 创建Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt; </span><br><span class="line"><span class="keyword">import</span> java.io.IOException; </span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter; <span class="keyword">import</span> javax.servlet.ServletException; </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet; </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest; </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloWorld</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123; </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException &#123; </span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter(); </span><br><span class="line">out .println(<span class="string">&quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot;&gt;&quot;</span>); </span><br><span class="line">out.println(<span class="string">&quot;&lt;HTML&gt;&quot;</span>); </span><br><span class="line">out.println(<span class="string">&quot; &lt;HEAD&gt;&lt;TITLE&gt;A Servlet&lt;/TITLE&gt;&lt;/HEAD&gt;&quot;</span>); out.println(<span class="string">&quot; &lt;BODY&gt;&quot;</span>); </span><br><span class="line">out.println(<span class="string">&quot;&lt;font color=blue&gt;Hello World&lt;/font&gt;&quot;</span>); out.println(<span class="string">&quot; &lt;/BODY&gt;&quot;</span>); </span><br><span class="line">out.println(<span class="string">&quot;&lt;/HTML&gt;&quot;</span>); </span><br><span class="line">out.flush(); </span><br><span class="line">out.close(); &#125; &#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-编译Servlet"><a href="#1-2-编译Servlet" class="headerlink" title="1.2 编译Servlet"></a>1.2 编译Servlet</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E:\&gt;javac -classpath &quot;E:\Tomcat\apache-tomcat-9.0.34\lib\servlet-api.jar&quot; HelloWorld.java</span><br></pre></td></tr></table></figure><h4 id="1-3-创建web-xml"><a href="#1-3-创建web-xml" class="headerlink" title="1.3 创建web.xml"></a>1.3 创建web.xml</h4><h5 id="1-3-1-什么是web-xml"><a href="#1-3-1-什么是web-xml" class="headerlink" title="1.3.1 什么是web.xml"></a>1.3.1 什么是web.xml</h5><p>项目的部署描述文件，是 JavaWeb 工程的配置文件，通过 web.xml 文件可以配置 servlet、filter 等技术。Tomcat 启动时会先解析该配置文件获取项目的配置信息。</p><h5 id="1-3-2-web-xml-文件中的头信息"><a href="#1-3-2-web-xml-文件中的头信息" class="headerlink" title="1.3.2 web.xml 文件中的头信息"></a><strong>1.3.2 web.xml</strong> <strong>文件中的头信息</strong></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> <span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="1-3-3-在-web-xml-文件中配置-Servlet"><a href="#1-3-3-在-web-xml-文件中配置-Servlet" class="headerlink" title="1.3.3 在 web.xml 文件中配置 Servlet"></a><strong>1.3.3</strong> <strong>在</strong> <strong>web.xml</strong> <strong>文件中配置</strong> <strong>Servlet</strong></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span> <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjsxt.servlet.HelloWorld<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/helloworld.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-4-部署Servlet"><a href="#1-4-部署Servlet" class="headerlink" title="1.4 部署Servlet"></a>1.4 部署Servlet</h4><h5 id="1-4-1-Web工程目录结构"><a href="#1-4-1-Web工程目录结构" class="headerlink" title="1.4.1 Web工程目录结构"></a>1.4.1 Web工程目录结构</h5><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313222456335.png" alt="image-20220313222456335"></p><h4 id="1-5-访问Servlet"><a href="#1-5-访问Servlet" class="headerlink" title="1.5 访问Servlet"></a>1.5 访问Servlet</h4><p><a href="http://localhost:8888/servletdemo/hello">http://localhost:8888/servletdemo/hello</a></p><h4 id="1-6-访问资源测试结果"><a href="#1-6-访问资源测试结果" class="headerlink" title="1.6 访问资源测试结果"></a>1.6 访问资源测试结果</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313222618934.png" alt="image-20220313222618934"></p><h3 id="2-Servlet继承结构"><a href="#2-Servlet继承结构" class="headerlink" title="2. Servlet继承结构"></a>2. Servlet继承结构</h3><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313222711601.png" alt="image-20220313222711601"></p><h4 id="2-1-Servlet接口"><a href="#2-1-Servlet接口" class="headerlink" title="2.1 Servlet接口"></a>2.1 Servlet接口</h4><p>1.init()，创建 Servlet 对象后立即调用该方法完成其他初始化工作。 </p><p>2.service()，处理客户端请求，执行业务操作，利用响应对象响应客户端请求。 </p><p>3.destroy()，在销毁 Servlet 对象之前调用该方法，释放资源。 </p><p>4.getServletConfig()，ServletConfig 是容器向 servlet 传递参数的载体。 </p><p>5.getServletInfo()，获取 servlet 相关信息。</p><p>2.2 ServletConfig 接口</p><p>Servlet 运行期间，需要一些辅助信息，这些信息可以在 web.xml 文件中，使用一个或多 </p><p>个元素，进行配置。当 Tomcat 初始化一个 Servlet 时，会将该 Servlet 的配置信息，封装到 </p><p>一个 ServletConfig 对象中，通过调用 init(ServletConfig config)方法，将 ServletConfig 对称传递给 Servlet</p><h4 id="2-3-GenericServlet是个抽象类"><a href="#2-3-GenericServlet是个抽象类" class="headerlink" title="2.3 GenericServlet是个抽象类"></a>2.3 GenericServlet是个抽象类</h4><p>GenericServlet 是实现了 Servlet 接口的抽象类。在 GenericServlet 中进一步的定义了Servlet 接口的具体实现，其设计的目的是为了和应用层协议解耦，在 GenericServlet 中包含 一个 Service 抽象方法。我们也可以通过继承 GenericServlet 并实现 Service 方法实现请求的处理 ， 但 是 需 要 将 ServletReuqest 和 ServletResponse 转 为 HttpServletRequest 和HttpServletResponse。</p><h4 id="2-4-HttpServlet类"><a href="#2-4-HttpServlet类" class="headerlink" title="2.4 HttpServlet类"></a>2.4 HttpServlet类</h4><p>继承自 GenericServlet. 针对于处理 HTTP 协议的请求所定制。在 HttpServlet 的 service() 方法中已经把 ServletReuqest 和 ServletResponse转为 HttpServletRequest 和HttpServletResponse。 直接使用 HttpServletRequest 和 HttpServletResponse, 不再需要强 转。实际开发中, 直接继承 HttpServlet, 并根据请求方式复写 doXxx() 方法即可。</p><h3 id="3-Servlet的生命周期"><a href="#3-Servlet的生命周期" class="headerlink" title="3.Servlet的生命周期"></a>3.Servlet的生命周期</h3><p>Servlet的生命周期是由容器管理的，分别经历三个阶段：</p><p>init():初始化</p><p>service():服务</p><p>destroy():销毁</p><p>当客户端浏览器第一次请求 Servlet 时，容器会实例化这个 Servlet，然后调用一次 init </p><p>方法，并在新的线程中执行 service 方法处理请求。service 方法执行完毕后容器不会销毁这 </p><p>个 Servlet 而是做缓存处理，当客户端浏览器再次请求这个 Servlet 时，容器会从缓存中直接 </p><p>找到这个 Servlet 对象，并再一次在新的线程中执行 Service 方法。当容器在销毁 Servlet 之 </p><p>前对调用一次 destroy 方法。</p><h3 id="4-Servlet处理请求的原理"><a href="#4-Servlet处理请求的原理" class="headerlink" title="4. Servlet处理请求的原理"></a>4. Servlet处理请求的原理</h3><p>当浏览器基于 get 方式请求我们创建 Servlet 时，我们自定义的 Servlet 中的 doGet 方法 会被执行。doGet 方法能够被执行并处理 get 请求的原因是，容器在启动时会解析 web 工程 中 WEB-INF 目录中的 web.xml 文件，在该文件中我们配置了 Servlet 与 URI 的绑定，容器通 过对请求的解析可以获取请求资源的 URI，然后找到与该 URI 绑定的 Servlet 并做实例化处理 (注意：只实例化一次，如果在缓存中能够找到这个 Servlet 就不会再做次实例化处理)。在实 例化时会使用 Servlet 接口类型作为引用类型的定义，并调用一次 init 方法，由于 HttpServlet 中重写了该方法所以最终执行的是 HttpServlet 中 init 方法(HttpServlet 中的 Init 方法是一个空 的方法体)，然后在新的线程中调用 service 方法。由于在 HttpServlet 中重写了 Service 方法 所以最终执行的是 HttpServlet 中的 service 方法。在 service 方法中通过 request.getMethod()获取到请求方式进行判断如果是 Get 方式请求就执行 doGet 方法，如果是 POST 请求就执行 doPost 方法。如果是基于 GET 方式提交的，并且在我们自定义的 Servlet 中又重写了HttpServlet 中的 doGet 方法，那么最终会根据 Java 的多态特性转而执行我们自定义的 Servlet 中的 doGet 方法。</p><h3 id="5-Servlet的使用"><a href="#5-Servlet的使用" class="headerlink" title="5. Servlet的使用"></a>5. Servlet的使用</h3><h4 id="5-1-Servlet的作用"><a href="#5-1-Servlet的作用" class="headerlink" title="5.1  Servlet的作用"></a>5.1  Servlet的作用</h4><p> 获取用户提交的数据 </p><p> 获取浏览器附加的信息 </p><p> 处理数据（访问数据库或调用接口） </p><p> 给浏览器产生一个响应 </p><p> 在响应中添加附加信息</p><h3 id="6-在Idea中开发Servlet"><a href="#6-在Idea中开发Servlet" class="headerlink" title="6 在Idea中开发Servlet"></a>6 在Idea中开发Servlet</h3><h4 id="6-1-在Idea中创建Web工程"><a href="#6-1-在Idea中创建Web工程" class="headerlink" title="6.1 在Idea中创建Web工程"></a>6.1 在Idea中创建Web工程</h4><h5 id="6-1-1-创建项目"><a href="#6-1-1-创建项目" class="headerlink" title="6.1.1  创建项目"></a>6.1.1  创建项目</h5><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313224811380.png" alt="image-20220313224811380"></p><h5 id="6-1-2-创建Web工程"><a href="#6-1-2-创建Web工程" class="headerlink" title="6.1.2  创建Web工程"></a>6.1.2  创建Web工程</h5><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313224836126.png" alt="image-20220313224836126"></p><h4 id="-2"><a href="#-2" class="headerlink" title=""></a></h4><h5 id="6-1-3-Web工程结构"><a href="#6-1-3-Web工程结构" class="headerlink" title="6.1.3  Web工程结构"></a>6.1.3  Web工程结构</h5><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313224902666.png" alt="image-20220313224902666"></p><h5 id="6-1-4-为项目添加servlet-api-jar"><a href="#6-1-4-为项目添加servlet-api-jar" class="headerlink" title="6.1.4  为项目添加servlet-api.jar"></a>6.1.4  为项目添加servlet-api.jar</h5><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313225003765.png" alt="image-20220313225003765"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313225015397.png" alt="image-20220313225015397"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313225023943.png" alt="image-20220313225023943"></p><h5 id="6-1-5-在Idea中配置Tomcat"><a href="#6-1-5-在Idea中配置Tomcat" class="headerlink" title="6.1.5  在Idea中配置Tomcat"></a>6.1.5  在Idea中配置Tomcat</h5><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313225119309.png" alt="image-20220313225119309"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313225619581.png" alt="image-20220313225619581"></p><h5 id="6-1-6-修改项目的访问路径（Content-Path）"><a href="#6-1-6-修改项目的访问路径（Content-Path）" class="headerlink" title="6.1.6  修改项目的访问路径（Content Path）"></a>6.1.6  修改项目的访问路径（Content Path）</h5><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230126572.png" alt="image-20220313230126572"></p><h4 id="6-2-Idea中的web项目部署"><a href="#6-2-Idea中的web项目部署" class="headerlink" title="6.2  Idea中的web项目部署"></a>6.2  Idea中的web项目部署</h4><p>在 Idea 中默认的并不会把 web 项目真正的部署到 Tomcat 的 webapps 目录中，而是通过为每个 web 项目创建一个独立的 Tomcat 副本并在 Tomcat 副本中通过的 Tomcat 的 Context 组件完成项目的目录指定，在 Context 组件的 docBase 属性中会指定 Idea 对 web 项目编译后 的目录 out&#x2F;artifacts&#x2F;…..。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230221944.png" alt="image-20220313230221944"></p><h5 id="6-2-1-默认部署方式"><a href="#6-2-1-默认部署方式" class="headerlink" title="6.2.1  默认部署方式"></a>6.2.1  默认部署方式</h5><p>Idea 会在 C:\Users\Administrator.IntelliJIdea2019.2\system\tomcat 中为每个 Web 项目创 建一个独立的 Tomcat 副本。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230409273.png" alt="image-20220313230409273"></p><p>C:\Users\Administrator.IntelliJIdea2019.2\system\tomcat\Tomcat_9_0_34_demo_4\conf\Catalina\localhost 目录中生成一个该项目的 xml 文件名称为：”项目名.xml”。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230434204.png" alt="image-20220313230434204"></p><p>在 xml 文件中指定 web 项目编译完后的 artifacts 目录的位置。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230453506.png" alt="image-20220313230453506"></p><p>Idea 通过执行 Tomcat 的 catalina.bat 启动脚本启动 Tomcat，通过启动参数来指定启动 </p><p>Tomcat 副本运行指定目录中的 web 项目</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230516736.png" alt="image-20220313230516736"></p><p>Idaa 在启动 Tomcat 之前会先在操作系统中设置一些临时环境变量，这些变量会被 </p><p>Tomcat 的启动脚本所读取。 </p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230548922.png" alt="image-20220313230548922"></p><p>CATALINA_BASE：是 Tomcat 副本的工作目录 </p><p>CATALINA_HOME：是 Tomcat 的安装目录</p><p>在 Catalina.bat 启 动 脚 本 运 行 时 ， 会 先 去 判 断 脚 本 中 的 CATALINA_HOME 以 及 CATALINA_BASE 是否有默认值，如果没有则直接读取系统环境变量中的值作为他们的默认 值。由于 Idea 在启动 Tomcat 之前已经设置了临时环境变量，所以 tomcat 在启动后就会运 行部署在 Tomcat 副本中的 web 项目。</p><h5 id="6-2-2-将web项目部署到Tomcat的webapps中"><a href="#6-2-2-将web项目部署到Tomcat的webapps中" class="headerlink" title="6.2.2 将web项目部署到Tomcat的webapps中"></a>6.2.2 将web项目部署到Tomcat的webapps中</h5><p>点击项目结构选项，指定输出 artifacts 的目录为 Tomcat 的 webapps 中的 demo 目录。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230816895.png" alt="image-20220313230816895"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230828870.png" alt="image-20220313230828870"></p><p>启动 Tomcat，查看 demo 目录中的内容。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230842633.png" alt="image-20220313230842633"></p><p>在 tomcat 的 webapps 中创建一个目录。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220313230858627.png" alt="image-20220313230858627"></p><h3 id="7-HttpServletRequest-对象"><a href="#7-HttpServletRequest-对象" class="headerlink" title="7.  HttpServletRequest 对象"></a>7.  <strong>HttpServletRequest</strong> <strong>对象</strong></h3><p>HttpServletRequest 对象代表客户端浏览器的请求，当客户端浏览器通过 HTTP 协议访问服务器时，HTTP 请求中的所有信息都会被 Tomcat 所解析并封装在这个对象中，通过这个对 象提供的方法，可以获得客户端请求的所有信息。 </p><h4 id="7-1-获取请求信息"><a href="#7-1-获取请求信息" class="headerlink" title="7.1 获取请求信息"></a>7.1 获取请求信息</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo1.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">requestURL</span> <span class="operator">=</span> req.getRequestURL();</span><br><span class="line">        <span class="comment">//返回客户端浏览器发出请求时的完整URL</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> req.getRequestURI();</span><br><span class="line">        <span class="comment">//返回请求行中指定资源部分</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> req.getRemoteAddr();</span><br><span class="line">        <span class="comment">//返回发出请求的客户机的IP地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">localAddr</span> <span class="operator">=</span> req.getLocalAddr();</span><br><span class="line">        <span class="comment">// 返回Web服务器的IP地址</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">localPort</span> <span class="operator">=</span> req.getLocalPort();</span><br><span class="line">        <span class="comment">//返回WEB服务器处理Http协议的连接器所监听的端口</span></span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;HTML&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot; &lt;HEAD&gt;&lt;TITLE&gt;itbz&lt;/TITLE&gt;&lt;/HEAD&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot; &lt;BODY&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt;&quot;</span>+requestURL+<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt;&quot;</span>+requestURI+<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt;&quot;</span>+remoteAddr+<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt;&quot;</span>+localAddr+<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;br&gt;&quot;</span>+localPort+<span class="string">&quot;&lt;/br&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">        out.println(<span class="string">&quot; &lt;/BODY&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/HTML&gt;&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-2-获取请求数据"><a href="#7-2-获取请求数据" class="headerlink" title="7.2 获取请求数据"></a>7.2 获取请求数据</h4><h5 id="7-2-1-在Servlet获取请求数据的方式"><a href="#7-2-1-在Servlet获取请求数据的方式" class="headerlink" title="7.2.1 在Servlet获取请求数据的方式"></a>7.2.1 在Servlet获取请求数据的方式</h5><p>req.getParameter(“key”)</p><p>根据key获取指定value，返回一个字符串</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;key&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo2.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;A&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;B&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ok&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取请求数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="comment">//获取用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userwpd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;USerName&quot;</span>+username);</span><br><span class="line">        out.println(<span class="string">&quot;USerPwd&quot;</span>+userwpd);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-2-2-获取复选框-checkbox组件-中的值"><a href="#7-2-2-获取复选框-checkbox组件-中的值" class="headerlink" title="7.2.2 获取复选框(checkbox组件)中的值"></a>7.2.2 获取复选框(checkbox组件)中的值</h5><p>req.getParameterValues(“checkboxkey”)</p><p>获取复选框(checkbox 组件)中的值，返回一个 String[]。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] userlikes = req.getParameterValues(<span class="string">&quot;checkboxkey&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取请求数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="comment">//获取用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userwpd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        <span class="comment">//获取复选框的值域</span></span><br><span class="line">        String[] userlikes = req.getParameterValues(<span class="string">&quot;userlike&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(userlikes);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;USerName&quot;</span>+username);</span><br><span class="line">        out.println(<span class="string">&quot;USerPwd&quot;</span>+userwpd);</span><br><span class="line">        out.println(<span class="string">&quot;UserLike&quot;</span>+list);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo2.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;A&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;B&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sport&quot;</span>&gt;</span>体育<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>音乐<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>音乐<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ok&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-2-3-获取所有提交数据的-key"><a href="#7-2-3-获取所有提交数据的-key" class="headerlink" title="7.2.3 获取所有提交数据的 key"></a><strong>7.2.3</strong> <strong>获取所有提交数据的</strong> <strong>key</strong></h5><p>req.getParameterNames() </p><p>获取请求中所有数据的 key，该方法返回一个枚举类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;String&gt; parameterNames = req.getParameterNames(); </span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取请求数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="comment">//获取用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userwpd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取复选框的值域</span></span><br><span class="line">        String[] userlikes = req.getParameterValues(<span class="string">&quot;userlike&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(userlikes);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取表单中的所有的key</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = req.getParameterNames();</span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            list1.add(parameterNames.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;USerName&quot;</span>+username);</span><br><span class="line">        out.println(<span class="string">&quot;USerPwd&quot;</span>+userwpd);</span><br><span class="line">        out.println(<span class="string">&quot;UserLike&quot;</span>+list);</span><br><span class="line">        out.println(<span class="string">&quot;Names&quot;</span>+list1);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo2.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;A&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;B&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sport&quot;</span>&gt;</span>体育<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>音乐<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>音乐<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ok&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-2-4-使用-Map-结构获取提交数据"><a href="#7-2-4-使用-Map-结构获取提交数据" class="headerlink" title="7.2.4 使用 Map 结构获取提交数据"></a><strong>7.2.4</strong> <strong>使用</strong> <strong>Map</strong> <strong>结构获取提交数据</strong></h5><p>req.getParameterMap()</p><p>获取请求中所有的数据并存放到一个 Map 结构中，该方法返回一个 Map，其中 key 为 String 类型 value 为 String[]类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取请求数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">        <span class="comment">//获取用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userwpd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取复选框的值域</span></span><br><span class="line">        String[] userlikes = req.getParameterValues(<span class="string">&quot;userlike&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(userlikes);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取表单中的所有的key</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = req.getParameterNames();</span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            list1.add(parameterNames.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Map结构获取表单提交所有的数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,String[]&gt;&gt; iterator = parameterMap.entrySet().iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;USerName&quot;</span>+username);</span><br><span class="line">        out.println(<span class="string">&quot;USerPwd&quot;</span>+userwpd);</span><br><span class="line">        out.println(<span class="string">&quot;UserLike&quot;</span>+list);</span><br><span class="line">        out.println(<span class="string">&quot;Names&quot;</span>+list1);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            Map.Entry&lt;String,String[]&gt; entry = iterator.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            String[] value = entry.getValue();</span><br><span class="line">            out.println(key+<span class="string">&quot;=&quot;</span>+Arrays.asList(value));</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo2.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;A&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;B&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    用户爱好：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sport&quot;</span>&gt;</span>体育<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>音乐<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">name</span>=<span class="string">&quot;userlike&quot;</span> <span class="attr">value</span>=<span class="string">&quot;music&quot;</span>&gt;</span>音乐<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;ok&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h4 id="7-3-设置请求编码"><a href="#7-3-设置请求编码" class="headerlink" title="7.3 设置请求编码"></a>7.3 设置请求编码</h4><p>req.setCharacterEncoding(“utf-8”)</p><p>​       请求的数据包基于字节在网络上传输，Tomcat 接收到请求的数据包后会将数据包中的 </p><p>字节转换为字符。在 Tomcat 中使用的是 <strong>ISO-8859-1</strong> 的单字节编码完成字节与字符的转换， </p><p>所以数据中含有中文就会出现乱码，可以通过 req.setCharacterEncoding(“utf-8”)方法来对提 </p><p>交的数据根据指定的编码方式重新做编码处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取请求数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo2.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo2</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置请求编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取用户名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"><span class="comment">//        String name = new String(username.getBytes(&quot;ISO-8859-1&quot;),&quot;UTF-8&quot;);</span></span><br><span class="line"><span class="comment">//        System.out.println(name);</span></span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="comment">//是解决请求当中的乱码，而不是解决响应当中的乱码</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取用户密码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userwpd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取复选框的值域</span></span><br><span class="line">        String[] userlikes = req.getParameterValues(<span class="string">&quot;userlike&quot;</span>);</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(userlikes);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取表单中的所有的key</span></span><br><span class="line">        Enumeration&lt;String&gt; parameterNames = req.getParameterNames();</span><br><span class="line">        List&lt;String&gt; list1 = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> (parameterNames.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            list1.add(parameterNames.nextElement());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用Map结构获取表单提交所有的数据</span></span><br><span class="line">        Map&lt;String, String[]&gt; parameterMap = req.getParameterMap();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;String,String[]&gt;&gt; iterator = parameterMap.entrySet().iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;USerName&quot;</span>+username);</span><br><span class="line">        out.println(<span class="string">&quot;USerPwd&quot;</span>+userwpd);</span><br><span class="line">        out.println(<span class="string">&quot;UserLike&quot;</span>+list);</span><br><span class="line">        out.println(<span class="string">&quot;Names&quot;</span>+list1);</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())</span><br><span class="line">        &#123;</span><br><span class="line">            Map.Entry&lt;String,String[]&gt; entry = iterator.next();</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line">            String[] value = entry.getValue();</span><br><span class="line">            out.println(key+<span class="string">&quot;=&quot;</span>+Arrays.asList(value));</span><br><span class="line">        &#125;</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="7-4-资源访问方式"><a href="#7-4-资源访问方式" class="headerlink" title="7.4 资源访问方式"></a>7.4 资源访问方式</h4><h5 id="7-4-1-绝对路径"><a href="#7-4-1-绝对路径" class="headerlink" title="7.4.1 绝对路径"></a>7.4.1 绝对路径</h5><p>绝对路径访问资源表示示直接以”&#x2F;”作为项目的 Content Path。该方式适用于以”&#x2F;”作为项目 </p><p>的 Content Path。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/getInfo.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="7-4-2-相对路径"><a href="#7-4-2-相对路径" class="headerlink" title="7.4.2 相对路径"></a>7.4.2 相对路径</h5><p>相对路径访问资源表示会相对于项目的 Content Path 作为相对路径。该方式适用于为项 </p><p>目指定的具体的 Content Path。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;getInfo.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220320211959965.png" alt="image-20220320211959965"></p><p>上面红箭头所指示的就是Content Path</p><h4 id="7-5-获取请求头信息"><a href="#7-5-获取请求头信息" class="headerlink" title="7.5 获取请求头信息"></a>7.5 获取请求头信息</h4><h5 id="7-5-1-获取请求头信息"><a href="#7-5-1-获取请求头信息" class="headerlink" title="7.5.1 获取请求头信息"></a>7.5.1 获取请求头信息</h5><p>req.getHeader(“headerKey”)</p><p>根据请求头中的 key 获取对应的 value。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">headerValue</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;headerKey&quot;</span>);</span><br></pre></td></tr></table></figure><p>req.getHeaderNames() </p><p>获取请求头中所有的 key，该方法返回枚举类型。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Enumeration&lt;String&gt; headerNames = req.getHeaderNames();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取请求头信息</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo3.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取指定的key获取请求头信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;Accept-Encoding&quot;</span>);</span><br><span class="line">        <span class="comment">//获取请求头中的所有数据</span></span><br><span class="line">        Enumeration&lt;String&gt; headerNames = req.getHeaderNames();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Header Info-Accept-Encoding: &quot;</span>+header);</span><br><span class="line">        <span class="keyword">while</span> (headerNames.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> headerNames.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> req.getHeader(key);</span><br><span class="line">            pw.println(key+<span class="string">&quot;: &quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="7-5-2-获取请求头案例"><a href="#7-5-2-获取请求头案例" class="headerlink" title="7.5.2 获取请求头案例"></a>7.5.2 获取请求头案例</h5><p>需求：编写一个 Servlet，如果浏览器的语言是 zh-CN，显示“你好，聪明的中国人！”， 如果浏览器的语言设置为 en-US,那么则显示“Hello，American”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo4.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo4</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;Accept-Language&quot;</span>);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">if</span> (header.startsWith(<span class="string">&quot;zh-CN&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            printWriter.println(<span class="string">&quot;你好,聪明的中国人！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (header.startsWith(<span class="string">&quot;en-US&quot;</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            printWriter.println(<span class="string">&quot;hello,dog&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;无法识别&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="7-6HttpServletRequest对象的生命周期"><a href="#7-6HttpServletRequest对象的生命周期" class="headerlink" title="7.6HttpServletRequest对象的生命周期"></a>7.6HttpServletRequest对象的生命周期</h4><p>当有请求到达 Tomcat 时，Tomcat 会创建 HttpServletRequest 对象，并将该对象通过参数的方式传递到我们 Servlet 的方法中，当处理请求处理完毕并产生响应后该对象生命周期结束</p><h3 id="8-HttpServletResponse-对象"><a href="#8-HttpServletResponse-对象" class="headerlink" title="8   HttpServletResponse 对象"></a>8   <strong>HttpServletResponse</strong> <strong>对象</strong></h3><p>HttpServletResponse 对象代表服务器的响应。这个对象中封装了响应客户端浏览器的流对象，以及向客户端浏览器响应的响应头、响应数据、响应状态码等信息。</p><h4 id="8-1-设置响应类型"><a href="#8-1-设置响应类型" class="headerlink" title="8.1 设置响应类型"></a>8.1 设置响应类型</h4><p>resp.setContentType(“MIME”) </p><p>该方法可通过 MIME-Type 设置响应类型。<img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220321081439345.png" alt="image-20220321081439345"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220321081445911.png" alt="image-20220321081445911"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220321081452979.png" alt="image-20220321081452979"></p><h5 id="8-1-1-设置字符型响应"><a href="#8-1-1-设置字符型响应" class="headerlink" title="8.1.1 设置字符型响应"></a>8.1.1 设置字符型响应</h5><p>常见的字符型响应类型:</p><p>resp.setContentType(“text&#x2F;html”)</p><p>设置响应类型为文本型，内容含有html字符串，是默认的响应类型</p><p>resp.setContentType(“text&#x2F;plain”)</p><p>设置响应类型为文本型，内容是普通文本。</p><p>resp.setContentType(“application&#x2F;json”) </p><p>设置响应类型为 JSON 格式的字符串。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置字符响应类型</span></span><br><span class="line">        <span class="comment">//响应文本类型</span></span><br><span class="line"><span class="comment">//        resp.setContentType(&quot;text/plain&quot;);</span></span><br><span class="line">        <span class="comment">//默认的响应类型</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;&lt;!DOCTYPE HTML PUBLIC \&quot;-//W3C//DTD HTML 4.01 Transitional//EN\&quot;&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;HTML&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot; &lt;HEAD&gt;&lt;TITLE&gt;itbz&lt;/TITLE&gt;&lt;/HEAD&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot; &lt;BODY&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;font color=blue&gt;HelloWorld&lt;/font&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot; &lt;/BODY&gt;&quot;</span>);</span><br><span class="line">        out.println(<span class="string">&quot;&lt;/HTML&gt;&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-1-2-设置字节型响应"><a href="#8-1-2-设置字节型响应" class="headerlink" title="8.1.2 设置字节型响应"></a>8.1.2 设置字节型响应</h5><p>常见的字节型响应： </p><p>resp.setContentType(“image&#x2F;jpeg”) </p><p>设置响应类型为图片类型，图片类型为 jpeg 或 jpg 格式。</p><p>resp.setContentType(“image&#x2F;gif”) </p><p>设置响应类型为图片类型，图片类型为 gif 格式。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//设置字节型相应</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo6.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo6</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//给定读取响应的图片的路径</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/尚学堂.jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//创建读取图片的IO流对象</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//图片缓冲区</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        is.read(buff);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应类型</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;image/jpg&quot;</span>);</span><br><span class="line">        <span class="comment">//获取字节输出流对象</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        outputStream.write(buff);</span><br><span class="line">        outputStream.flush();</span><br><span class="line">        outputStream.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="8-2-设置响应编码"><a href="#8-2-设置响应编码" class="headerlink" title="8.2 设置响应编码"></a>8.2 设置响应编码</h4><p>response.setCharacterEncoding(“utf-8”); </p><p>设置服务端为浏览器产生响应的响应编码，服务端会根据此编码将响应内容的字符转换为字节。</p><p>当浏览器的显示编码方式不是UTF-8的时候，就会看到乱码，需要手动指定浏览器编码。</p><p>response.setContentType(“text&#x2F;html;charset&#x3D;utf-8”); </p><p>设置服务端为浏览器产生响应的响应编码，服务端会根据此编码将响应内容的字符转换为字节。同时客户端浏览器会根据此编码方式显示响应内容。</p><h4 id="8-3-在响应中添加附加信息"><a href="#8-3-在响应中添加附加信息" class="headerlink" title="8.3 在响应中添加附加信息"></a>8.3 在响应中添加附加信息</h4><h5 id="8-3-1-重定向响应"><a href="#8-3-1-重定向响应" class="headerlink" title="8.3.1 重定向响应"></a>8.3.1 重定向响应</h5><p>response.sendRedirect(URL地址)</p><p>重定向响应会在响应头中添加一个 Location 的 key 对应的 value 是给定的 URL。客户端浏览器在解析响应头后自动向 Location 中的 URL 发送请求。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220321084334294.png" alt="image-20220321084334294"></p><p>重定向响应特点： </p><p><strong>重定向会产生两次请求两次响应。</strong> </p><p><strong>重定向的 URL 是由客户端浏览器发送的</strong></p><p><strong>浏览器的地址名会有变化</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c重定向响应</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo7.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo7</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//产生重定向响应</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;https://www.baidu.com/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="8-3-2-重定向响应案例"><a href="#8-3-2-重定向响应案例" class="headerlink" title="8.3.2 重定向响应案例"></a>8.3.2 重定向响应案例</h5><p>需求：创建一个搜索页面，通过百度搜索引擎完成内容搜索</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;demo7.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">搜索:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;search&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//c重定向响应</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo7.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo7</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//设置请求编码</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取用户搜索数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">search</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;search&quot;</span>);</span><br><span class="line">        <span class="comment">//产生重定向响应</span></span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=&quot;</span>+ URLEncoder.encode(search,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="8-3-3文件下载"><a href="#8-3-3文件下载" class="headerlink" title="8.3.3文件下载"></a>8.3.3文件下载</h5><p>在实现文件下载时，我们需要修改响应头，添加附加信息。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=&quot;</span>+文件名);</span><br></pre></td></tr></table></figure><p>Content-Disposition:attachment </p><p>该附加信息表示作为对下载文件的一个标识字段。不会在浏览器中显示而是直接做下载处理</p><p>filename&#x3D;文件名 </p><p>表示指定下载文件的文件名。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件下载的Servlet</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo8.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo8</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//读取下载文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/尚学堂.jpg&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//图片缓冲区</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        is.read(buff);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在相应中添加附加信息</span></span><br><span class="line">        resp.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+file.getName());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//产生响应</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        os.write(buff);</span><br><span class="line">        os.flush();</span><br><span class="line">        os.close();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="8-3-4-解决文件名中文乱码问题"><a href="#8-3-4-解决文件名中文乱码问题" class="headerlink" title="8.3.4 解决文件名中文乱码问题"></a>8.3.4 解决文件名中文乱码问题</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">resp.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(file.getName().getBytes(<span class="string">&quot;gbk&quot;</span>),<span class="string">&quot;iso-8859-1&quot;</span>));</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件下载的Servlet</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo8.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo8</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//读取下载文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:/尚学堂.jpg&quot;</span>);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//图片缓冲区</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        is.read(buff);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在相应中添加附加信息</span></span><br><span class="line">        resp.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(file.getName().getBytes(<span class="string">&quot;gbk&quot;</span>),<span class="string">&quot;iso-8859-1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//产生响应</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        os.write(buff);</span><br><span class="line">        os.flush();</span><br><span class="line">        os.close();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h3 id="9-ServletContext对象"><a href="#9-ServletContext对象" class="headerlink" title="9  ServletContext对象"></a>9  ServletContext对象</h3><h4 id="9-1-ServletContext对象介绍"><a href="#9-1-ServletContext对象介绍" class="headerlink" title="9.1 ServletContext对象介绍"></a>9.1 ServletContext对象介绍</h4><p>ServletContext官方叫Servlet上下文，服务器会为每一个Web应用创建一个ServletContext对象。这个对象全局唯一，而且Web应用中的所有Servlet都共享这个对象。所以叫做<em><strong>全局应用程序共享对象</strong></em>。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220321101601052.png" alt="image-20220321101601052"></p><h4 id="9-2-ServletContext对象的作用"><a href="#9-2-ServletContext对象的作用" class="headerlink" title="9.2 ServletContext对象的作用"></a>9.2 ServletContext对象的作用</h4><p>相对路径转化成绝对路径</p><p>获取容器的附加信息</p><p>读取配置信息</p><p>全局容器</p><h4 id="9-3-ServletContext对象的应用"><a href="#9-3-ServletContext对象的应用" class="headerlink" title="9.3 ServletContext对象的应用"></a>9.3 ServletContext对象的应用</h4><h5 id="9-3-1-相对路径转绝对路径"><a href="#9-3-1-相对路径转绝对路径" class="headerlink" title="9.3.1 相对路径转绝对路径"></a>9.3.1 相对路径转绝对路径</h5><p>context.getRealPath(“path”)该方法可以将一个相对路径转换为绝对路径，在文件上传与下载时需要用到该方法做路 径的转换。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件下载的Servlet</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo8.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo8</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//路径转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;image/尚学堂.jpg&quot;</span>);</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        <span class="comment">//读取下载文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//图片缓冲区</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        is.read(buff);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在响应中添加附加信息</span></span><br><span class="line">        resp.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(file.getName().getBytes(<span class="string">&quot;gbk&quot;</span>),<span class="string">&quot;iso-8859-1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//产生响应</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        os.write(buff);</span><br><span class="line">        os.flush();</span><br><span class="line">        os.close();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><h5 id="9-3-2-获取容器的附加信息"><a href="#9-3-2-获取容器的附加信息" class="headerlink" title="9.3.2 获取容器的附加信息"></a><strong>9.3.2</strong> <strong>获取容器的附加信息</strong></h5><p><strong>servletContext.getServerInfo()</strong> </p><p>返回 Servlet 容器的名称和版本号 </p><p><strong>servletContext.getMajorVersion()</strong> </p><p>返回 Servlet 容器所支持 Servlet 的主版本号。 </p><p><strong>servletContext.getMinorVersion()</strong> </p><p>返回 Servlet 容器所支持 Servlet 的副版本号。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取容器的附加信息</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo9.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo9</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取容器信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">serverInfo</span> <span class="operator">=</span> servletContext.getServerInfo();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取容器支持Servlet的主版本号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">majorVersion</span> <span class="operator">=</span> servletContext.getMajorVersion();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取容器支持Servlet的副版本号</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">minorVersion</span> <span class="operator">=</span> servletContext.getMinorVersion();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置响应编码</span></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        out.println(<span class="string">&quot;容器基本信息:&quot;</span>+serverInfo);</span><br><span class="line">        out.println(<span class="string">&quot;容器支持Servlet的版本号为：&quot;</span>+majorVersion+<span class="string">&quot;.&quot;</span>+minorVersion);</span><br><span class="line">        out.flush();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="9-3-3-获取-web-xml-文件中的信息"><a href="#9-3-3-获取-web-xml-文件中的信息" class="headerlink" title="9.3.3 获取 web.xml 文件中的信息"></a><strong>9.3.3</strong> <strong>获取</strong> <strong>web.xml</strong> <strong>文件中的信息</strong></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><p>servletContext.getInitParameter(“key”) </p><p>该方法可以读取 web.xml 文件中<context-param>标签中的配置信息。 </p><p>servletContext.getInitParameterNames() </p><p>该方法可以读取 web.xml 文件中所有 param-name 标签中的值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo10.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo10</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="comment">//获取所有的&lt;param-name&gt;的值</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = servletContext.getInitParameterNames();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> initParameterNames.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletContext.getInitParameter(name);</span><br><span class="line">            pw.println(<span class="string">&quot;Name&quot;</span>+name+<span class="string">&quot;==&quot;</span>+<span class="string">&quot;Value&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>BJSXT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key2<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>ITBJ<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="9-3-4-全局容器"><a href="#9-3-4-全局容器" class="headerlink" title="9.3.4 全局容器"></a>9.3.4 全局容器</h5><p>servletContext.setAttribute(“key”,ObjectValue)</p><p>向<strong>全局容器</strong>中存放数据</p><p>servletContext.getAttribute(“key”) </p><p>从<strong>全局容器</strong>中获取数据。 </p><p>servletContext.removeAttribute(“key”) </p><p>根据 key 删除<strong>全局容器</strong>中的 value。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo11.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo11</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 向ServletContext对象中添加初始化数据</span></span><br><span class="line"><span class="comment">    * */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">       <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;key1&quot;</span>,<span class="string">&quot;BJSXT&quot;</span>);</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;key2&quot;</span>,<span class="string">&quot;ITBZ&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">value1</span> <span class="operator">=</span> (String)servletContext.getAttribute(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">value2</span> <span class="operator">=</span> (String)servletContext.getAttribute(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(value1);</span><br><span class="line">        pw.println(value2);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-4-ServletContext对象生命周期"><a href="#9-4-ServletContext对象生命周期" class="headerlink" title="9.4 ServletContext对象生命周期"></a>9.4 ServletContext对象生命周期</h4><p>当容器启动时会创建 ServletContext 对象并一直缓存该对象，直到容器关闭后该对象生命周期结束。ServletContext 对象的生命周期非常长，所以在使用全局容器时不建议存放业务数据。</p><h3 id="10-ServletConfig对象"><a href="#10-ServletConfig对象" class="headerlink" title="10 ServletConfig对象"></a>10 ServletConfig对象</h3><p>ServletConfig对象对应web.xml文件中的<servlet>节点。当Tomcat初始化一个Servlet时，会将该Servlet的配置信息，封装到一个ServletConfig对象中，我们可以通过该对象读取<servlet>节点中的配置信息</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>servletName<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>servletClass<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>value<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">init-param</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>servletConfig.getInitParameter(“key”) </p><p>该方法可以读取 web.xml 文件中<servlet>标签中<init-param>标签中的配置信息。 </p><p>servletConfig.getInitParameterNames() </p><p>该方法可以读取 web.xml 文件中当前<servlet>标签中所有<init-param>标签中的值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo12</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletConfig对象</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取配置信息</span></span><br><span class="line">        Enumeration&lt;String&gt; initParameterNames = servletConfig.getInitParameterNames();</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">while</span> (initParameterNames.hasMoreElements())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> initParameterNames.nextElement();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletConfig.getInitParameter(name);</span><br><span class="line">            pw.println(<span class="string">&quot;key:&quot;</span>+name+<span class="string">&quot;====&quot;</span>+<span class="string">&quot;value&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo12<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjsxt.servlet.demo12<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key1<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>BJSXT<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>key2<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>BJSXTioioioio<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo12<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo12.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="11-Cookie对象与HttpSession对象"><a href="#11-Cookie对象与HttpSession对象" class="headerlink" title="11 Cookie对象与HttpSession对象"></a>11 Cookie对象与HttpSession对象</h3><h3 id="用于维护客户端与服务端的会话状态的维持"><a href="#用于维护客户端与服务端的会话状态的维持" class="headerlink" title="(用于维护客户端与服务端的会话状态的维持)"></a>(用于维护客户端与服务端的会话状态的维持)</h3><p>Cookie 对象与 HttpSession 对象的作用是维护客户端浏览器与服务端的会话状态的两个 对象。由于 HTTP 协议是一个无状态的协议，所以服务端并不会记录当前客户端浏览器的访问状态，但是在有些时候我们是需要服务端能够记录客户端浏览器的访问状态的，如获取当前客户端浏览器的访问服务端的次数时就需要会话状态的维持。在 Servlet 中提供了 Cookie 对象与 HttpSession 对象用于维护客户端与服务端的会话状态的维持。二者不同的是 Cookie是通过客户端浏览器实现会话的维持，而 HttpSession 是通过服务端来实现会话状态的维持</p><h4 id="11-1-Cookie对象"><a href="#11-1-Cookie对象" class="headerlink" title="11.1 Cookie对象"></a>11.1 Cookie对象</h4><h5 id="11-1-1-Cookie对象的特点"><a href="#11-1-1-Cookie对象的特点" class="headerlink" title="11.1.1 Cookie对象的特点"></a>11.1.1 Cookie对象的特点</h5><p>Cookie使用字符串存储数据</p><p>Cookie使用key与value结构存储数据</p><p>单个cookie存储数据大小限制在4097字节</p><p>Cookie 存储的数据中不支持中文，Servlet4.0 中支持 </p><p> Cookie 是与域名绑定所以不支持跨一级域名访问 </p><p>Cookie 对象保存在客户端浏览器或系统磁盘中 </p><p>Cookie 分为持久化 Cooke 与状态 Cookie </p><p>浏览器在保存同一域名所返回 Cookie 的数量是有限的。不同浏览器支持的数量不同，Chrome 浏览器为 50 个 </p><p>浏览器每次请求时都会把与当前访问的域名相关的 Cookie 在请求中提交到服务端。</p><h5 id="11-1-2-Cookie对象的创建"><a href="#11-1-2-Cookie对象的创建" class="headerlink" title="11.1.2 Cookie对象的创建"></a>11.1.2 Cookie对象的创建</h5><p>Cookie cookie &#x3D; new Cookie(“key”,”value”);</p><p>通过 new 关键字创建 Cookie 对象 </p><p>respon.addCookie(cookie)</p><p>通过HttpServletResponse对象将Cookie写回到客户端浏览器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Cookie对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo13.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo13</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建Cookie对象</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;ITBZ&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将Cookie写回给客户端浏览器</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Create Cookie&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-1-3-获取Cookie中的数据"><a href="#11-1-3-获取Cookie中的数据" class="headerlink" title="11.1.3 获取Cookie中的数据"></a>11.1.3 获取Cookie中的数据</h5><p>通过HttpServletRequest对象中获取Cookie，返回Cookie数组。</p><p>Cookie[] cookies &#x3D; request.getCookies()</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Cookie对象</span></span><br><span class="line"><span class="comment">//写数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo13.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo13</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建Cookie对象</span></span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;key&quot;</span>, <span class="string">&quot;ITBZ&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将Cookie写回给客户端浏览器</span></span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Create Cookie&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读数据</span></span><br><span class="line"><span class="comment">//获取Cookie中的数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo14.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo14</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取Cookie对象</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Cookie中的数据</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;cookies.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> cookies[i];</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">            pw.println(<span class="string">&quot;name&quot;</span>+name+<span class="string">&quot;=====&quot;</span>+<span class="string">&quot;value&quot;</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-1-4-解决Cookie不支持中文"><a href="#11-1-4-解决Cookie不支持中文" class="headerlink" title="11.1.4  解决Cookie不支持中文"></a>11.1.4  解决Cookie不支持中文</h5><p>在 Servlet4.0 版本之前的 Cookie 中是不支持中文存储的，如果存储的数据中含有中文， 代码会直接出现异常。我们可以通过对含有中文的数据重新进行编码来解决该问题。在 Servlet4.0 中的 Cookie 是支持中文存储的（name的值依然不能使用中文，VALUE值可以使用中文）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.lang.IllegalArgumentException: Control character in cookie value or attribute.</span><br></pre></td></tr></table></figure><p>URLEncoder.encode(“content”,”code”) </p><p>将内容按照指定的编码方式做 URL 编码处理。 </p><p>URLDecoder.decode(“content”,”code”) </p><p>将内容按照指定的编码方式做 URL 解码处理。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建Cookie对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo13.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo13</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="comment">//创建Cookie对象</span></span><br><span class="line"><span class="comment">//          Cookie cookie = new Cookie(&quot;key&quot;, &quot;百战程序员&quot;);</span></span><br><span class="line">            <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(URLEncoder.encode(<span class="string">&quot;尚学堂&quot;</span>,<span class="string">&quot;utf-8&quot;</span>), URLEncoder.encode(<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line"><span class="comment">//          resp.setContentType(&quot;text/plain;charset=utf-8&quot;);</span></span><br><span class="line">            <span class="comment">//将Cookie写回给客户端浏览器</span></span><br><span class="line">            resp.addCookie(cookie);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">            pw.println(<span class="string">&quot;Create Cookie&quot;</span>);</span><br><span class="line">            pw.flush();</span><br><span class="line">         pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//读数据</span></span><br><span class="line"><span class="comment">//获取Cookie中的数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo14.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo14</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取Cookie对象</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Cookie中的数据</span></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;cookies.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> cookies[i];</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> cookie.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> cookie.getValue();</span><br><span class="line">            pw.println(<span class="string">&quot;name&quot;</span>+ URLDecoder.decode(name,<span class="string">&quot;utf-8&quot;</span>) +<span class="string">&quot;=====&quot;</span>+<span class="string">&quot;value&quot;</span>+URLDecoder.decode(value,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-1-5-Cookie跨域问题"><a href="#11-1-5-Cookie跨域问题" class="headerlink" title="11.1.5 Cookie跨域问题"></a>11.1.5 Cookie跨域问题</h5><p>域名分类：域名分为顶级域、顶级域名(一级域名)、二级域名。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220321220044086.png" alt="image-20220321220044086"></p><p>域名等级的区别：一级域名比二级域名更高级，二级域名是依附于一级域名之下的附属 分区域名，即二级域名是一级域名的细化分级。例如：baidu.com 为一级域名，news.baidu.com 为二级域名。Cookie 不支持一级域名的跨域，支持二级域名的跨域。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220321223640535.png" alt="image-20220321223640535"></p><h5 id="11-1-6-状态Cookie和持久化Cookie"><a href="#11-1-6-状态Cookie和持久化Cookie" class="headerlink" title="11.1.6 状态Cookie和持久化Cookie"></a>11.1.6 状态Cookie和持久化Cookie</h5><p>状态 Cookie：浏览器会缓存 Cookie 对象。浏览器关闭后 Cookie 对象销毁。</p><p>持久化 Cookie：浏览器会对 Cookie 做持久化处理，基于文件形式保存在系统的指定目录中。在 Windows10 系统中为了安全问题不会显示 Cookie 中的内容。 </p><p>当 Cookie 对象创建后默认为状态 Cookie。可以使用 Cookie 对象下的 cookie.setMaxAge(60)方法设置失效时间，单位为秒。一旦设置了失效时间，那么该 Cookie 为持久化 Cookie，浏览器会将 Cookie 对象持久化到磁盘中。当失效时间到达后文件删除。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.Cookie;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.PrintWriter;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建Cookie对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo13.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo13</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">            <span class="comment">//创建Cookie对象</span></span><br><span class="line">            <span class="comment">//Cookie cookie = new Cookie(&quot;key&quot;, &quot;百战程序员&quot;);</span></span><br><span class="line">            <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(URLEncoder.encode(<span class="string">&quot;尚学堂&quot;</span>,<span class="string">&quot;utf-8&quot;</span>), URLEncoder.encode(<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;utf-8&quot;</span>));</span><br><span class="line">            <span class="comment">//resp.setContentType(&quot;text/plain;charset=utf-8&quot;);</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//指定失效时间，一旦指定失效时间，那么该Cookie则为持久化Cookie</span></span><br><span class="line">            cookie.setMaxAge(<span class="number">60</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//将Cookie写回给客户端浏览器</span></span><br><span class="line">            resp.addCookie(cookie);</span><br><span class="line">            <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">            pw.println(<span class="string">&quot;Create Cookie&quot;</span>);</span><br><span class="line">            pw.flush();</span><br><span class="line">         pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-1-7-通过Cookie实现客户端与服务端会话的维持-案例"><a href="#11-1-7-通过Cookie实现客户端与服务端会话的维持-案例" class="headerlink" title="11.1.7 通过Cookie实现客户端与服务端会话的维持(案例)"></a>11.1.7 通过Cookie实现客户端与服务端会话的维持(案例)</h5><p>需求：当客户端浏览器第一次访问 Servlet 时返回“您好，欢迎您第一次访问！”，第 二次访问时返回“欢迎您回来！”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo15.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo15</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取Cookie</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">if</span>(cookies!=<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (Cookie cookie : cookies) &#123;</span><br><span class="line">             <span class="keyword">if</span>(<span class="string">&quot;Welcome&quot;</span>.equals(cookie.getName()))</span><br><span class="line">             &#123;</span><br><span class="line">                flag = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">             &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">if</span>(flag)</span><br><span class="line">        &#123;</span><br><span class="line">        pw.println(<span class="string">&quot;欢迎您回来！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">        pw.println(<span class="string">&quot;您好,欢迎您第一次访问！&quot;</span>);</span><br><span class="line">        <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cookie</span>(<span class="string">&quot;Welcome&quot;</span>,<span class="string">&quot;welcome&quot;</span>);</span><br><span class="line">        cookie.setMaxAge(<span class="number">60</span>);</span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-1-8-Cookie总结"><a href="#11-1-8-Cookie总结" class="headerlink" title="11.1.8 Cookie总结"></a>11.1.8 Cookie总结</h5><p>Cookie 对于存储内容是基于明文的方式存储的，所以安全性很低。不要在 Cookie 中存 放敏感数据。在数据存储时，虽然在 Servlet4.0 中 Cookie 支持中文，但是建议对 Cookie 中存放的内容做编码处理，也可提高安全性。</p><h4 id="11-2-HttpSession对象"><a href="#11-2-HttpSession对象" class="headerlink" title="11.2 HttpSession对象"></a>11.2 HttpSession对象</h4><h5 id="11-2-1-HttpSession对象的特点"><a href="#11-2-1-HttpSession对象的特点" class="headerlink" title="11.2.1 HttpSession对象的特点"></a>11.2.1 HttpSession对象的特点</h5><p>HttpSession 保存在服务端 </p><p>HttpSession 可以存储任何类型的数据 </p><p>HttpSession 使用 Key 是字符串类型，Value则是Object类型</p><p>HttpSession 存储数据大小无限制 </p><h5 id="11-2-2-HttpSession对象的创建"><a href="#11-2-2-HttpSession对象的创建" class="headerlink" title="11.2.2 HttpSession对象的创建"></a>11.2.2 HttpSession对象的创建</h5><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322104051719.png" alt="image-20220322104051719"></p><p>HttpSession 对象的创建是通过 request.getSession()方法来创建的。客户端浏览器在请求服务端资源时，如果在请求中没有 JSessionID，getSession()方法将会为这个客户端浏览器创 建一个新的 HttpSession 对象，并为这个 HttpSession 对象生成一个 JSessionID，在响应中通过 Cookie 写回给客户端浏览器，如果在请求中包含了 JSessionID，getSession()方法则根据这个ID 返回与这个客户端浏览器对应的 HttpSession 对象。 </p><p>getSession()方法还有一个重载方法getSession(true|false)。当参数为true时与getSession()方法作用相同。<em><strong>当参数为 false 时则只去根据 JSessionID 查找是否有与这个客户端浏览器对应的 HttpSession，如果有则返回，如果没有 JSessionID 则不会创建新的 HttpSession 对象。</strong></em> </p><p>会为每一个浏览器创建独立的不同的HttpSession对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建HttpSession对象</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo16.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo16</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//创建HttpSession对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(session);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Create the OK&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-2-3-获取HttpSession中的数据"><a href="#11-2-3-获取HttpSession中的数据" class="headerlink" title="11.2.3 获取HttpSession中的数据"></a>11.2.3 获取HttpSession中的数据</h5><p>session.setAttribute(“key”,value) </p><p>将数据存储到 HttpSession 对象中 </p><p>Object value &#x3D; session.getAttribute(“key”) </p><p>根据 key 获取 HttpSession 中的数据，返回 Object </p><p>Enumeration<String> attributeNames &#x3D; session.getAttributeNames() </p><p>获取 HttpSession 中所有的 key，返回枚举类型 </p><p>session.removeAttribute(“key”) </p><p>根据 key 删除 HttpSession 中的数据 </p><p>String id &#x3D; session.getId() </p><p>根据获取当前 HttpSession 的 SessionID，返回字符串类型 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建HttpSession对象</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo16.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo16</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">       <span class="comment">//创建HttpSession对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储数据</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;ITBZ&quot;</span>);</span><br><span class="line">        <span class="comment">//获取sessionID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> session.getId();</span><br><span class="line">        System.out.println(session);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Create the OK&quot;</span>+id);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取HttpSession中的数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo17.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo17</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取HttpSession对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String) session.getAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span>resp.getWriter();</span><br><span class="line">        printWriter.println(value);</span><br><span class="line">        printWriter.flush();</span><br><span class="line">        printWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-2-4-HttpSession的销毁方式"><a href="#11-2-4-HttpSession的销毁方式" class="headerlink" title="11.2.4 HttpSession的销毁方式"></a>11.2.4 HttpSession的销毁方式</h5><p>HttpSession 的销毁方式有两种：</p><p>通过 web.xml 文件指定超时时间 </p><p>通过 HttpSession 对象中的 invalidate()方法销毁当前 HttpSession 对象 </p><p>我们可以在 web.xml 文件中指定 HttpSession 的超时时间，当到达指定的超时时间后，容器就会销该 HttpSession 对象，单位为分钟。该时间对整个 web 项目中的所有 HttpSession 对象有效。时间的计算方式是根据最后一次请求时间作为起始时间。如果有哪个客户端浏览器 对应的 HttpSession 的失效时间已到，那么与该客户端浏览器对应的 HttpSession 对象就会被销毁。其他客户端浏览器对应的 HttpSession 对象会继续保存不会被销毁。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>1<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们也可以在 Tomcat 的 web.xml 文件中配置 HttpSession 的销毁时间。如果在 Tomcat的 web.xml 文件中配置了 HttpSession 的超时时间对应的是 Tomcat 中所有的 Web 项目都有 效。相当于配置了全局的 HttpSession 超时时间。如果我们在 Web 项目中配置了超时时间， 那么会以 Web 项目中的超时时间为准。 </p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220321232823013.png" alt="image-20220321232823013"></p><p>invalidate()方法是 HttpSession 对象中所提供的用于销毁当前 HttpSession 的方法。我们通过调用该方法可以销毁当前 HttpSession 对象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建HttpSession对象</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo16.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo16</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">      <span class="comment">// 获取请求头中的User-Agent的数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> req.getHeader(<span class="string">&quot;User-Agent&quot;</span>);</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line"><span class="comment">//        创建HttpSession对象</span></span><br><span class="line"><span class="comment">//         HttpSession session = req.getSession(false);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (header.indexOf(<span class="string">&quot;Chrome&quot;</span>)!=-<span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;Chrome&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            session.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;IE&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存储数据</span></span><br><span class="line"><span class="comment">//        session.setAttribute(&quot;A&quot;,&quot;ITBZ&quot;);</span></span><br><span class="line">        <span class="comment">//获取sessionID</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> session.getId();</span><br><span class="line">        System.out.println(session);</span><br><span class="line">        System.out.println(header);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Create the OK&quot;</span>+id);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取HttpSession中的数据</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo17.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo17</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取HttpSession对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        <span class="comment">//获取数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">a</span> <span class="operator">=</span>(String)session.getAttribute(<span class="string">&quot;A&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">printWriter</span> <span class="operator">=</span>resp.getWriter();</span><br><span class="line">        printWriter.println(a);</span><br><span class="line">        printWriter.flush();</span><br><span class="line">        printWriter.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-2-5-通过HttpSession实现客户端与服务端会话的维持"><a href="#11-2-5-通过HttpSession实现客户端与服务端会话的维持" class="headerlink" title="11.2.5 通过HttpSession实现客户端与服务端会话的维持"></a>11.2.5 通过HttpSession实现客户端与服务端会话的维持</h5><p>需求：当客户端浏览器第一次访问 Servlet 时返回“您好，欢迎您第一次访问！”，第 二次访问时返回“欢迎您回来！”。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/demo18.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo18</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//创建HttpSession对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession(<span class="literal">false</span>);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (session==<span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            flag = <span class="literal">false</span>;</span><br><span class="line">            req.getSession();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">        &#123;</span><br><span class="line">            pw.println(<span class="string">&quot;欢迎您回来！&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            pw.println(<span class="string">&quot;您好，欢迎您第一次访问！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="11-2-6-HttpSession生命周期"><a href="#11-2-6-HttpSession生命周期" class="headerlink" title="11.2.6 HttpSession生命周期"></a>11.2.6 HttpSession生命周期</h5><p>在 HttpSession 对象生命周期中没有固定的创建时间与销毁时间。何时创建取决于我们什么时候第一次调用了 getSession()或 getSession(true)的方法。HttpSession 对象的销毁时间 取决于超时时间的到达以及调用了 invalidate()方法。如果没有超时或者没有调用 invalidate()方法，那么 HttpSession 会一直存储。默认超时时间为 30 分钟(Tomcat 的 web.xml 文件配置的时间就是默认超时时间)。</p><h4 id="11-3-HttpSession对象总结"><a href="#11-3-HttpSession对象总结" class="headerlink" title="11.3 HttpSession对象总结"></a>11.3 HttpSession对象总结</h4><h5 id="11-3-1-HttpSession-与-Cookie-的区别："><a href="#11-3-1-HttpSession-与-Cookie-的区别：" class="headerlink" title="11.3.1 HttpSession 与 Cookie 的区别："></a>11.3.1 <strong>HttpSession</strong> <strong>与</strong> <strong>Cookie</strong> <strong>的区别：</strong></h5><p>cookie 数据存放在客户的浏览器或系统的文件中，而 HttpSession 中的数据存放在服务器中。</p><p>cookie 不安全，而 HttSession 是安全的。</p><p>单个 cookie 保存的数据不能超过 4K，很多浏览器都限制一个域名保存 cookie 的数量。而 HttpSession 没有容量以及数量的限制。 </p><h5 id="11-3-2-HttpSession的使用建议"><a href="#11-3-2-HttpSession的使用建议" class="headerlink" title="11.3.2 HttpSession的使用建议"></a>11.3.2 HttpSession的使用建议</h5><h3 id="12-自启动Servlet"><a href="#12-自启动Servlet" class="headerlink" title="12 自启动Servlet"></a>12 自启动Servlet</h3><h4 id="12-1-自启动Servlet特点"><a href="#12-1-自启动Servlet特点" class="headerlink" title="12.1 自启动Servlet特点"></a>12.1 自启动Servlet特点</h4><p>自动启动 Servlet 表示在 Tomcat 启动时就会实例化这个 Servlet，他的实例化过程不依赖 于请求，而是依赖容器的启动</p><p>可以通过在 web.xml 中的<servlet>标签中通过<load-on-startup>1</load-on-startup>配置自启动 Servlet。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自启动Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo19</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;AutoStartServlet......&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;AutoStartServlet Init......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo19<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjsxt.servlet.demo19<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo19<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo19.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="12-2-通过自启动Servlet实现配置信息的读取"><a href="#12-2-通过自启动Servlet实现配置信息的读取" class="headerlink" title="12.2 通过自启动Servlet实现配置信息的读取"></a>12.2 通过自启动Servlet实现配置信息的读取</h4><p>需求：修改文件下载案例，通过自启动Servlet读取配置信息</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件下载的Servlet</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/demo8.do&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo8</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletContext对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取存放图片的目录名称</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> (String)servletContext.getAttribute(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        <span class="comment">//路径转换</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(value+<span class="string">&quot;/尚学堂.jpg&quot;</span>);</span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        <span class="comment">//读取下载文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file);</span><br><span class="line">        <span class="comment">//图片缓冲区</span></span><br><span class="line">        <span class="type">byte</span>[] buff = <span class="keyword">new</span> <span class="title class_">byte</span>[is.available()];</span><br><span class="line">        is.read(buff);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在响应中添加附加信息</span></span><br><span class="line">        resp.addHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(file.getName().getBytes(<span class="string">&quot;gbk&quot;</span>),<span class="string">&quot;iso-8859-1&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//产生响应</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> resp.getOutputStream();</span><br><span class="line">        os.write(buff);</span><br><span class="line">        os.flush();</span><br><span class="line">        os.close();</span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自启动Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo19</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;AutoStartServlet......&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">//获取Servlet标签中的配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全局容器对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;path&quot;</span>,value);</span><br><span class="line">        System.out.println(<span class="string">&quot;AutoStartServlet Init......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo19<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.bjsxt.servlet.demo19<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>path<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>image<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demo19<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo19.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="13-Servlet线程安全问题"><a href="#13-Servlet线程安全问题" class="headerlink" title="13 Servlet线程安全问题"></a>13 Servlet线程安全问题</h3><p>在 Servlet 中使用的是多线程方式来执行 service()方法处理请求，所以我们在使用 Servlet时需要考虑到线程安全问题，在多线程中对于对象中的成员变量是最不安全的，所以不要在 Servlet 中通过成员变量的方式来存放数据，如果一定要使用成员变量存储数据，在对数据进行操作时需要使用线程同步的方式来解决线程安全问题，避免出现数据张冠李戴现象。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自启动Servlet</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo19</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;AutoStartServlet......&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="comment">//获取Servlet标签中的配置信息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全局容器对象</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;path&quot;</span>,value);</span><br><span class="line">        System.out.println(<span class="string">&quot;AutoStartServlet Init......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="14-Servlet的url-pattern配置"><a href="#14-Servlet的url-pattern配置" class="headerlink" title="14 Servlet的url-pattern配置"></a>14 Servlet的url-pattern配置</h3><h4 id="14-1-URL的匹配规则"><a href="#14-1-URL的匹配规则" class="headerlink" title="14.1 URL的匹配规则"></a>14.1 URL的匹配规则</h4><h5 id="14-1-1-精确匹配"><a href="#14-1-1-精确匹配" class="headerlink" title="14.1.1 精确匹配"></a>14.1.1 精确匹配</h5><p>精确匹配是指<url-pattern>中配置的值必须与 url 完全精确匹配</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/demo.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322200205877.png" alt="image-20220322200205877"></p><h5 id="14-1-2-拓展名匹配"><a href="#14-1-2-拓展名匹配" class="headerlink" title="14.1.2. 拓展名匹配"></a>14.1.2. 拓展名匹配</h5><p>在<url-pattern>允许使用通配符“<em>”作为匹配规则，“</em>”表示匹配任意字符。在扩展 名匹配中只要扩展名相同都会被匹配和路径无关。注意，在使用扩展名匹配时在<url-pattern> 中不能使用“&#x2F;”，否则容器启动就会抛出异常。 </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322200321166.png" alt="image-20220322200321166"></p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322200326308.png" alt="image-20220322200326308"></p><h5 id="14-1-3-路径匹配"><a href="#14-1-3-路径匹配" class="headerlink" title="14.1.3 路径匹配"></a>14.1.3 路径匹配</h5><p>根据请求路径进行匹配，在请求中只要包含该路径都匹配。“*”表示任意路径以及子 路径</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/suibian/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322200416938.png" alt="image-20220322200416938"></p><h5 id="14-1-4-任意匹配"><a href="#14-1-4-任意匹配" class="headerlink" title="14.1.4 任意匹配"></a>14.1.4 任意匹配</h5><p>匹配“&#x2F;”。匹配所有但不包含 JSP 页面 </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322200500903.png" alt="image-20220322200500903"></p><p>匹配所有</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322200533203.png" alt="image-20220322200533203"></p><h5 id="14-1-5-优先顺序"><a href="#14-1-5-优先顺序" class="headerlink" title="14.1.5 优先顺序"></a>14.1.5 优先顺序</h5><p>当一个 url 与多个 Servlet 的匹配规则可以匹配时，则按照 “ 精确路径 &gt; 最长路径 &gt; 扩展名”这样的优先级匹配到对应的 Servlet。</p><h5 id="14-1-6-考考你"><a href="#14-1-6-考考你" class="headerlink" title="14.1.6 考考你"></a>14.1.6 考考你</h5><p>Servlet1 映射到 &#x2F;abc&#x2F;* </p><p>Servlet2 映射到 &#x2F;* </p><p>Servlet3 映射到 &#x2F;abc </p><p>Servlet4 映射到 *.do </p><p>当请求 URL 为“&#x2F;abc&#x2F;a.html”，“&#x2F;abc&#x2F;*”和“&#x2F;*”都匹配，Servlet 引擎将调用 Servlet1。 </p><p>当请求 URL 为“&#x2F;abc”时，“&#x2F;abc&#x2F;*”和“&#x2F;abc”都匹配，Servlet 引擎将调用 Servlet3。 </p><p>当请求 URL 为“&#x2F;abc&#x2F;a.do”时，“&#x2F;abc&#x2F;<em>”和“</em>.do”都匹配，Servlet 引擎将调用 Servlet1。 </p><p>当请求 URL 为“&#x2F;a.do”时，“&#x2F;<em>”和“</em>.do”都匹配，Servlet 引擎将调用 Servlet2。 </p><p>当请求 URL 为“&#x2F;xxx&#x2F;yyy&#x2F;a.do”时，“&#x2F;<em>”和“</em>.do”都匹配，Servlet 引擎将调用 Servlet2。 </p><h4 id="14-2-URL映射方式"><a href="#14-2-URL映射方式" class="headerlink" title="14.2 URL映射方式"></a>14.2 URL映射方式</h4><p>在 web.xml 文件中支持将多个 URL 映射到一个 Servlet 中，但是相同的 URL 不能同时映射到两个 Servlet 中。</p><h5 id="14-2-1-方式一"><a href="#14-2-1-方式一" class="headerlink" title="14.2.1 方式一"></a>14.2.1 方式一</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/suibian/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="14-2-2-方式二"><a href="#14-2-2-方式二" class="headerlink" title="14.2.2 方式二"></a>14.2.2 方式二</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/suibian/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>demoServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.do<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="15-基本注解式开发Servlet"><a href="#15-基本注解式开发Servlet" class="headerlink" title="15 基本注解式开发Servlet"></a>15 基本注解式开发Servlet</h3><p>在 Servlet3.0 以及之后的版本中支持注解式开发 Servlet。对于 Servlet 的配置不在依赖于web.xml 配置文件，而是使用@WebServlet 注解完成 Servlet 的配置。 </p><h4 id="15-1-WebServlet-注解中属性"><a href="#15-1-WebServlet-注解中属性" class="headerlink" title="15.1@WebServlet 注解中属性"></a>15.1@WebServlet <strong>注解中属性</strong></h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322224220627.png" alt="image-20220322224220627"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//基于注解方式开发servlet</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &#123;&quot;*.do&quot;,&quot;/ann/*&quot;,&quot;/ann.do&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo21</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(<span class="string">&quot;Annotation Servlet!&quot;</span>);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="15-2-WebInitParam-注解中的属性"><a href="#15-2-WebInitParam-注解中的属性" class="headerlink" title="15.2@WebInitParam 注解中的属性"></a><strong>15.2@WebInitParam</strong> <strong>注解中的属性</strong></h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322224254757.png" alt="image-20220322224254757"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置初始化参数</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/initParam.do&quot;,initParams = &#123;@WebInitParam(name = &quot;key1&quot;,value = &quot;BJSXT&quot;),@WebInitParam(name=&quot;key2&quot;,value = &quot;ITB&quot;)&#125;,loadOnStartup = 1)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InitParamServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取ServletConfig对象</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key1</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(key1);</span><br><span class="line">        pw.println(key2);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="comment">//获取ServletConfig对象</span></span><br><span class="line">        <span class="type">ServletConfig</span> <span class="variable">servletConfig</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletConfig();</span><br><span class="line">        <span class="type">String</span> <span class="variable">key1</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;key1&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">key2</span> <span class="operator">=</span> servletConfig.getInitParameter(<span class="string">&quot;key2&quot;</span>);</span><br><span class="line">        System.out.println(key1);</span><br><span class="line">        System.out.println(key2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="16-文件上传"><a href="#16-文件上传" class="headerlink" title="16  文件上传"></a>16  文件上传</h3><p>在 Servlet3.0 之前的版本中如果实现文件上传需要依赖 apache 的 Fileupload 组件，在Servlet3.0 以及之后的版本中提供了 Part 对象处理文件上传，所以不在需要额外的添加 Fileupload 组件。 在 Servlet3.0 以及之后的版本中实现文件上传时必须要在 Servlet 中开启多参数配置：web.xml </p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span><span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span><span class="tag">&lt;/<span class="name">location</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span><span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span><span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322232848439.png" alt="image-20220322232848439"></p><p>Part对象中常用的方法</p><p>String getContentType()</p><p>获取上传文件的文件的MIME类型</p><p>long getSize()</p><p>上传文件的大小</p><p>String getSubmittedFileName()</p><p>上传文件的原始文件名</p><p>String getName()</p><p>获取&lt;input name&#x3D;”upload” …&gt;标签中 name 属性值</p><p>String getHeader(String name) </p><p>获取请求头部 </p><p>void write(String path)</p><p>保存文件至服务器</p><p>InputStream getInputStream()</p><p>获取上传文件的输入流</p><p>Collection(String)  getHeaderNames()</p><p>获取所有请求头部名称</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;fileupload.do&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">    文件描述:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;desc&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    上传文件:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;OK&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文件上传</span></span><br><span class="line"><span class="meta">@WebServlet(urlPatterns = &quot;/fileupload.do&quot;)</span></span><br><span class="line"><span class="meta">@MultipartConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileUploadServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req,resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        <span class="comment">//获取文件描述</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">desc</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;desc&quot;</span>);</span><br><span class="line">        <span class="comment">//获取上传文件</span></span><br><span class="line">        <span class="type">Part</span> <span class="variable">part</span> <span class="operator">=</span> req.getPart(<span class="string">&quot;file&quot;</span>);</span><br><span class="line">        <span class="comment">//处理文件名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">newName</span> <span class="operator">=</span>UUID.randomUUID().toString()+part.getSubmittedFileName().substring(part.getSubmittedFileName().lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//路径转换</span></span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> servletContext.getRealPath(<span class="string">&quot;image/&quot;</span> + newName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件的保存</span></span><br><span class="line">        System.out.println(realPath);</span><br><span class="line">        part.write(realPath);</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/plain;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> resp.getWriter();</span><br><span class="line">        pw.println(desc);</span><br><span class="line">        pw.flush();</span><br><span class="line">        pw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>tips:</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220323101706891.png" alt="image-20220323101706891"></p><p><em><strong>html等文件应创建在web文件夹下，而不是创建在WEB-INF文件夹下。在错误的文件夹下创建html等文件会造成Tomcat可以正常访问servlet，但不能正常访问html页面的结果</strong></em></p><h3 id="17-Filter过滤器"><a href="#17-Filter过滤器" class="headerlink" title="17 Filter过滤器"></a>17 Filter过滤器</h3><p>Filter过滤器是Servlet中的一个组件。并不是JavaEE平台中的技术规范。</p><h4 id="17-1-过滤器作用"><a href="#17-1-过滤器作用" class="headerlink" title="17.1 过滤器作用"></a>17.1 过滤器作用</h4><p>对从客户端向服务器端发送的请求进行过滤，也可以对服务器端返回的响应进行处理。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322233655407.png" alt="image-20220322233655407"></p><h4 id="17-2-Filter的使用"><a href="#17-2-Filter的使用" class="headerlink" title="17.2 Filter的使用"></a>17.2 Filter的使用</h4><h5 id="17-2-1-Filter对象的创建"><a href="#17-2-1-Filter对象的创建" class="headerlink" title="17.2.1 Filter对象的创建"></a>17.2.1 Filter对象的创建</h5><p>创建一个 Class 实现 Filter 接口，并实现接口中三个抽象方法。 </p><p>init()方法：初始化方法，在创建 Filter 后立即调用。可用于完成初始化动作。 </p><p>doFilter()方法：拦截请求与响应方法，可用于对请求和响应实现预处理。 </p><p>destroy()方法：销毁方法，在销毁 Filter 之前自动调用。可用于完成资源释放等动作。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个Filter案例</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/suibian/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="comment">//当Filter对象被实例化后，会立刻调用的一个方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Init........&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//过滤请求与响应的，当客户端浏览器请求的URL与Filter所定义的</span></span><br><span class="line">    <span class="comment">//url-pattern所匹配，那么该请求会被过滤</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//对请求进行处理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请求被过滤&quot;</span>);</span><br><span class="line">        <span class="comment">//对请求做放行处理</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//对响应进行处理</span></span><br><span class="line">        System.out.println(<span class="string">&quot;响应被过滤&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//当Filter对象在销毁之前会调用一次该方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="17-2-2-在Filter中设置请求编码"><a href="#17-2-2-在Filter中设置请求编码" class="headerlink" title="17.2.2 在Filter中设置请求编码"></a>17.2.2 在Filter中设置请求编码</h5><p>需求：在 Filter 中实现对请求的编码的设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置请求编码过滤器</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//设置请求编码</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">       <span class="comment">//不建议设置响应型编码</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="17-2-3"><a href="#17-2-3" class="headerlink" title="17.2.3"></a>17.2.3</h5><p>FilterConfig 对象是用来读取<filter>中<init-param>初始化参数的对象。该对象通过参数传递到 init 方法中，用于读取初始化参数。 </p><p>filterConfig.getInitParameter(“name”) </p><p>通过 name 获取对应的 value。 </p><p>filterConfig.getInitParameterNames() </p><p>返回该 Filter 中所有<param-name>中的值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置请求编码过滤器</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &quot;/*&quot;,initParams = &#123;@WebInitParam(name=&quot;code&quot;,value = &quot;utf-8&quot;)&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EncodingFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">   <span class="comment">//设置默认编码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">defaultCode</span> <span class="operator">=</span> <span class="string">&quot;utf-8&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> filterConfig.getInitParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(code!=<span class="literal">null</span>&amp;&amp;code.length()&gt;<span class="number">0</span>)</span><br><span class="line">        &#123; <span class="built_in">this</span>.defaultCode = code; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="comment">//设置请求编码</span></span><br><span class="line">        servletRequest.setCharacterEncoding(<span class="built_in">this</span>.defaultCode);</span><br><span class="line">       <span class="comment">//不建议设置响应型编码</span></span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="17-3-FilterChain-过滤器链"><a href="#17-3-FilterChain-过滤器链" class="headerlink" title="17.3 FilterChain(过滤器链)"></a>17.3 FilterChain(过滤器链)</h4><p>Filter 技术的特点是在对请求或响应做预处理时，可实现“插拔式”的程序设计。我们可以根据自己需求添加多个 Filter，也可以根据需求去掉某个 Filter，通过修改 web.xml 文件 即可实现。那么如果有多个过滤器对某个请求及响应进行过滤，那么这组过滤器就称为过滤 器链。过滤器的执行顺序和<url-pattern>有关。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322233920227.png" alt="image-20220322233920227"></p><p><strong>Filter 执行顺序则按照在 web.xml 文件中配置的上下顺序来决定先后。在上的先执行，在下的后执行。</strong></p><h4 id="17-4-Filter的生命周期"><a href="#17-4-Filter的生命周期" class="headerlink" title="17.4 Filter的生命周期"></a>17.4 Filter的生命周期</h4><p>Filter 的生命周期是由容器管理的。当容器启动时会实例化 Filter 并调用 init 方法完成初始化动作。当客户端浏览器发送请求时，容器会启动一个新的线程来处理请求，如果请求的URI 能够被过滤器所匹配，那么则先调用过滤器中 的 doFilter 方法，再根据是否有chain.doFilter 的指令，决定是否继续请求目标资源。当容器关闭时会销毁 Filter 对象，在销 毁之前会调用 destroy 方法。</p><h4 id="17-5-基于注解式开发Filter"><a href="#17-5-基于注解式开发Filter" class="headerlink" title="17.5 基于注解式开发Filter"></a>17.5 基于注解式开发Filter</h4><p>Filter 支持注解式开发，通过@WebFilter 注解替代 web.xml 中 Filter 的配置。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220322234856098.png" alt="image-20220322234856098"></p><p><strong>使用注解式开发 Filter 时，执行顺序会根据 Filter 的名称进行排序的结果决定调用的顺序。</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//基于注解式开发Filter</span></span><br><span class="line"><span class="comment">//web.xml里配置的filter优先级高于注解式配置的filter</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AnnotationFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Annotation Filter.....&quot;</span>);</span><br><span class="line">        filterChain.doFilter(servletRequest,servletResponse);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="18-Listener-监听器"><a href="#18-Listener-监听器" class="headerlink" title="18 Listener 监听器"></a>18 Listener 监听器</h3><p>监听器用于监听web应用中某些对象的创建、销毁、增加、修改、删除等动作的发生，然后做出相应的响应处理。当范围对象的状态发生变化的时候，服务器会自动调用监听器对象中的方法。 </p><h4 id="18-1-监听器分类"><a href="#18-1-监听器分类" class="headerlink" title="18.1 监听器分类"></a>18.1 监听器分类</h4><p>按监听的对象划分，可以分为： </p><p>ServletContext 对象生命周期监听器与属性操作监听器 </p><p>HttpSession 对象生命周期监听器与属性操作监听器 </p><p> ServletRequest 对象生命周期监听器与属性操作监听器 </p><h4 id="18-2-ServletContext-监听器"><a href="#18-2-ServletContext-监听器" class="headerlink" title="18.2 ServletContext 监听器"></a>18.2 <strong>ServletContext</strong> <strong>监听器</strong></h4><h5 id="18-2-1-ServletContext-对象的生命周期监听器"><a href="#18-2-1-ServletContext-对象的生命周期监听器" class="headerlink" title="18.2.1 ServletContext 对象的生命周期监听器"></a>18.2.1 <strong>ServletContext</strong> <strong>对象的生命周期监听器</strong></h5><p>ServletContextListener 接口定义了 ServletContext 对象生命周期的监听行为。 </p><p>void contextInitialized(ServletContextEvent sce) </p><p>ServletContext 对象创建后会触发该监听方法，并将 ServletContext 对象传递到该方法中。</p><p>void contextDestroyed(ServletContextEvent sce) </p><p>ServletContext 对象在销毁之前会触发该监听方法，并将 ServletContext 对象传递到该方法中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ServletContext对象生命周期监听器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContextLifecycleListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="comment">//监听servletcontext对象创建的监听方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">sc</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(sc);</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext Init.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//监听servletcontext对象销毁的监听方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">sc</span> <span class="operator">=</span> sce.getServletContext();</span><br><span class="line">        System.out.println(sc);</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext Destroy.......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.bjsxt.listener.ServletContextLifecycleListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="18-2-2-ServletContext对象的属性操作监听器"><a href="#18-2-2-ServletContext对象的属性操作监听器" class="headerlink" title="18.2.2 ServletContext对象的属性操作监听器"></a>18.2.2 ServletContext对象的属性操作监听器</h5><p>ServletContextAttributeListener 接口定义了对于 ServletContext 对象属性操作的监听行为。</p><p>void attributeAdded(ServletContextAttributeEvent scae) </p><p>向 ServletContext 对象中添加属性时会触发该监听方法，并将 ServletContext 对象传递到该方法中。触发事件的方法 servletContext.setAttribute(“key”,”value”)。 </p><p>void attributeRemoved(ServletContextAttributeEvent scae) </p><p>当从 ServletContext 对象中删除属性时会触发该监听方法，并将 ServletContext 对象传递 到该方法中。触发事件方法 servletContext.removeAttribute(“key”)。 </p><p>void attributeReplaced(ServletContextAttributeEvent scae) </p><p>当从 ServletContext 对象中属性的值发生替换时会触发该监听方法，并将 ServletContext 对象传递到该方法中。触发事件的方法servletContext.setAttribute(“key”,”value”)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//servletcontext属性操作监听器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContextAttrListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextAttributeListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------Start--Added-----------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+scae.getName()+<span class="string">&quot;Value:&quot;</span>+scae.getValue());</span><br><span class="line">        System.out.println(scae.getServletContext());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------End--Added-----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------Start--Removed-----------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+scae.getName()+<span class="string">&quot;Value:&quot;</span>+scae.getValue());</span><br><span class="line">        System.out.println(scae.getServletContext());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------End--Removed-----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletContextAttributeEvent scae)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;---------Start--Replaced-----------------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+scae.getName()+<span class="string">&quot;Value:&quot;</span>+scae.getValue());</span><br><span class="line">        System.out.println(scae.getServletContext());</span><br><span class="line">        System.out.println(<span class="string">&quot;---------End--Replaced-----------------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ServletContext属性监听器测试Servlet</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/attr.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContextAttr</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;BJSXT&quot;</span>);</span><br><span class="line">        servletContext.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;ITBZ&quot;</span>);</span><br><span class="line">        servletContext.removeAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.bjsxt.listener.ServletContextAttrListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="18-3-HttpSession-监听器"><a href="#18-3-HttpSession-监听器" class="headerlink" title="18.3  HttpSession 监听器"></a>18.3  <strong>HttpSession</strong> <strong>监听器</strong></h4><h5 id="18-3-1HttpSession-对象的生命周期监听器"><a href="#18-3-1HttpSession-对象的生命周期监听器" class="headerlink" title="18.3.1HttpSession 对象的生命周期监听器"></a>18.3.1<strong>HttpSession</strong> <strong>对象的生命周期监听器</strong></h5><p>HttpSessionListener 接口定义了 HttpSession 对象生命周期的监听行为。 </p><p>void sessionCreated(HttpSessionEvent se) </p><p>HttpSession 对象创建后会触发该监听方法，并将已创建 HttpSession 对象传递到该方法中。</p><p>void sessionDestroyed(HttpSessionEvent se) </p><p>HttpSession 对象在销毁之前会触发该监听方法，并将要销毁的 HttpSession 对象传递到 该方法中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听HttpSession生命周期的监听器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpSessionLifecycleListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sessionCreated&quot;</span>);</span><br><span class="line">        System.out.println(se.getSession());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sessionDestroyed&quot;</span>);</span><br><span class="line">        System.out.println(se.getSession());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.bjsxt.listener.HttpSessionLifecycleListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="18-3-2-HttpSession-对象的属性操作监听器"><a href="#18-3-2-HttpSession-对象的属性操作监听器" class="headerlink" title="18.3.2 HttpSession 对象的属性操作监听器"></a>18.3.2 <strong>HttpSession</strong> <strong>对象的属性操作监听器</strong></h5><p>HttpSessionAttributeListener 接口定义了对于 HttpSession 对象属性操作的监听行为。 </p><p>void attributeAdded(HttpSessionBindingEvent se) </p><p>向 HttpSession 对象中添加属性时会触发该监听方法，并将 HttpSession 对象传递到该方法中。触发事件的方法 HttpSession.setAttribute(“key”,”value”)。 </p><p>void attributeRemoved(HttpSessionBindingEvent se) </p><p>当从 HttpSession 对象中删除属性时会触发该监听方法，并将 HttpSession 对象传递到该方法中。触发事件方法 HttpSession.removeAttribute(“key”)。 </p><p>void attributeReplaced(HttpSessionBindingEvent se) </p><p>当从 HttpSession 对象中属性的值发生替换时会触发该监听方法，并将 HttpSession 对象传递到该方法中。触发事件的方法 HttpSession.setAttribute(“key”,”value”)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试HttpSession属性监听器</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/attra.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpSessionAttr</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">//获取HttpSession对象</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        session.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;BJSXT&quot;</span>);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;itbz&quot;</span>);</span><br><span class="line">        session.removeAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HttpSession对象属性监听器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpSessionAttrListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionAttributeListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpSessionAttrListener------Start Added------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+se.getName()+<span class="string">&quot;vallue:&quot;</span>+se.getValue());</span><br><span class="line">        System.out.println(se.getSession());</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpSessionAttrListener------End Added------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpSessionAttrListener------Start Removed------&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+se.getName()+<span class="string">&quot;vallue:&quot;</span>+se.getValue());</span><br><span class="line">        System.out.println(se.getSession());</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpSessionAttrListener------End Removed------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(HttpSessionBindingEvent se)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpSessionAttrListener------Start Replaced-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+se.getName()+<span class="string">&quot;vallue:&quot;</span>+se.getValue());</span><br><span class="line">        System.out.println(se.getSession());</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpSessionAttrListener------End Replaced------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.bjsxt.listener.HttpSessionAttrListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="18-4-HttpServletRequest-监听器"><a href="#18-4-HttpServletRequest-监听器" class="headerlink" title="18.4 HttpServletRequest 监听器"></a>18.4 <strong>HttpServletRequest</strong> <strong>监听器</strong></h4><h5 id="18-4-1-HttpServletRequest-对象的生命周期监听器"><a href="#18-4-1-HttpServletRequest-对象的生命周期监听器" class="headerlink" title="18.4.1 HttpServletRequest 对象的生命周期监听器"></a>18.4.1 <strong>HttpServletRequest</strong> <strong>对象的生命周期监听器</strong></h5><p>ServletRequestListener 接口定义了 ServletReqest(是 HttpServletRequest 接口的父接口类型)对象生命周期的监听行为。 </p><p>void requestInitialized(ServletRequestEvent sre) </p><p>HttpServletRequest 对象创建后会触发该监听方法，并将已创建 ServletRequest 对象传递到该方法中。 </p><p>void requestDestroyed(ServletRequestEvent sre) </p><p>HttpServletRequest 对象在销毁之前会触发该监听方法，并将要销毁的 ServletRequest 对 象传递到该方法中。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HttpServletRequest生命周期监听器</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletRequestLifecycleListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Destroyed Request Started========&quot;</span>);</span><br><span class="line">        System.out.println(sre.getServletRequest());</span><br><span class="line">        System.out.println(<span class="string">&quot;Destroyed Request Ended========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Initialized Request Started========&quot;</span>);</span><br><span class="line">        System.out.println(sre.getServletRequest());</span><br><span class="line">        System.out.println(<span class="string">&quot;Initialized Request Ended========&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="18-4-2-HttpServletRequest-对象的属性操作监听器"><a href="#18-4-2-HttpServletRequest-对象的属性操作监听器" class="headerlink" title="18.4.2  HttpServletRequest 对象的属性操作监听器"></a>18.4.2  <strong>HttpServletRequest</strong> <strong>对象的属性操作监听器</strong></h5><p>ServletRequestAttributeListener 接口定义了对于 HttpServletRequest 对象属性操作的监听行为。</p><p>void attributeAdded(ServletRequestAttributeEvent srae) 向 HttpServletRequest 对象中添加属性时会触发该监听方法，并将 ServletRequest 对象传递到该方法中。触发事件的方法HttpServletRequest.setAttribute(“key”,”value”)。 </p><p>void attributeRemoved(ServletRequestAttributeEvent srae) 当从HttpServletRequest 对象中删除属性时会触发该监听方法，并将 ServletRequest 对象 传递到该方法中。触发事件方法 HttpServletRequest.removeAttribute(“key”)。 </p><p>void attributeReplaced(ServletRequestAttributeEvent srae) 当 从HttpServletRequest 对 象 中 属 性 的 值 发 生 替 换 时 会 触 发 该 监 听 方 法 ， 并 将 ServletRequest 对象传递到该方法中。 触发事件的方法 HttpServletRequest.setAttribute(“key”,”value”)。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试HttpServletRequest属性监听器</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/attraa.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletRequestAttr</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        req.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;BJSXT&quot;</span>);</span><br><span class="line">        req.setAttribute(<span class="string">&quot;key&quot;</span>,<span class="string">&quot;ITBZ&quot;</span>);</span><br><span class="line">        req.removeAttribute(<span class="string">&quot;key&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//HttpServletRequest对象属性监听器</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpServletRequestAttrListener</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestAttributeListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeAdded</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpServletRequestAttrListener------Start Added-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+srae.getName()+<span class="string">&quot;vallue:&quot;</span>+srae.getValue());</span><br><span class="line">        System.out.println(srae.getServletRequest());</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpServletRequestAttrListener------End Added------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeRemoved</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpServletRequestAttrListener------Start Removed-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+srae.getName()+<span class="string">&quot;vallue:&quot;</span>+srae.getValue());</span><br><span class="line">        System.out.println(srae.getServletRequest());</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpServletRequestAttrListener------Start Removed------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attributeReplaced</span><span class="params">(ServletRequestAttributeEvent srae)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpServletRequestAttrListener------Start Replaced-----&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Name:&quot;</span>+srae.getName()+<span class="string">&quot;vallue:&quot;</span>+srae.getValue());</span><br><span class="line">        System.out.println(srae.getServletRequest());</span><br><span class="line">        System.out.println(<span class="string">&quot;--HttpServletRequestAttrListener------End Replaced------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="18-5-基于注解式开发监听器"><a href="#18-5-基于注解式开发监听器" class="headerlink" title="18.5  基于注解式开发监听器"></a>18.5  基于注解式开发监听器</h4><p>Listener 支持注解式开发，通过@WebListener 注解替代 web.xml 中 Listener 的配置。</p><h3 id="19-Filter与Listener设计模式"><a href="#19-Filter与Listener设计模式" class="headerlink" title="19  Filter与Listener设计模式"></a>19  Filter与Listener设计模式</h3><h4 id="19-1-Filter-的设计模式"><a href="#19-1-Filter-的设计模式" class="headerlink" title="19.1 Filter 的设计模式"></a>19.1 <strong>Filter</strong> <strong>的设计模式</strong></h4><p>在 Servlet 的 Filter 中使用的责任链设计模式。</p><h5 id="19-1-1-责任链模式特点"><a href="#19-1-1-责任链模式特点" class="headerlink" title="19.1.1  责任链模式特点"></a>19.1.1  <strong>责任链模式特点</strong></h5><p>责任链（Chain of Responsibility）：责任链模式也叫职责链模式，是一种<em><strong>对象行为模式</strong></em>。在责任链模式里，很多对象由每一个对象对其下一个对象的引用而连接起来形成一条链。请求在这个链上传递，直到链上的某一个对象决定处理此请求。发出这个请求的客户端并不需 要知道链上的哪一个对象最终处理这个请求，这使得系统可以在不影响客户端的情况下动态地重新组织链和分配责任</p><h5 id="19-2-2-责任链的优缺点"><a href="#19-2-2-责任链的优缺点" class="headerlink" title="19.2.2 责任链的优缺点"></a>19.2.2 责任链的优缺点</h5><p>优点：</p><p>降低了对象之间的耦合度。 </p><p>增强了系统的可扩展性。 </p><p>增强了给对象指派职责的灵活性。 </p><p> 责任链简化了对象之间的连接。 </p><p>责任分担。每个类只需要处理自己该处理的工作。 </p><p>缺点：</p><p>不能保证请求一定被接收。 </p><p> 对比较长的责任链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。 可能会由于责任链的错误设置而导致系统出错，如可能会造成循环调用。</p><h4 id="19-2-Listener-的设计模式"><a href="#19-2-Listener-的设计模式" class="headerlink" title="19.2 Listener 的设计模式"></a>19.2 <strong>Listener</strong> <strong>的设计模式</strong></h4><p>在 Servlet 的 Listener 中使用的观察者设计模式</p><h5 id="19-2-1-观测者模式的特点"><a href="#19-2-1-观测者模式的特点" class="headerlink" title="19.2.1 观测者模式的特点"></a>19.2.1 观测者模式的特点</h5><p>观察者模式（Observer Pattern）：观察者模式是一种对象行为模式。它定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。 </p><h5 id="19-2-2-观察者模式的优缺点"><a href="#19-2-2-观察者模式的优缺点" class="headerlink" title="19.2.2 观察者模式的优缺点"></a>19.2.2 观察者模式的优缺点</h5><p>优点</p><p>观察者和被观察者是抽象耦合的。 </p><p> 建立一套触发机制。 </p><p>缺点</p><p>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知 到会花费很多时间。 </p><p>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环 调用，可能导致系统崩溃。 </p><p>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而 仅仅只是知道观察目标发生了变化。</p><h2 id="PROJECT-LINK"><a href="#PROJECT-LINK" class="headerlink" title="PROJECT-LINK:"></a>PROJECT-LINK:</h2><p><a href="https://www.aliyundrive.com/s/1Utbx84RG7i">https://www.aliyundrive.com/s/1Utbx84RG7i</a>         提取码: zh90 </p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Servlet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XML学习笔记</title>
      <link href="/archives/30463f21.html"/>
      <url>/archives/30463f21.html</url>
      
        <content type="html"><![CDATA[<h1 id="XML技术"><a href="#XML技术" class="headerlink" title="XML技术"></a>XML技术</h1><h2 id="XML概述"><a href="#XML概述" class="headerlink" title="XML概述"></a>XML概述</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1.概念"></a>1.概念</h3><p>XML（Extensible Markup Language）：可拓展标记语言</p><p>可拓展：标签都是自定义的</p><h3 id="2-发展历程"><a href="#2-发展历程" class="headerlink" title="2.发展历程"></a>2.发展历程</h3><p>HTML 和 XML 都是 W3C（万维网联盟）制定的标准，最开始 HTML 的语法过于松散， </p><p>于是 W3C 制定了更严格的 XML 语法标准，希望能取代 HTML。但是程序员和浏览器厂商 </p><p>并不喜欢使用 XML，于是现在的 XML 更多的用于***<u>配置文件</u><em><strong>及</strong></em><u>传输数据</u>***等功能</p><h4 id="传输数据："><a href="#传输数据：" class="headerlink" title="传输数据："></a>传输数据：</h4><p>在网络中传输数据时并不能传输java对象，所以我们需要将JAVA对象转成字符串传输，其中一种方式就是将对象转为XML类型的字符串</p><h4 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h4><p>使用框架时，需要我们书写配置文件配置相关的参数，让框架满足我们的开发需求。而我们书写的配置文件中就有一种文件类型是XML</p><h3 id="3-xml和html的区别"><a href="#3-xml和html的区别" class="headerlink" title="3.xml和html的区别"></a>3.xml和html的区别</h3><p>xml标签自定义，html标签预定义</p><p>xml语法严格，html语法松散</p><h3 id="4-XML基本语法"><a href="#4-XML基本语法" class="headerlink" title="4.XML基本语法"></a>4.XML基本语法</h3><p>文件后缀名是.xml</p><p>第一行必须是文档声明</p><p>有且仅有一个根标签</p><p>标签必须正确关闭</p><p>标签名区分大小写</p><p>属性值必须用单引号（单双都可）引起来</p><h3 id="5-XML组成部分"><a href="#5-XML组成部分" class="headerlink" title="5.XML组成部分"></a>5.XML组成部分</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line">5.1  文档声明必须放在第一行，格式为：<span class="meta">&lt;?xml 属性列表?&gt;</span></span><br><span class="line">  属性列表：</span><br><span class="line">version：版本号（必须）</span><br><span class="line">encoding：编码方式</span><br><span class="line"></span><br><span class="line">5.3（了解指令）</span><br><span class="line">指令是结合 css 使用的，但现在 XML 一般不结合 CSS，语法为： <span class="meta">&lt;?xml-stylesheet type=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;a.css&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">  5.2 XML 中标签名是自定义的，标签名有以下要求： </span><br><span class="line">     包含数字、字母、其他字符 </span><br><span class="line">     不能以数字和标点符号开头 </span><br><span class="line">     不能包含空格</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stuid</span> <span class="attr">id</span>=<span class="string">&quot;001&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">stuid</span>&gt;</span>5.4  属性值必须用引号（单双都可）引起来</span><br><span class="line"><span class="tag">&lt;<span class="name">name</span> <span class="attr">sss</span>=<span class="string">&#x27;aaa&#x27;</span>&gt;</span>喜羊羊<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">_age.1</span>&gt;</span></span><br><span class="line">&lt;![CDATA[if(a==0)&#123;&#125;]]&gt;</span><br><span class="line">         5.5 文本</span><br><span class="line">  如果想要原样展示文本，需要设置CDATA区，格式为：&lt;![CDATA[文本]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">_age.1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">stuid</span>&gt;</span>2<span class="tag">&lt;/<span class="name">stuid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>meiyangyang<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">age</span>&gt;</span>6<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="1-什么是约束？"><a href="#1-什么是约束？" class="headerlink" title="1.什么是约束？"></a>1.什么是约束？</h3><p>约束是一个文件，可以规定xml文档的书写规则。我们作为框架的使用者，不需要会写约束文件，只要能够在xml种引入约束文档，简单的读懂约束文档即可。XML有两种约束文件类型：</p><p><em><strong><u>DTD和Schema</u></strong></em></p><h3 id="2-DTD约束"><a href="#2-DTD约束" class="headerlink" title="2.DTD约束"></a>2.DTD约束</h3><p>DTD 是一种较简单的约束技术</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ELEMENT students (student*) &gt;</span><br><span class="line">&lt;!ELEMENT student (name,age,sex)&gt;</span><br><span class="line">&lt;!ELEMENT name (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT age (#PCDATA)&gt;</span><br><span class="line">&lt;!ELEMENT sex (#PCDATA)&gt;</span><br><span class="line">&lt;!ATTLIST student number ID #REQUIRED&gt;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">students</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;student.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//引入</span><br><span class="line">本地：<span class="meta">&lt;!DOCTYPE 根标签名 <span class="keyword">SYSTEM</span> <span class="string">&quot;dtd文件的位置&quot;</span>&gt;</span></span><br><span class="line">网络：<span class="meta">&lt;!DOCTYPE 根标签名 <span class="keyword">PUBLIC</span> <span class="string">&quot;dtd 文件的位置&quot;</span> <span class="string">&quot;dtd 文件路径&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;baizhan001&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>喜羊羊<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">age</span>&gt;</span>15<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sex</span>&gt;</span>男<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;baizhan002&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>美羊羊<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">age</span>&gt;</span>20<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">sex</span>&gt;</span>女<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-Schema约束"><a href="#3-Schema约束" class="headerlink" title="3.Schema约束"></a>3.Schema约束</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;xsd:schema xmlns=&quot;http://www.itbaizhan.cn/xml&quot;</span><br><span class="line">        xmlns:xsd=&quot;http://www.w3.org/2001/XMLSchema&quot;</span><br><span class="line">        targetNamespace=&quot;http://www.itbaizhan.cn/xml&quot; elementFormDefault=&quot;qualified&quot;&gt;</span><br><span class="line">    &lt;xsd:element name=&quot;students&quot; type=&quot;studentsType&quot;/&gt;</span><br><span class="line">    &lt;xsd:complexType name=&quot;studentsType&quot;&gt;</span><br><span class="line">        &lt;xsd:sequence&gt;</span><br><span class="line">            &lt;xsd:element name=&quot;student&quot; type=&quot;studentType&quot; minOccurs=&quot;0&quot; maxOccurs=&quot;unbounded&quot;/&gt;</span><br><span class="line">        &lt;/xsd:sequence&gt;</span><br><span class="line">    &lt;/xsd:complexType&gt;</span><br><span class="line"></span><br><span class="line">    &lt;xsd:complexType name=&quot;studentType&quot;&gt;</span><br><span class="line">        &lt;xsd:sequence&gt;</span><br><span class="line">            &lt;xsd:element name=&quot;name&quot; type=&quot;xsd:string&quot;/&gt;</span><br><span class="line">            &lt;xsd:element name=&quot;age&quot; type=&quot;ageType&quot; /&gt;</span><br><span class="line">            &lt;xsd:element name=&quot;sex&quot; type=&quot;sexType&quot; /&gt;</span><br><span class="line">        &lt;/xsd:sequence&gt;</span><br><span class="line">        &lt;xsd:attribute name=&quot;number&quot; type=&quot;numberType&quot; use=&quot;required&quot;/&gt;</span><br><span class="line">    &lt;/xsd:complexType&gt;</span><br><span class="line">    &lt;xsd:simpleType name=&quot;sexType&quot;&gt;</span><br><span class="line">        &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;</span><br><span class="line">            &lt;xsd:enumeration value=&quot;male&quot;/&gt;</span><br><span class="line">            &lt;xsd:enumeration value=&quot;female&quot;/&gt;</span><br><span class="line">        &lt;/xsd:restriction&gt;</span><br><span class="line">    &lt;/xsd:simpleType&gt;</span><br><span class="line">    &lt;xsd:simpleType name=&quot;ageType&quot;&gt;</span><br><span class="line">        &lt;xsd:restriction base=&quot;xsd:integer&quot;&gt;</span><br><span class="line">            &lt;xsd:minInclusive value=&quot;0&quot;/&gt;</span><br><span class="line">            &lt;xsd:maxInclusive value=&quot;256&quot;/&gt;</span><br><span class="line">        &lt;/xsd:restriction&gt;</span><br><span class="line">    &lt;/xsd:simpleType&gt;</span><br><span class="line">    &lt;xsd:simpleType name=&quot;numberType&quot;&gt;</span><br><span class="line">        &lt;xsd:restriction base=&quot;xsd:string&quot;&gt;</span><br><span class="line">            &lt;xsd:pattern value=&quot;baizhan_\d&#123;4&#125;&quot;/&gt;</span><br><span class="line">        &lt;/xsd:restriction&gt;</span><br><span class="line">    &lt;/xsd:simpleType&gt;</span><br><span class="line">&lt;/xsd:schema&gt; </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version = <span class="string">&quot;1.0&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">students</span></span></span><br><span class="line"><span class="tag">  （<span class="attr">1</span>）<span class="attr">写xml文档的根标签</span></span></span><br><span class="line"><span class="tag">        </span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span> = <span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  （<span class="attr">2</span>）<span class="attr">引入xsi前缀</span>：<span class="attr">确定Schema文件的版本</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>  </span></span><br><span class="line"><span class="tag">          </span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span> = <span class="string">&quot;http://www.itbaizhan.cn/xml student.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  （<span class="attr">3</span>）<span class="attr">引入Schema文件</span></span></span><br><span class="line"><span class="tag">        <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;Schema 文件定义的命名空间 Schema文件的具体路径  </span></span></span><br><span class="line"><span class="string"><span class="tag">          </span></span></span><br><span class="line"><span class="string"><span class="tag">    </span></span></span><br><span class="line"><span class="string"><span class="tag">        xmlns = &quot;</span><span class="attr">http:</span>//<span class="attr">www.itbaizhan.cn</span>/<span class="attr">xml</span>&quot;&gt;</span></span><br><span class="line">  （4）为 Schema 约束的标签声明前缀     </span><br><span class="line">         xmlns:前缀=&quot;Schema 文件定义的命名空间&quot;                                    </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;baizhan_0001&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>喜羊羊<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>14<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>male<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">student</span> <span class="attr">number</span>=<span class="string">&quot;baizhan_0002&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>meiyangyang<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">age</span>&gt;</span>8<span class="tag">&lt;/<span class="name">age</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">sex</span>&gt;</span>female<span class="tag">&lt;/<span class="name">sex</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">student</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">students</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="XML解析"><a href="#XML解析" class="headerlink" title="XML解析"></a>XML解析</h2><p>XML 解析即读写 XML 文档中的数据。框架的开发者通过 XML 解析读取框架使用者配 </p><p>置的参数信息，开发者也可以通过 XML 解析读取网络传来的数据。（html）</p><h3 id="1-XML解析思想"><a href="#1-XML解析思想" class="headerlink" title="1.XML解析思想"></a>1.XML解析思想</h3><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>将标记语言文档一次性加载进内存，在内存中形成一颗dom树</p><p>​优点：操作方便，可以对文档进行 CRUD 的所有操作 </p><p>​缺点：占内存 </p><h4 id="SAX"><a href="#SAX" class="headerlink" title="SAX"></a>SAX</h4><p>逐行读取，基于事件驱动的。</p><p>​优点：不占内存，一般用于手机 APP 开发中读取 XML </p><p>​缺点：只能读取，不能增删改 </p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="2-常见的解析器"><a href="#2-常见的解析器" class="headerlink" title="2.常见的解析器"></a>2.常见的解析器</h3><h4 id="JAXP"><a href="#JAXP" class="headerlink" title="JAXP"></a>JAXP</h4><p>SUN 公司提供的解析器，支持 DOM 和 SAX 两种思想 </p><h4 id="DOM4J"><a href="#DOM4J" class="headerlink" title="DOM4J"></a>DOM4J</h4><p>一款非常优秀的解析器 </p><h4 id="Jsoup"><a href="#Jsoup" class="headerlink" title="Jsoup"></a>Jsoup</h4><p>Jsoup 是一款 Java 的 HTML 解析器，可直接解析某个 URL 地址、HTML 文 本内容。它提供了一套非常省力的 API，可通过 DOM，CSS 以及类似于 jQuery 的操作方 法来取出和操作数据 </p><h4 id="PULL"><a href="#PULL" class="headerlink" title="PULL"></a>PULL</h4><p>Android 操作系统内置的解析器，支持 SAX 思想</p><h2 id="Jsoup解析器"><a href="#Jsoup解析器" class="headerlink" title="Jsoup解析器"></a>Jsoup解析器</h2><h3 id="1-快速入门"><a href="#1-快速入门" class="headerlink" title="1.快速入门"></a>1.快速入门</h3><p>（1）导入jar包</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220125121517270.png" alt="image-20220125121517270"></p><p>（2）加载XML文档进内存，获取DOM树对象Document</p><p>（3）获取对应的标签Element对象</p><p>（4）获取数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baizhan.xml.jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo1</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取XML中所有的学生姓名</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">       <span class="comment">//1.加载XML文档进内存，获取DOM树对象Document</span></span><br><span class="line">        <span class="comment">//1.1 找到XML文档的绝对路径</span></span><br><span class="line">        <span class="comment">//利用类加载器，通过项目中文件的相对路径找到硬盘中的绝对路径</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Demo1.class.getClassLoader();</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> classLoader.getResource(<span class="string">&quot;com/baizhan/xml/xsd/student.xml&quot;</span>).getPath();</span><br><span class="line">        System.out.println(path);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.2 根据XML文档的路径，把XML文档加载进内存，并解析成Dom树对象</span></span><br><span class="line">         <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        System.out.println(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取对应的标签Element对象</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">name</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.获取数据</span></span><br><span class="line">        <span class="keyword">for</span>(Element element:name)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> element.text();</span><br><span class="line">            System.out.println(text);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-常用对象"><a href="#2-常用对象" class="headerlink" title="2.常用对象"></a>2.常用对象</h3><h4 id="Jsoup-1"><a href="#Jsoup-1" class="headerlink" title="Jsoup"></a>Jsoup</h4><p>解析xml或html，形成dom树对象</p><p>常用方法;</p><p>static Document parse(File in,String charsetName):解析本地文件</p><p>static Document parse(String html)：解析 html 或 xml 字符串</p><p>static Document parse(URL url, int timeoutMillis)：解析网页源文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baizhan.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo2</span> &#123;</span><br><span class="line">    <span class="comment">//Jsoup</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//解析本地XML</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Demo2.class.getClassLoader().getResource(<span class="string">&quot;com/baizhan/xml/xsd/student.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(document);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------------&quot;</span>);</span><br><span class="line">        <span class="comment">//解析字符串</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document1</span> <span class="operator">=</span> Jsoup.parse(<span class="string">&quot;&lt;student number=\&quot;baizhan_0001\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;name&gt;喜羊羊&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;age&gt;14&lt;/age&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;sex&gt;male&lt;/sex&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/student&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;student number=\&quot;baizhan_0002\&quot;&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;name&gt;meiyangyang&lt;/name&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;age&gt;8&lt;/age&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;        &lt;sex&gt;female&lt;/sex&gt;\n&quot;</span> +</span><br><span class="line">                <span class="string">&quot;    &lt;/student&gt;&quot;</span>);</span><br><span class="line">        System.out.println(document1);</span><br><span class="line">        System.out.println(<span class="string">&quot;-------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//解析网络资源（后面的是解析所需要的时间）</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document2</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;https://www.baidu.com&quot;</span>), <span class="number">8000</span>);</span><br><span class="line">        System.out.println(document2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Document"><a href="#Document" class="headerlink" title="Document"></a>Document</h4><p>xml的dom树对象</p><p>常用方法：</p><p>Element getElementById(String id)：根据 id 获取元素 </p><p>Elements getElementsByTag(String tagName)：根据标签名获取元素 </p><p>Elements getElementsByAttribute(String key)：根据属性获取元素 </p><p>Elements getElementsByAttributeValue(String key,String value)：根据属性名 &#x3D;属性值获取元素。 </p><p>Elements select(Sting cssQuery)：根据选择器选取元素。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baizhan.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo3</span> &#123;</span><br><span class="line">    <span class="comment">//Document</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Demo2.class.getClassLoader().getResource(<span class="string">&quot;com/baizhan/xml/jsoup/student.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据id获取元素</span></span><br><span class="line">        <span class="type">Element</span> <span class="variable">element1</span> <span class="operator">=</span> document.getElementById(<span class="string">&quot;a1&quot;</span>);</span><br><span class="line">        System.out.println(element1.text());</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据标签获取元素</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">age</span> <span class="operator">=</span> document.getElementsByTag(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Element element:age)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(element.text());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//根据属性获取元素</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">number</span> <span class="operator">=</span> document.getElementsByAttribute(<span class="string">&quot;number&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Element element:number)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//根据属性名=属性值获取元素</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elements2</span> <span class="operator">=</span> document.getElementsByAttributeValue(<span class="string">&quot;number&quot;</span>,<span class="string">&quot;baizhan_0001&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Element element:elements2)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(element);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;-----------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用css选择器获取元素</span></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">element3</span> <span class="operator">=</span> document.select(<span class="string">&quot;#a1&quot;</span>);</span><br><span class="line">        System.out.println(element3);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elements4</span> <span class="operator">=</span> document.select(<span class="string">&quot;.hh&quot;</span>);<span class="comment">//类选择器</span></span><br><span class="line">        System.out.println(elements4);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elements5</span> <span class="operator">=</span> document.select(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(elements5);</span><br><span class="line">        System.out.println(<span class="string">&quot;----------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Element"><a href="#Element" class="headerlink" title="Element"></a>Element</h4><p>元素对象</p><p>常用方法：</p><p>String text()：获取元素包含的纯文本。 </p><p>String html()：获取元素包含的带标签的文本。 </p><p>String attr(String attributeKey)：获取元素的属性值。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baizhan.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo4</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Demo2.class.getClassLoader().getResource(<span class="string">&quot;com/baizhan/xml/jsoup/student.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path),<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Elements</span> <span class="variable">elements</span> <span class="operator">=</span> document.getElementsByAttributeValue(<span class="string">&quot;number&quot;</span>, <span class="string">&quot;baizhan_0001&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span>(Element element:elements)</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(element.text());</span><br><span class="line">            <span class="comment">//String text()：获取元素包含的纯文本。 </span></span><br><span class="line">           </span><br><span class="line">            System.out.println(element.html());</span><br><span class="line">            <span class="comment">//String html()：获取元素包含的带标签的文本。 </span></span><br><span class="line">            </span><br><span class="line">            System.out.println(element.attr(<span class="string">&quot;number&quot;</span>));</span><br><span class="line">            <span class="comment">//String attr(String attributeKey)：获取元素的属性值。</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Xpath解析"><a href="#Xpath解析" class="headerlink" title="Xpath解析"></a>Xpath解析</h3><p>XPath 即为 XML 路径语言，它是一种用来确定标记语言文档中某部分位置的语言。</p><p>使用方法： </p><ol><li><p>导入 Xpath 的 jar 包</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220125201610734.png" alt="image-20220125201610734"></p></li><li><p>获取 Document 对象 </p></li><li><p>将 Document 对象转为 JXDocument 对象 </p></li><li><p>JXDocument 调用 selN(String xpath)，获取 List<JXNode>对象。 </p></li><li><p>遍历 List<JXNode>，调用 JXNode 的 getElement()，转为 Element 对象。 </p></li><li><p>处理 Element 对象。 </p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baizhan.xml.jsoup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.exception.XpathSyntaxErrorException;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXDocument;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXNode;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo5</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, XpathSyntaxErrorException &#123;</span><br><span class="line">        <span class="comment">//Xpath</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.获取Document对象</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> Demo5.class.getClassLoader().getResource(<span class="string">&quot;com/baizhan/xml/jsoup/student.xml&quot;</span>).getPath();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.将Document对象转为JXDocument对象</span></span><br><span class="line">        <span class="type">JXDocument</span> <span class="variable">jxDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JXDocument</span>(document);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.JXDocument调用selN（String xpath），获取List&lt;JXNode&gt;对象</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        List&lt;JXNode&gt; jxNodes = jxDocument.selN(&quot;//name&quot;);</span></span><br><span class="line"><span class="comment">//         List&lt;JXNode&gt; jxNodes = jxDocument.selN(&quot;//student[@number=&#x27;baizhan_0002&#x27;]&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//想拿到baizhan0001的年龄</span></span><br><span class="line">        List&lt;JXNode&gt; jxNodes = jxDocument.selN(<span class="string">&quot;//student[@number=&#x27;baizhan_0001&#x27;]/age&quot;</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.遍历List&lt;JXNode&gt;,调用JXNode的getElement(),转为Element对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(JXNode jxNode:jxNodes)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">Element</span> <span class="variable">element</span> <span class="operator">=</span> jxNode.getElement();</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//6.处理Element对象</span></span><br><span class="line"><span class="comment">//            System.out.println(element.text());</span></span><br><span class="line">            System.out.println(element);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="XML案例"><a href="#XML案例" class="headerlink" title="XML案例"></a>XML案例</h2><h3 id="1-使用Jsoup完成网页爬虫"><a href="#1-使用Jsoup完成网页爬虫" class="headerlink" title="1.使用Jsoup完成网页爬虫"></a>1.使用Jsoup完成网页爬虫</h3><p>网络爬虫（web crawler）：自动抓取互联网信息的程序。</p><p>Jsoup 可以通过 URL 获取网页的 HTML 源文件，源文件中包含着网站数据，我们可以 </p><p>解析 HTML 源文件的数据来获取我们需要的信息。 </p><p>步骤： </p><p> 引入 jar 包。 </p><p> 1.使用 Jsoup 获取网页 HTML 源文件，转为 Document 对象 </p><p> 2.通过 Document 对象，获取需要的 Element 对象 </p><p> 3.获取 Element 对象的数据。 </p><p> 4.设置循环自动爬取</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baizhan.xml.crawler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.exception.XpathSyntaxErrorException;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXDocument;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXNode;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrawlerDemo</span> &#123;</span><br><span class="line">    <span class="comment">//爬虫</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//2.解析XML配置文件，加载XML文件到内存，转换成Document对象</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> CrawlerDemo.class.getClassLoader().getResource(<span class="string">&quot;com/baizhan/xml/crawler/Crawler.xml&quot;</span>).getPath();</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document1</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.获取XML配置文件的配置信息</span></span><br><span class="line">            <span class="type">JXDocument</span> <span class="variable">jxDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JXDocument</span>(document1);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;JXNode&gt; minNodes = jxDocument.selN(<span class="string">&quot;//min&quot;</span>);</span><br><span class="line">                List&lt;JXNode&gt; maxNodes = jxDocument.selN(<span class="string">&quot;//max&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">Element</span> <span class="variable">minElement</span> <span class="operator">=</span> minNodes.get(<span class="number">0</span>).getElement();</span><br><span class="line">                <span class="type">Element</span> <span class="variable">maxElement</span> <span class="operator">=</span> maxNodes.get(<span class="number">0</span>).getElement();</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">maxStr</span> <span class="operator">=</span> maxElement.text();</span><br><span class="line">                <span class="type">String</span> <span class="variable">minStr</span> <span class="operator">=</span> minElement.text();</span><br><span class="line"></span><br><span class="line">                min = Integer.parseInt(minStr);</span><br><span class="line">                max = Integer.parseInt(maxStr);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (XpathSyntaxErrorException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置喜欢自动爬取</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> min;i&lt;=max;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">//2.使用Jsoup获取网页HTML源文件，转为Document对象</span></span><br><span class="line">             <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://daily.zhihu.com/story/&quot;</span>+i), <span class="number">8000</span>);</span><br><span class="line"><span class="comment">//        System.out.println(document);</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//3.通过Document对象，获取需要的Element对象</span></span><br><span class="line">             <span class="comment">//获取头图，标题，作者，正文</span></span><br><span class="line">             <span class="type">Elements</span> <span class="variable">headerImgEle</span> <span class="operator">=</span> document.getElementsByAttributeValue(<span class="string">&quot;alt&quot;</span>, <span class="string">&quot;头图&quot;</span>);</span><br><span class="line">             <span class="type">Elements</span> <span class="variable">headerEle</span> <span class="operator">=</span> document.select(<span class="string">&quot;.DailyHeader-title&quot;</span>);</span><br><span class="line">             <span class="type">Elements</span> <span class="variable">authorEle</span> <span class="operator">=</span> document.select(<span class="string">&quot;.author&quot;</span>);</span><br><span class="line">             <span class="type">Elements</span> <span class="variable">contentEle</span> <span class="operator">=</span> document.select(<span class="string">&quot;.content&quot;</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//4.获取Element对象的数据</span></span><br><span class="line">             <span class="type">String</span> <span class="variable">headerImg</span> <span class="operator">=</span> headerImgEle.get(<span class="number">0</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">             <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> headerEle.text();</span><br><span class="line">             <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> authorEle.text();</span><br><span class="line">             <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> contentEle.text();</span><br><span class="line">             System.out.println(headerImg);</span><br><span class="line">             System.out.println(header);</span><br><span class="line">             System.out.println(author);</span><br><span class="line">             System.out.println(content);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-使用XML配置爬虫程序的参数"><a href="#2-使用XML配置爬虫程序的参数" class="headerlink" title="2.使用XML配置爬虫程序的参数"></a>2.使用XML配置爬虫程序的参数</h3><p>爬虫程序有一些参数需要配置，如果直接将参数写在 JAVA 程序中，则修改参数非常不 </p><p>方便，所以此时我们将参数写在 XML 配置文件中，通过解析 XML 文件获取参数的配置信 </p><p>息。</p><p>步骤： </p><ol><li><p>写爬虫程序的 XML 配置文件 </p></li><li><p>解析 XML 配置文件：加载 XML 文件到内存，转为 Document 对象。 </p></li><li><p>获取 XML 配置文件的配置信息 </p></li><li><p>将配置信息应用于爬虫程序中</p></li></ol><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//写爬虫程序的XML配置文件</span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;Crawler&gt;</span><br><span class="line">&lt;min&gt;9734820&lt;/min&gt;</span><br><span class="line">&lt;max&gt;9734946&lt;/max&gt;</span><br><span class="line">&lt;/Crawler&gt;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.baizhan.xml.crawler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.exception.XpathSyntaxErrorException;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXDocument;</span><br><span class="line"><span class="keyword">import</span> cn.wanghaomiao.xpath.model.JXNode;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.Jsoup;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Document;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.nodes.Element;</span><br><span class="line"><span class="keyword">import</span> org.jsoup.select.Elements;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.MalformedURLException;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CrawlerDemo</span> &#123;</span><br><span class="line">    <span class="comment">//爬虫</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>  &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">max</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//2.解析XML配置文件，加载XML文件到内存，转换成Document对象</span></span><br><span class="line">            </span><br><span class="line">            <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> CrawlerDemo.class.getClassLoader().getResource(<span class="string">&quot;com/baizhan/xml/crawler/Crawler.xml&quot;</span>).getPath();</span><br><span class="line">            <span class="type">Document</span> <span class="variable">document1</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">File</span>(path), <span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//3.获取XML配置文件的配置信息</span></span><br><span class="line">            <span class="type">JXDocument</span> <span class="variable">jxDocument</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JXDocument</span>(document1);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                List&lt;JXNode&gt; minNodes = jxDocument.selN(<span class="string">&quot;//min&quot;</span>);</span><br><span class="line">                List&lt;JXNode&gt; maxNodes = jxDocument.selN(<span class="string">&quot;//max&quot;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="type">Element</span> <span class="variable">minElement</span> <span class="operator">=</span> minNodes.get(<span class="number">0</span>).getElement();</span><br><span class="line">                <span class="type">Element</span> <span class="variable">maxElement</span> <span class="operator">=</span> maxNodes.get(<span class="number">0</span>).getElement();</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">maxStr</span> <span class="operator">=</span> maxElement.text();</span><br><span class="line">                <span class="type">String</span> <span class="variable">minStr</span> <span class="operator">=</span> minElement.text();</span><br><span class="line"></span><br><span class="line">                min = Integer.parseInt(minStr);</span><br><span class="line">                max = Integer.parseInt(maxStr);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (XpathSyntaxErrorException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> min;i&lt;=max;i++)</span><br><span class="line">     &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             <span class="comment">//2.使用Jsoup获取网页HTML源文件，转为Document对象</span></span><br><span class="line">             <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> Jsoup.parse(<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://daily.zhihu.com/story/&quot;</span>+i), <span class="number">8000</span>);</span><br><span class="line"><span class="comment">//        System.out.println(document);</span></span><br><span class="line"></span><br><span class="line">             <span class="comment">//3.通过Document对象，获取需要的Element对象</span></span><br><span class="line">             <span class="comment">//获取头图，标题，作者，正文</span></span><br><span class="line">             <span class="type">Elements</span> <span class="variable">headerImgEle</span> <span class="operator">=</span> document.getElementsByAttributeValue(<span class="string">&quot;alt&quot;</span>, <span class="string">&quot;头图&quot;</span>);</span><br><span class="line">             <span class="type">Elements</span> <span class="variable">headerEle</span> <span class="operator">=</span> document.select(<span class="string">&quot;.DailyHeader-title&quot;</span>);</span><br><span class="line">             <span class="type">Elements</span> <span class="variable">authorEle</span> <span class="operator">=</span> document.select(<span class="string">&quot;.author&quot;</span>);</span><br><span class="line">             <span class="type">Elements</span> <span class="variable">contentEle</span> <span class="operator">=</span> document.select(<span class="string">&quot;.content&quot;</span>);</span><br><span class="line"></span><br><span class="line">             <span class="comment">//4.获取Element对象的数据</span></span><br><span class="line">             <span class="type">String</span> <span class="variable">headerImg</span> <span class="operator">=</span> headerImgEle.get(<span class="number">0</span>).attr(<span class="string">&quot;src&quot;</span>);</span><br><span class="line">             <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> headerEle.text();</span><br><span class="line">             <span class="type">String</span> <span class="variable">author</span> <span class="operator">=</span> authorEle.text();</span><br><span class="line">             <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> contentEle.text();</span><br><span class="line">             System.out.println(headerImg);</span><br><span class="line">             System.out.println(header);</span><br><span class="line">             System.out.println(author);</span><br><span class="line">             System.out.println(content);</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"></span><br><span class="line">         &#125;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码位置：「XML技术Src」<a href="https://www.aliyundrive.com/s/rQv8P8PiVdJ">https://www.aliyundrive.com/s/rQv8P8PiVdJ</a> 点击链接保存，或者复制本段内容，打开「阿里云盘」APP ，无需下载极速在线查看，视频原画倍速播放。</p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> XML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC学习笔记</title>
      <link href="/archives/319c21eb.html"/>
      <url>/archives/319c21eb.html</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC简介"><a href="#SpringMVC简介" class="headerlink" title="SpringMVC简介"></a>SpringMVC简介</h2><h3 id="MVC模型"><a href="#MVC模型" class="headerlink" title="MVC模型"></a>MVC模型</h3><p>MVC全称Model View Controller，是一种设计创建Web应用程序的模式。这三个单词分别代表Web应用的三个部分：</p><p>Model(模型)：指数据模型。用于存储数据以及处理用户请求的业务逻辑。在Web应用中，JavaBean对象、业务模型等都属于Model。</p><p>View(视图)：用于展示模型中的数据的，一般为jsp或html文件</p><p>Controller(控制器)：是应用程序中处理用户交互的部分，接受视图提出的请求，将数据交给模型处理，并将处理后的结果交给视图显示。</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211214152348721.png" alt="image-20211214152348721"></p><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><p>SpringMVC是一个基于MVC模式的轻量级Web框架，是Spring框架的一个模块，和Spring可以直接整合使用。SpringMVC代替了Servlet技术，它通过一套注解，让一个简单的Java类成为处理请求的<strong>控制器</strong>，而无须实现任何接口。</p><p>(SpringMVC代替了S)</p><h2 id="SpringMVC入门案例"><a href="#SpringMVC入门案例" class="headerlink" title="SpringMVC入门案例"></a>SpringMVC入门案例</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220416121847360.png" alt="image-20220416121847360"></p><p>接下来我们编写一个SpringMVC的入门案例</p><h4 id="1-引入maven创建web项目，补齐包结构"><a href="#1-引入maven创建web项目，补齐包结构" class="headerlink" title="1.引入maven创建web项目，补齐包结构"></a>1.引入maven创建web项目，补齐包结构</h4><h4 id="2-引入相关依赖和tomcat插件"><a href="#2-引入相关依赖和tomcat插件" class="headerlink" title="2.引入相关依赖和tomcat插件"></a>2.引入相关依赖和tomcat插件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mvc_demo1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>mvc_demo1 Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project&#x27;s website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring核心模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringWeb模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- SpringMVC模块 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Servlet --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- JSP --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">java.util.logging.SimpleFormatter.format</span>&gt;</span>%1$tH:%1$tM:%1$tS %2$s%n%4$s: %5$s%6$s%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">java.util.logging.SimpleFormatter.format</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-在web-xml中配置前端控制器DispathcerServlet"><a href="#3-在web-xml中配置前端控制器DispathcerServlet" class="headerlink" title="3.在web.xml中配置前端控制器DispathcerServlet"></a>3.在web.xml中配置前端控制器DispathcerServlet</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">web-app</span> <span class="keyword">PUBLIC</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span></span><br><span class="line"><span class="meta"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--SpringMVC前端控制器，本质是一个Servlet，接收所有请求，在容器启动时就会加载--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-编写SpringMVC核心配置文件springmvc-xml，该文件和Spring配置文件写法一样"><a href="#4-编写SpringMVC核心配置文件springmvc-xml，该文件和Spring配置文件写法一样" class="headerlink" title="4.编写SpringMVC核心配置文件springmvc.xml，该文件和Spring配置文件写法一样"></a>4.编写SpringMVC核心配置文件springmvc.xml，该文件和Spring配置文件写法一样</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-编写控制器"><a href="#5-编写控制器" class="headerlink" title="5.编写控制器"></a>5.编写控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController1</span> &#123;</span><br><span class="line">    <span class="comment">// 该方法的访问路径是/c1/hello1</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/c1/hello1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helloMVC</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello SpringMVC!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用tomcat插件启动项目，访问 <a href="http://localhost:8080/c1/hello1">http://localhost:8080/c1/hello1</a></p><p>使用SpringMVC必须要配置的是<strong>前端控制器</strong></p><h2 id="SpringMVC执行流程"><a href="#SpringMVC执行流程" class="headerlink" title="SpringMVC执行流程"></a>SpringMVC执行流程</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211222093922306.png" alt="image-20211222093922306"></p><h3 id="SpringMVC的组件"><a href="#SpringMVC的组件" class="headerlink" title="SpringMVC的组件:"></a>SpringMVC的组件:</h3><ul><li>DispatcherServlet：前端控制器，接受所有请求，调用其他组件。</li><li>HandlerMapping：处理器映射器，根据配置找到方法的执行链。</li><li>HandlerAdapter：处理器适配器，根据方法类型找到对应的处理器。</li><li>ViewResolver：视图解析器，找到指定视图。</li></ul><h3 id="组件的工作流程"><a href="#组件的工作流程" class="headerlink" title="组件的工作流程"></a>组件的工作流程</h3><ol><li>客户端将请求发送给前端控制器。</li><li>前端控制器将请求发送给处理器映射器，处理器映射器根据路径找到方法的执行链，返回给前端控制器。</li><li>前端控制器将方法的执行链发送给处理器适配器，处理器适配器根据方法类型找到对应的处理器。</li><li>处理器执行方法，将结果返回给前端控制器。</li><li>前端控制器将结果发送给视图解析器，视图解析器找到视图文件位置。</li><li>视图渲染数据并将结果显示到客户端</li></ol><h2 id="SpringMVC参数获取-封装为简单数据类型"><a href="#SpringMVC参数获取-封装为简单数据类型" class="headerlink" title="SpringMVC参数获取_封装为简单数据类型"></a>SpringMVC参数获取_封装为简单数据类型</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221144403791.png" alt="image-20211221144403791"></p><p>在Servlet中我们通过<code>request.getParameter(name)</code>获取请求参数。该方式存在两个问题：</p><ul><li>请求参数较多时会出现代码冗余。</li><li>与容器紧耦合。</li></ul><p>而SpringMVC支持参数注入的方式用于获取请求数据，即将请求参数直接封装到方法的参数当中。用法如下：</p><p>1.编写控制器方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取简单类型参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleParam</span><span class="params">(String username,<span class="type">int</span> age)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    System.out.println(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问该方法时，请求参数名和方法参数名相同，即可完成自动封装。</p><p><a href="http://localhost:8080/c1/param1?username=bz&amp;age=10">http://localhost:8080/c1/param1?username=bz&amp;age=10</a></p><h4 id="在SpringMVC中，接受简单类型参数时，请求参数名和方法参数名相同即可自动封装"><a href="#在SpringMVC中，接受简单类型参数时，请求参数名和方法参数名相同即可自动封装" class="headerlink" title="在SpringMVC中，接受简单类型参数时，请求参数名和方法参数名相同即可自动封装"></a>在SpringMVC中，接受简单类型参数时，请求参数名和方法参数名相同即可自动封装</h4><h2 id="SpringMVC参数获取-封装为对象类型"><a href="#SpringMVC参数获取-封装为对象类型" class="headerlink" title="SpringMVC参数获取_封装为对象类型"></a>SpringMVC参数获取_封装为对象类型</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221144613779.png" alt="image-20211221144613779"></p><p>SpringMVC支持将参数直接封装为对象，写法如下：</p><h3 id="封装单个对象"><a href="#封装单个对象" class="headerlink" title="封装单个对象"></a>封装单个对象</h3><h4 id="1-编写实体类"><a href="#1-编写实体类" class="headerlink" title="1.编写实体类"></a>1.编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写控制器方法"><a href="#2-编写控制器方法" class="headerlink" title="2.编写控制器方法"></a>2.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取对象类型参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">objParam</span><span class="params">(Student student)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-访问该方法时，请求参数名和方法参数的属性名相同，即可完成自动封装。"><a href="#3-访问该方法时，请求参数名和方法参数的属性名相同，即可完成自动封装。" class="headerlink" title="3.访问该方法时，请求参数名和方法参数的属性名相同，即可完成自动封装。"></a>3.访问该方法时，请求参数名和方法参数的属性名相同，即可完成自动封装。</h4><p><a href="http://localhost:8080/c1/param2?id=1&amp;name=bz&amp;sex=female">http://localhost:8080/c1/param2?id=1&amp;name=bz&amp;sex=female</a></p><h3 id="封装关联对象"><a href="#封装关联对象" class="headerlink" title="封装关联对象"></a>封装关联对象</h3><h4 id="1-编写实体类-1"><a href="#1-编写实体类-1" class="headerlink" title="1.编写实体类"></a>1.编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String info;</span><br><span class="line">    <span class="keyword">private</span> String psotcode;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Address&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;info=&#x27;&quot;</span> + info + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, psotcode=&#x27;&quot;</span> + psotcode + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getInfo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setInfo</span><span class="params">(String info)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.info = info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPsotcode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> psotcode;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPsotcode</span><span class="params">(String psotcode)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.psotcode = psotcode;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写控制器方法-1"><a href="#2-编写控制器方法-1" class="headerlink" title="2.编写控制器方法"></a>2.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取关联对象类型参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">objParam2</span><span class="params">(Student student)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-访问该方法时，请求参数名和方法参数的属性名相同，即可完成自动封装。-1"><a href="#3-访问该方法时，请求参数名和方法参数的属性名相同，即可完成自动封装。-1" class="headerlink" title="3.访问该方法时，请求参数名和方法参数的属性名相同，即可完成自动封装。"></a>3.访问该方法时，请求参数名和方法参数的属性名相同，即可完成自动封装。</h4><p><a href="http://localhost:8080/c1/param3?id=1&amp;name=bz&amp;sex=female&amp;address.info=beijing&amp;address.postcode=030000">http://localhost:8080/c1/param3?id=1&amp;name=bz&amp;sex=female&amp;address.info=beijing&amp;address.postcode=030000</a></p><h4 id="4-我们也可以使用表单发送带有参数的请求-直接访问jsp-："><a href="#4-我们也可以使用表单发送带有参数的请求-直接访问jsp-：" class="headerlink" title="4.我们也可以使用表单发送带有参数的请求(直接访问jsp)："></a>4.我们也可以使用表单发送带有参数的请求(直接访问jsp)：</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;表单提交&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/c1/param3&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    id:&lt;input name=<span class="string">&quot;id&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">    性别:&lt;input name=<span class="string">&quot;sex&quot;</span>&gt;</span><br><span class="line">    地址:&lt;input name=<span class="string">&quot;address.info&quot;</span>&gt;</span><br><span class="line">    邮编:&lt;input name=<span class="string">&quot;address.postcode&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC参数获取-封装为集合类型"><a href="#SpringMVC参数获取-封装为集合类型" class="headerlink" title="SpringMVC参数获取_封装为集合类型"></a>SpringMVC参数获取_封装为集合类型</h2><p>SpringMVC支持将参数封装为List或Map集合，写法如下：</p><h3 id="封装为List集合"><a href="#封装为List集合" class="headerlink" title="封装为List集合"></a>封装为List集合</h3><h3 id="封装为简单数据类型集合"><a href="#封装为简单数据类型集合" class="headerlink" title="封装为简单数据类型集合"></a>封装为简单数据类型集合</h3><h4 id="1-编写控制器方法"><a href="#1-编写控制器方法" class="headerlink" title="1.编写控制器方法"></a>1.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 绑定简单数据类型List参数，参数前必须添加@RequestParam注解</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param4&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; users)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该方法也可以绑定数组类型：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//绑定数组在参数前也必须添加@RequestParam注解</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listParam2</span><span class="params">(<span class="meta">@RequestParam</span> String[] users)</span>&#123;</span><br><span class="line">    System.out.println(users[<span class="number">0</span>]);</span><br><span class="line">    System.out.println(users[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-请求的参数写法"><a href="#2-请求的参数写法" class="headerlink" title="2.请求的参数写法"></a>2.请求的参数写法</h4><p><a href="http://localhost:8080/c1/param4?users=bj&amp;users=sxt">http://localhost:8080/c1/param4?users=bj&amp;users=sxt</a></p><h2 id="封装为对象类型集合"><a href="#封装为对象类型集合" class="headerlink" title="封装为对象类型集合"></a>封装为对象类型集合</h2><p>SpringMVC不支持将参数封装为对象类型的List集合，但可以封装到有List属性的对象中</p><h4 id="1-编写实体类-2"><a href="#1-编写实体类-2" class="headerlink" title="1.编写实体类"></a>1.编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> Address address;<span class="comment">//地址对象</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Address&gt; addres;<span class="comment">//地址集合</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&quot;, addres=&quot;</span> + addres +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Address <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Address address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Address&gt; <span class="title function_">getAddres</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> addres;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddres</span><span class="params">(List&lt;Address&gt; addres)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.addres = addres;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2编写控制器方法"><a href="#2编写控制器方法" class="headerlink" title="2编写控制器方法"></a>2编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象中包含集合属性</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">listParam3</span><span class="params">(Student student)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-请求的参数写法"><a href="#3-请求的参数写法" class="headerlink" title="3.请求的参数写法"></a>3.请求的参数写法</h4><p><a href="http://localhost:8080/c1/param6%EF%BC%9Fid=1&amp;name=bz&amp;sex=female&amp;address[0/].info=bj&amp;address[0].postcode=100010&amp;address[1].info=sh&amp;address[1].postcode=100011](http://localhost:8080/c1/param5?id=1&amp;name=bz&amp;sex=female&amp;address%5B0%5D.info=bj&amp;address%5B0%5D.postcode=100010&amp;address%5B1%5D.info=sh&amp;address%5B1%5D.postcode=100011)">http://localhost:8080/c1/param6？id=1&amp;name=bz&amp;sex=female&amp;address[0\].info=bj&amp;address[0].postcode=100010&amp;address[1].info=sh&amp;address[1].postcode=100011](http://localhost:8080/c1/param5?id=1&amp;name=bz&amp;sex=female&amp;address[0].info=bj&amp;address[0].postcode=100010&amp;address[1].info=sh&amp;address[1].postcode=100011)</a></p><h2 id="封装为Map集合"><a href="#封装为Map集合" class="headerlink" title="封装为Map集合"></a>封装为Map集合</h2><p>同样，SpringMVC要封装Map集合，需要封装到有Map属性的对象中</p><h4 id="1-编写实体类-3"><a href="#1-编写实体类-3" class="headerlink" title="1.编写实体类"></a>1.编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line"><span class="comment">//    private Address address;//地址对象</span></span><br><span class="line"><span class="comment">//    private List&lt;Address&gt; addres;//地址集合</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Address&gt; address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&quot;</span> + address +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Address&gt; <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(Map&lt;String, Address&gt; address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写控制器方法-2"><a href="#2-编写控制器方法-2" class="headerlink" title="2.编写控制器方法"></a>2.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//对象中包含Map属性</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">mapParam</span><span class="params">(Student student)</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-请求的参数写法-1"><a href="#3-请求的参数写法-1" class="headerlink" title="3.请求的参数写法"></a>3.请求的参数写法</h4><p><a href="http://localhost:8080/c1/param7?id=1&amp;name=bz&amp;sex=female&amp;address%5B%E2%80%98one%E2%80%99%5C%5D.info=bj&amp;address%5B%E2%80%98one%E2%80%99%5D.postcode=100010&amp;address%5B%E2%80%98two%E2%80%99%5D.info=sh&amp;address%5B%E2%80%98two%E2%80%99%5D.postcode=100011%5D">http://localhost:8080/c1/param7?id=1&amp;name=bz&amp;sex=female&amp;address[‘one’\].info=bj&amp;address[‘one’].postcode=100010&amp;address[‘two’].info=sh&amp;address[‘two’].postcode=100011]</a></p><h2 id="SpringMVC参数获取-使用Servlet原生对象获取参数、"><a href="#SpringMVC参数获取-使用Servlet原生对象获取参数、" class="headerlink" title="SpringMVC参数获取_使用Servlet原生对象获取参数、"></a>SpringMVC参数获取_使用Servlet原生对象获取参数、</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221150011327.png" alt="image-20211221150011327"></p><p>SpringMVC也支持使用Servlet原生对象，在方法参数中定义<code>HttpServletRequest</code>、<code>HttpServletResponse</code>、<code>HttpSession</code>等类型的参数即可直接在方法中使用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用servlet原生对象</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">servletParam</span><span class="params">(HttpServletRequest request, HttpServletResponse response, HttpSession session)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//原生对象获取参数</span></span><br><span class="line">    System.out.println(request.getParameter(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.println(response.getCharacterEncoding());</span><br><span class="line">    System.out.println(session.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问该方法即可：<a href="http://localhost:8080/c1/param8?name=bjsxt">http://localhost:8080/c1/param8?name=bjsxt</a></p><h4 id="一般情况下，在SpringMVC中都有对Servlet原生对象的方法的替代，推荐使用SpringMVC的方式代替Servlet原生对象。"><a href="#一般情况下，在SpringMVC中都有对Servlet原生对象的方法的替代，推荐使用SpringMVC的方式代替Servlet原生对象。" class="headerlink" title="一般情况下，在SpringMVC中都有对Servlet原生对象的方法的替代，推荐使用SpringMVC的方式代替Servlet原生对象。"></a>一般情况下，在SpringMVC中都有对Servlet原生对象的方法的替代，推荐使用SpringMVC的方式代替Servlet原生对象。</h4><h2 id="SpringMVC参数获取-自定义参数类型转换器"><a href="#SpringMVC参数获取-自定义参数类型转换器" class="headerlink" title="SpringMVC参数获取_自定义参数类型转换器"></a>SpringMVC参数获取_自定义参数类型转换器</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221150206521.png" alt="image-20211221150206521"></p><p>前端传来的参数全部为字符串类型，SpringMVC使用自带的转换器将字符串参数转为需要的类型。如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取简单类型参数</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">simpleParam</span><span class="params">(String username,<span class="type">int</span> age)</span>&#123; </span><br><span class="line">    System.out.println(username);    </span><br><span class="line">    System.out.println(age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求路径：<a href="http://localhost:8080/c1/param1?username=bz&amp;age=10">http://localhost:8080/c1/param1?username=bz&amp;age=10</a></p><p>但在某些情况下，无法将字符串转为需要的类型，如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/c1/param9&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dateParam</span><span class="params">(Date birthday)</span>&#123;  </span><br><span class="line">    System.out.println(birthday);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于日期数据有很多种格式，SpringMVC没办法把所有格式的字符串转换成日期类型。比如参数格式为<code>birthday=2025-01-01</code>时，SpringMVC就无法解析参数。此时需要自定义参数类型转换器。</p><h4 id="1-定义类型转换器类，实现Converter接口"><a href="#1-定义类型转换器类，实现Converter接口" class="headerlink" title="1.定义类型转换器类，实现Converter接口"></a>1.定义类型转换器类，实现Converter接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.convert.converter.Converter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类型转换器必须实现Converter接口，两个泛型代表转换前的类型，转换后的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Date&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转换方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> source 转换前的数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 转换后的数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Date <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            date = sdf.parse(source);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-注册类型转换器对象"><a href="#2-注册类型转换器对象" class="headerlink" title="2.注册类型转换器对象"></a>2.注册类型转换器对象</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> <span class="attr">conversion-service</span>=<span class="string">&quot;dateConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置转换器工厂 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dateConverter&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.context.support.ConversionServiceFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  转换器集合  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;converters&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  自定义转换器   --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.converter.DateConverter&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-此时再访问http-localhost-8080-c1-param9-birthday-2025-01-01时，SpringMVC即可将请求参数封装为Date类型的参数。"><a href="#3-此时再访问http-localhost-8080-c1-param9-birthday-2025-01-01时，SpringMVC即可将请求参数封装为Date类型的参数。" class="headerlink" title="3.此时再访问http://localhost:8080/c1/param9?birthday=2025-01-01时，SpringMVC即可将请求参数封装为Date类型的参数。"></a>3.此时再访问<a href="http://localhost:8080/c1/param9?birthday=2025-01-01%E6%97%B6%EF%BC%8CSpringMVC%E5%8D%B3%E5%8F%AF%E5%B0%86%E8%AF%B7%E6%B1%82%E5%8F%82%E6%95%B0%E5%B0%81%E8%A3%85%E4%B8%BADate%E7%B1%BB%E5%9E%8B%E7%9A%84%E5%8F%82%E6%95%B0%E3%80%82">http://localhost:8080/c1/param9?birthday=2025-01-01时，SpringMVC即可将请求参数封装为Date类型的参数。</a></h4><h2 id="SpringMVC参数获取-编码过滤器"><a href="#SpringMVC参数获取-编码过滤器" class="headerlink" title="SpringMVC参数获取_编码过滤器"></a>SpringMVC参数获取_编码过滤器</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221151108190.png" alt="image-20211221151108190"></p><p>在传递参数时，tomcat8以上能处理get请求的中文乱码，但不能处理post请求的中文乱码</p><h4 id="1-编写jsp表单"><a href="#1-编写jsp表单" class="headerlink" title="1.编写jsp表单"></a>1.编写jsp表单</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">4</span>/<span class="number">18</span></span><br><span class="line">  Time: <span class="number">22</span>:<span class="number">35</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;编码过滤器&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/cn/code&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    姓名:&lt;input name=<span class="string">&quot;username&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-编写控制器方法-3"><a href="#2-编写控制器方法-3" class="headerlink" title="2.编写控制器方法"></a>2.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/cn/code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">code</span><span class="params">(String username)</span>&#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringMVC提供了处理中文乱码的过滤器，在web.xml中配置该过滤器即可解决中文乱码问题：</p><h4 id="3-web-xml配置文件加上过滤器"><a href="#3-web-xml配置文件加上过滤器" class="headerlink" title="3.web.xml配置文件加上过滤器"></a>3.web.xml配置文件加上过滤器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--SpringMVC中提供的字符编码过滤器，放在所有过滤器的最上方--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC处理相应-配置视图解析器"><a href="#SpringMVC处理相应-配置视图解析器" class="headerlink" title="SpringMVC处理相应_配置视图解析器"></a>SpringMVC处理相应_配置视图解析器</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221151231598.png" alt="image-20211221151231598"></p><p>SpringMVC默认情况下会在控制器执行完成后跳转到视图页面，视图解析器能找到相应的视图，之前的404异常就是由于没有配置视图解析器导致找不到视图。</p><p>在SpringMVC中提供了13个视图解析器，用于支持不同的视图技术。InternalResourceViewResolver是SpringMVC的默认视图解析器，用来解析JSP视图。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 视图解析器  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;viewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图前缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 视图后缀 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC处理响应-控制器方法的返回值"><a href="#SpringMVC处理响应-控制器方法的返回值" class="headerlink" title="SpringMVC处理响应_控制器方法的返回值"></a>SpringMVC处理响应_控制器方法的返回值</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221151653860.png" alt="image-20211221151653860"></p><p>我们可以通过控制器方法的返回值设置跳转的视图，控制器方法支持以下返回值类型：</p><h3 id="返回值为void"><a href="#返回值为void" class="headerlink" title="返回值为void"></a>返回值为void</h3><p>此时会跳转到名字是 <strong>前缀+方法路径名+后缀</strong> 的jsp页面</p><h4 id="1-编写控制器方法-1"><a href="#1-编写控制器方法-1" class="headerlink" title="1.编写控制器方法"></a>1.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController2</span> &#123;</span><br><span class="line">    <span class="comment">// 路径是helloMVC，方法执行完后会跳转到/helloMVC.jsp</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/helloMVC&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">helloMVC</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello SpringMVC&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写helloMVC-jsp"><a href="#2-编写helloMVC-jsp" class="headerlink" title="2.编写helloMVC.jsp"></a>2.编写helloMVC.jsp</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: 2022/4/18</span><br><span class="line">  Time: 23:09</span><br><span class="line">  To change this template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>MVC<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h11</span>&gt;</span>欢迎来到MVC<span class="tag">&lt;/<span class="name">h11</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SpringMVC控制器方法返回值为void表示跳转到方法路径名的视图</p><h3 id="返回值为String"><a href="#返回值为String" class="headerlink" title="返回值为String"></a>返回值为String</h3><p>此时会跳转到名字是<strong>前缀+返回值+后缀的jsp页面</strong></p><p>编写控制器方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回值为String</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;c2/hello1&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">helloMVC1</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello SpringMVC!&quot;</span>);</span><br><span class="line">    <span class="comment">//方法执行完后会跳转到/helloMVC.jsp</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;helloMVC&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringMVC控制器方法返回值为String类型表示跳转到方法返回值的视图</p><h3 id="返回值为ModelAndView"><a href="#返回值为ModelAndView" class="headerlink" title="返回值为ModelAndView"></a>返回值为ModelAndView</h3><p>这是SpringMVC提供的对象，该对象可以向request域设置数据并指定跳转的页面。该对象中包含Model对象和View对象。</p><ul><li>Model：向request域中设置数据。</li><li>View：指定跳转的页面。</li></ul><h4 id="1-编写控制器方法-2"><a href="#1-编写控制器方法-2" class="headerlink" title="1.编写控制器方法"></a>1.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回值为ModelAndView</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c2/hello2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">useMAV</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;返回值类型为ModelAndView&quot;</span>);</span><br><span class="line">    <span class="comment">// 1.创建ModelAndView对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">// 2.获取Model对象，本质是一个Map</span></span><br><span class="line">    Map&lt;String, Object&gt; model = modelAndView.getModel();</span><br><span class="line">    <span class="comment">// 3.使用Model对象向request域设置数据</span></span><br><span class="line">    model.put(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;百战程序员&quot;</span>);</span><br><span class="line">    <span class="comment">// 4.使用View对象设置跳转的路径为/baizhan.jsp</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;baizhan&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写jsp页面"><a href="#2-编写jsp页面" class="headerlink" title="2.编写jsp页面"></a>2.编写jsp页面</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">4</span>/<span class="number">18</span></span><br><span class="line">  Time: <span class="number">23</span>:<span class="number">41</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;百战&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;你好！ $&#123;requestScope.name&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC处理响应-request域设置数据"><a href="#SpringMVC处理响应-request域设置数据" class="headerlink" title="SpringMVC处理响应_request域设置数据"></a>SpringMVC处理响应_request域设置数据</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221151953392.png" alt="image-20211221151953392"></p><p>当控制器返回值为ModelAndView时我们可以向request域设置数据，我们还有以下方法可以向request域设置数据：</p><h3 id="使用原生的HttpServletRequest"><a href="#使用原生的HttpServletRequest" class="headerlink" title="使用原生的HttpServletRequest"></a>使用原生的HttpServletRequest</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/c2/hello3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setRequestModel</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;尚学堂&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用Model、ModelMap"><a href="#使用Model、ModelMap" class="headerlink" title="使用Model、ModelMap"></a>使用Model、ModelMap</h3><p>SpringMVC提供了Model接口和ModelMap类，控制器方法添加这两个类型的参数，使用该参数设置数据，该数据就会存到request域中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/c2/hello4&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setRequestModel2</span><span class="params">(Model model, ModelMap modelMap)</span>&#123;</span><br><span class="line">    <span class="comment">// 使用Model将数据存入request域</span></span><br><span class="line">    <span class="comment">// model.addAttribute(&quot;username&quot;,&quot;尚学堂&quot;);</span></span><br><span class="line">    <span class="comment">// 使用ModelMap将数据存入request域</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;尚学堂&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;baizhan</span></span><br></pre></td></tr></table></figure><h3 id="使用Map集合"><a href="#使用Map集合" class="headerlink" title="使用Map集合"></a>使用Map集合</h3><p>Model接口底层就是一个Map集合，我们可以给控制器方法设置Map类型的参数，向Map中添加键值对，数据也会存到request域中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/c2/hello5&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setRequestModel3</span><span class="params">(Map map)</span>&#123;</span><br><span class="line">    map.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;尚学堂&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC处理响应-session域设置数据"><a href="#SpringMVC处理响应-session域设置数据" class="headerlink" title="SpringMVC处理响应_session域设置数据"></a>SpringMVC处理响应_session域设置数据</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221152124496.png" alt="image-20211221152124496"></p><p>Session作用域表示在当前会话中有效。在SpringMVC中对于Session作用域传值，只能使用HttpSession对象来实现。</p><h4 id="1-编写控制器方法-3"><a href="#1-编写控制器方法-3" class="headerlink" title="1.编写控制器方法"></a>1.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/c2/hello6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">setSessionModel</span><span class="params">(HttpSession session)</span></span><br><span class="line">&#123;</span><br><span class="line">    session.setAttribute(<span class="string">&quot;address&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><p>2.编写jsp页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> </span><br><span class="line">         isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;百战&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;你好！ $&#123;requestScope.username&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;地址是！ $&#123;sessionScope.address&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC处理响应-context域设置数据"><a href="#SpringMVC处理响应-context域设置数据" class="headerlink" title="SpringMVC处理响应_context域设置数据"></a>SpringMVC处理响应_context域设置数据</h2><p>context作用域表示在整个应用范围都有效。在SpringMVC中对context作用域传值，只能使用ServletContext对象来实现。但是该对象不能直接注入到方法参数中，需要通过HttpSession对象获取。</p><h4 id="1-编写控制器方法-4"><a href="#1-编写控制器方法-4" class="headerlink" title="1.编写控制器方法"></a>1.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/c2/hello7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">setContextModel</span><span class="params">(HttpSession session)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写jsp页面-1"><a href="#2-编写jsp页面-1" class="headerlink" title="2.编写jsp页面"></a>2.编写jsp页面</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span></span><br><span class="line">         isELIgnored=<span class="string">&quot;false&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;百战&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;你好！ $&#123;requestScope.username&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;地址是！ $&#123;sessionScope.address&#125;&lt;/h1&gt;</span><br><span class="line">&lt;h1&gt;年龄是！ $&#123;applicationScope.age&#125;&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC处理响应-请求转发-amp-重定向"><a href="#SpringMVC处理响应-请求转发-amp-重定向" class="headerlink" title="SpringMVC处理响应_请求转发&amp;重定向"></a>SpringMVC处理响应_请求转发&amp;重定向</h2><p>之前的案例，我们发现request域中的值可以传到jsp页面中，也就是通过视图解析器跳转到视图的底层是请求转发。</p><p>如果我们跳转时不想使用视图解析器，可以使用原生HttpServletRequest进行请求转发或HttpServletResponse进行重定向：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/c2/hello8&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myForward1</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;尚学堂&quot;</span>);</span><br><span class="line">    <span class="comment">// 请求转发</span></span><br><span class="line">    <span class="comment">//  request.getRequestDispatcher(&quot;/c2/hello9&quot;).forward(request,response);</span></span><br><span class="line">    <span class="comment">// 原生重定向</span></span><br><span class="line">    response.sendRedirect(<span class="string">&quot;/c2/hello9&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/c2/hello9&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myForward2</span><span class="params">(HttpServletRequest request)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    System.out.println(request.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SpringMVC还提供了一种更简单的请求转发和重定向的写法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/c2/hello10&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">myForward3</span><span class="params">(HttpServletRequest request)</span></span><br><span class="line">&#123;</span><br><span class="line">    request.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;尚学堂&quot;</span>);</span><br><span class="line">    <span class="comment">//请求转发</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/c2/hello9&quot;</span>;</span><br><span class="line">    <span class="comment">// 重定向</span></span><br><span class="line">    <span class="comment">// return &quot;redirect:/c2/hello9&quot;;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="SpringMVC提供的重定向写法为：-return-quot-redirect-视图路径-quot"><a href="#SpringMVC提供的重定向写法为：-return-quot-redirect-视图路径-quot" class="headerlink" title="SpringMVC提供的重定向写法为： return &quot;redirect:视图路径&quot;"></a>SpringMVC提供的重定向写法为： <code>return &quot;redirect:视图路径&quot;</code></h4><h4 id="SpringMVC提供的请求转发写法为-return-“forward-视图路径”"><a href="#SpringMVC提供的请求转发写法为-return-“forward-视图路径”" class="headerlink" title="SpringMVC提供的请求转发写法为 return “forward:视图路径”"></a><strong>SpringMVC提供的请求转发写法为</strong> return “forward:视图路径”</h4><h2 id="SpringMVC注解-Controller"><a href="#SpringMVC注解-Controller" class="headerlink" title="SpringMVC注解_@Controller"></a>SpringMVC注解_@Controller</h2><p>作用：标记控制器，将控制器交给Spring容器管理。</p><p>位置：类上方</p><h2 id="SpringMVC注解-RequestMapping"><a href="#SpringMVC注解-RequestMapping" class="headerlink" title="SpringMVC注解_@RequestMapping"></a>SpringMVC注解_@RequestMapping</h2><p>作用：给控制器方法设置请求路径</p><p>位置：方法或类上方。用于类上，表示类中的所有控制器方法都是以该地址作为<strong>父路径</strong>。</p><p>属性：</p><ul><li>value&#x2F;path:请求路径</li><li>method:指定请求方式</li><li>params:规定必须发送的请求参数</li><li>headers:规定请求必须包含的请求头</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController3</span> &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">/*</span></span><br><span class="line"><span class="comment">        访问路径为 /c3/annotation1</span></span><br><span class="line"><span class="comment">        支持post和get请求</span></span><br><span class="line"><span class="comment">        请求时必须带有age参数</span></span><br><span class="line"><span class="comment">        请求时必须带有User-agent请求头</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(path = &quot;/annotation1&quot;,method = &#123;RequestMethod.GET,RequestMethod.POST&#125;,params = &#123;&quot;age&quot;&#125;,headers = &#123;&quot;User-agent&quot;&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">annotation1</span><span class="params">(String username)</span>&#123;</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC注解-RequestParam"><a href="#SpringMVC注解-RequestParam" class="headerlink" title="SpringMVC注解_@RequestParam"></a>SpringMVC注解_@RequestParam</h2><p>作用：在控制器方法中获取请求参数</p><p>位置：方法参数前</p><p>属性：</p><ul><li>name：指定请求参数名称</li><li>defaultValue： 为参数设置默认值</li><li>required：设置是否是必须要传入的参数</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义请求的参数名为username，默认值为sxt，不是必须的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/annotation2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">annotation2</span><span class="params">(<span class="meta">@RequestParam(name = &quot;username&quot;,defaultValue = &quot;sxt&quot;,required = false)</span> String name)</span>&#123;</span><br><span class="line">    System.out.println(name);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求URL的写法：<a href="http://localhost:8080/c3/annotation2?username=bz">http://localhost:8080/c3/annotation2?username=bz</a></p><h2 id="SpringMVC注解-RequestHeader、-CookieValue"><a href="#SpringMVC注解-RequestHeader、-CookieValue" class="headerlink" title="SpringMVC注解_@RequestHeader、@CookieValue"></a>SpringMVC注解_@RequestHeader、@CookieValue</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221155419568.png" alt="image-20211221155419568"></p><p><strong>@RequestHeader</strong></p><p>作用：在控制器方法中获取请求头数据</p><p>位置：方法参数前</p><p><strong>@CookieValue</strong></p><p>作用：在控制器方法中获取Cookie数据</p><p>位置：方法参数前</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        获取User-Agent请求头</span></span><br><span class="line"><span class="comment">        获取JSESSIONID的Cookie值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/annotation3&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">annotation3</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent, <span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String jSessionId)</span>&#123;</span><br><span class="line">    System.out.println(userAgent);</span><br><span class="line">    System.out.println(jSessionId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC注解-SessionAttributes"><a href="#SpringMVC注解-SessionAttributes" class="headerlink" title="SpringMVC注解_@SessionAttributes"></a>SpringMVC注解_@SessionAttributes</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221155558588.png" alt="image-20211221155558588"></p><p>作用：将Model模型中的数据存到session域中</p><p>位置：类上方</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c4&quot;)</span></span><br><span class="line"><span class="comment">// 将模型中的name数据保存到session中</span></span><br><span class="line"><span class="meta">@SessionAttributes(&quot;name&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController4</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">t1</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        <span class="comment">// model中保存name数据</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;北京尚学堂&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">t2</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line"><span class="comment">// 从session中获取name数据</span></span><br><span class="line">        System.out.println(session.getAttribute(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在SpringMVC中，可以将Model模型中的数据存到session域中-SessionAttributes"><a href="#在SpringMVC中，可以将Model模型中的数据存到session域中-SessionAttributes" class="headerlink" title="在SpringMVC中，可以将Model模型中的数据存到session域中@SessionAttributes"></a>在SpringMVC中，可以将Model模型中的数据存到session域中@SessionAttributes</h5><h2 id="SpringMVC注解-ModelAttribute"><a href="#SpringMVC注解-ModelAttribute" class="headerlink" title="SpringMVC注解_@ModelAttribute"></a>SpringMVC注解_@ModelAttribute</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221155843046.png" alt="image-20211221155843046"></p><h4 id="作用1：设置指定方法在控制器其他方法前执行"><a href="#作用1：设置指定方法在控制器其他方法前执行" class="headerlink" title="作用1：设置指定方法在控制器其他方法前执行"></a>作用1：设置指定方法在控制器其他方法前执行</h4><h4 id="位置：方法上方"><a href="#位置：方法上方" class="headerlink" title="位置：方法上方"></a>位置：方法上方</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c5&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController5</span> &#123;</span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">t1</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="作用2：从Model模型中获取数据给参数赋值"><a href="#作用2：从Model模型中获取数据给参数赋值" class="headerlink" title="作用2：从Model模型中获取数据给参数赋值"></a>作用2：从Model模型中获取数据给参数赋值</h4><h4 id="位置：方法参数前"><a href="#位置：方法参数前" class="headerlink" title="位置：方法参数前"></a>位置：方法参数前</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c6&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController6</span> &#123;</span><br><span class="line">    <span class="comment">// 前置方法向Model中设置数据</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;尚学堂&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 该参数不是从请求中获取，而是从Model中获取</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">t1</span><span class="params">(<span class="meta">@ModelAttribute(&quot;name&quot;)</span> String name)</span>&#123;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC注解-RESTful风格支持"><a href="#SpringMVC注解-RESTful风格支持" class="headerlink" title="SpringMVC注解_RESTful风格支持"></a>SpringMVC注解_RESTful风格支持</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221160001230.png" alt="image-20211221160001230"></p><h3 id="RESTful风格介绍"><a href="#RESTful风格介绍" class="headerlink" title="RESTful风格介绍"></a>RESTful风格介绍</h3><p>RESTful风格是一种URL路径的设计风格。在RESTful风格的URL路径中，网络上的任意数据都可以看成一个资源，它可以是一段文本、一张图片，也可以是一个Java对象。而每个资源都会占据一个网络路径，无论对该资源进行增删改查，访问的路径是一致的。</p><p>传统URL：</p><ul><li><p>查找id为1的学生：</p><p><a href="http://localhost:8080/student/findById?id=30">http://localhost:8080/student/findById?id=30</a></p></li><li><p>删除id为1的学生：</p><p><a href="http://localhost:8080/student/deleteById?id=30">http://localhost:8080/student/deleteById?id=30</a></p></li></ul><p>RESTful风格URL：</p><ul><li><p>查找id为30的学生：</p><p><a href="http://localhost:8080/student/30">http://localhost:8080/student/30</a></p></li><li><p>删除id为30的学生：</p><p><a href="http://localhost:8080/student/30">http://localhost:8080/student/30</a></p></li></ul><p>那么如何区分对该资源是哪一种操作？通过请求方式不同，判断进行的是什么操作。之前我们学过两种请求方式，GET请求和POST请求，而访问RESTful风格的URL一共有四种请求方式：</p><ul><li>GET请求：查询操作</li><li>POST请求：新增操作</li><li>DELETE请求：删除操作</li><li>PUT请求：修改操作</li></ul><h4 id="RESTful风格URL："><a href="#RESTful风格URL：" class="headerlink" title="RESTful风格URL："></a>RESTful风格URL：</h4><ul><li><p>查找id为30的学生：</p><p><a href="http://localhost:8080/student/30">http://localhost:8080/student/30</a> GET方式请求</p></li><li><p>删除id为30的学生：</p><p><a href="http://localhost:8080/student/30">http://localhost:8080/student/30</a> DELETE方式请求</p></li></ul><p>RESTful风格的特点：</p><p>结构清晰、符合标准、易于理解、拓展方便</p><h2 id="POSTMAN使用"><a href="#POSTMAN使用" class="headerlink" title="POSTMAN使用"></a>POSTMAN使用</h2><p>默认情况下浏览器是无法发送DELETE请求和PUT请求的，我们可以使用Postman工具发送这些请求。</p><ol><li><h4 id="双击安装包安装Postman"><a href="#双击安装包安装Postman" class="headerlink" title="双击安装包安装Postman"></a>双击安装包安装Postman</h4></li><li><h4 id="点击new-collection创建请求集合"><a href="#点击new-collection创建请求集合" class="headerlink" title="点击new-collection创建请求集合"></a>点击new-collection创建请求集合</h4></li></ol><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211215173844221.png" alt="image-20211215173844221"></p><h4 id="3-添加请求"><a href="#3-添加请求" class="headerlink" title="3.添加请求"></a>3.添加请求</h4><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211215174251262.png" alt="image-20211215174251262"></p><h4 id="4-保存请求到集合，以后可以随时发送该请求"><a href="#4-保存请求到集合，以后可以随时发送该请求" class="headerlink" title="4.保存请求到集合，以后可以随时发送该请求"></a>4.保存请求到集合，以后可以随时发送该请求</h4><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211215174648965.png" alt="image-20211215174648965"></p><h3 id="PathVariable"><a href="#PathVariable" class="headerlink" title="@PathVariable"></a>@PathVariable</h3><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221160310362.png" alt="image-20211221160310362"></p><p>作用：在RESTful风格的URL中获取占位符的值</p><p>位置：方法参数前</p><p>属性：</p><ul><li>value：获取哪个占位符的值作为参数值，如果占位符和参数名相同，可以省略该属性。</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PathVariable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="comment">//模拟学生的增删改查控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="comment">// 路径中的&#123;id&#125;表示占位符，最后会封装到方法的参数中使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除学生</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteStudent</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除id为&quot;</span>+id+<span class="string">&quot;的学生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增学生</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addStudent</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id, Student student)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        System.out.println(<span class="string">&quot;新增学生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果占位符和参数名相同，可以省略@PathVariable的value属性</span></span><br><span class="line">    <span class="comment">//根据id查询学生</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findStudentById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(<span class="string">&quot;根据id查询学生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改学生</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateStudent</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id, Student student)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改学生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问方式：</p><ul><li>新增学生：POST <a href="http://localhost:8080/student/1?name=%E5%B0%9A%E5%AD%A6%E5%A0%82&amp;sex=%E7%94%B7">http://localhost:8080/student/1?name=尚学堂&amp;sex=男</a></li><li>修改学生：PUT <a href="http://localhost:8080/student/1?name=%E5%B0%9A%E5%AD%A6%E5%A0%82&amp;sex=%E7%94%B7">http://localhost:8080/student/1?name=尚学堂&amp;sex=男</a></li><li>删除学生：DELETE <a href="http://localhost:8080/student/1">http://localhost:8080/student/1</a></li><li>查询学生：GET <a href="http://localhost:8080/student/1">http://localhost:8080/student/1</a></li></ul><h3 id="PostMapping、-GetMapping、-PutMapping、-DeleteMapping"><a href="#PostMapping、-GetMapping、-PutMapping、-DeleteMapping" class="headerlink" title="@PostMapping、@GetMapping、@PutMapping、@DeleteMapping"></a>@PostMapping、@GetMapping、@PutMapping、@DeleteMapping</h3><p>作用：简化设置请求方式的@RequestMapping写法</p><p>位置：方法上方。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="comment">//模拟学生的增删改查控制器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="comment">// 路径中的&#123;id&#125;表示占位符，最后会封装到方法的参数中使用</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除学生</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteStudent</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> <span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除id为&quot;</span>+id+<span class="string">&quot;的学生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增学生</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addStudent</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id, Student student)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        System.out.println(<span class="string">&quot;新增学生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果占位符和参数名相同，可以省略@PathVariable的value属性</span></span><br><span class="line">    <span class="comment">//根据id查询学生</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findStudentById</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(<span class="string">&quot;根据id查询学生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改学生</span></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateStudent</span><span class="params">(<span class="meta">@PathVariable</span> <span class="type">int</span> id, Student student)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(id);</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        System.out.println(<span class="string">&quot;修改学生&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="HiddentHttpMethodFilter"><a href="#HiddentHttpMethodFilter" class="headerlink" title="HiddentHttpMethodFilter"></a>HiddentHttpMethodFilter</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221160451965.png" alt="image-20211221160451965"></p><p>由于浏览器form表单只支持GET与POST请求，而DELETE、PUT请求并不支持，SpringMVC有一个过滤器，可以将浏览器的POST请求改为指定的请求方式，发送给的控制器方法。</p><p>用法如下：</p><h4 id="1-在web-xml中配置过滤器"><a href="#1-在web-xml中配置过滤器" class="headerlink" title="1.在web.xml中配置过滤器"></a>1.在web.xml中配置过滤器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>httpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.HiddenHttpMethodFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>httpMethodFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-编写控制器方法-4"><a href="#2-编写控制器方法-4" class="headerlink" title="2.编写控制器方法"></a>2.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PutMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c7&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController7</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testDelete</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/put&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">testPut</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;修改方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;baizhan&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-在jsp中编写表单"><a href="#3-在jsp中编写表单" class="headerlink" title="3.在jsp中编写表单"></a>3.在jsp中编写表单</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;DELETE、PUT提交&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%--删除--%&gt;</span><br><span class="line">    &lt;%-- 提交DELETE、PUT请求，表单必须提交方式为post --%&gt;</span><br><span class="line">&lt;form action=<span class="string">&quot;/c7/delete&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;DELETE&quot;</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;删除&quot;</span>&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">    &lt;hr/&gt;</span><br><span class="line">    &lt;%-- 修改 --%&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/c7/put&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;_method&quot;</span> value=<span class="string">&quot;PUT&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;修改&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC注解-ResponseBody"><a href="#SpringMVC注解-ResponseBody" class="headerlink" title="SpringMVC注解_@ResponseBody"></a>SpringMVC注解_@ResponseBody</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221160814897.png" alt="image-20211221160814897"></p><p>作用：方法返回的对象转换为JSON格式，并将JSON数据直接写入到输出流中，使用此注解后不会再经过视图解析器。使用该注解可以处理Ajax请求。</p><p>位置：方法上方或方法返回值前</p><h4 id="1-编写jsp页面，发送ajax请求"><a href="#1-编写jsp页面，发送ajax请求" class="headerlink" title="1.编写jsp页面，发送ajax请求"></a>1.编写jsp页面，发送ajax请求</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax请求  &lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;/js/jquery-2.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">               <span class="type">var</span> <span class="variable">name</span> <span class="operator">=</span>$(<span class="string">&quot;#name&quot;</span>).val();</span><br><span class="line">               <span class="type">var</span> <span class="variable">sex</span> <span class="operator">=</span>$(<span class="string">&quot;#sex&quot;</span>).val();</span><br><span class="line">               $.get(<span class="string">&quot;/c8/addStudent&quot;</span>,&#123;<span class="string">&quot;name&quot;</span>:name,<span class="string">&quot;sex&quot;</span>:sex&#125;,function (data) &#123;</span><br><span class="line">                   console.log(data);</span><br><span class="line">               &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    姓名:&lt;input id=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    性别:&lt;input id=<span class="string">&quot;sex&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;提交&quot;</span> id=<span class="string">&quot;btn&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-由于jsp页面中引入jQuery的js文件，而SpringMVC会拦截所有资源，造成jquery-js失效，需要在SpringMVC核心配置文件中放行静态资源。"><a href="#2-由于jsp页面中引入jQuery的js文件，而SpringMVC会拦截所有资源，造成jquery-js失效，需要在SpringMVC核心配置文件中放行静态资源。" class="headerlink" title="2.由于jsp页面中引入jQuery的js文件，而SpringMVC会拦截所有资源，造成jquery.js失效，需要在SpringMVC核心配置文件中放行静态资源。"></a>2.由于jsp页面中引入jQuery的js文件，而SpringMVC会拦截所有资源，造成jquery.js失效，需要在SpringMVC核心配置文件中放行静态资源。</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 放行静态资源 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-编写结果实体类，该实体类会封装一个请求的结果"><a href="#3-编写结果实体类，该实体类会封装一个请求的结果" class="headerlink" title="3.编写结果实体类，该实体类会封装一个请求的结果"></a>3.编写结果实体类，该实体类会封装一个请求的结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求的结果对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> flag;<span class="comment">//请求是否成功</span></span><br><span class="line">    <span class="keyword">private</span> String message;<span class="comment">//请求提示信息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(<span class="type">boolean</span> flag, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Result&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;flag=&quot;</span> + flag +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMessage</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写控制器"><a href="#4-编写控制器" class="headerlink" title="4.编写控制器"></a>4.编写控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Result;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController8</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addStudent&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addStudent</span><span class="params">(String name,String sex)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出接受到的参数，模拟添加学生</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;:&quot;</span>+sex);</span><br><span class="line">        <span class="comment">// 返回添加结果</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>, <span class="string">&quot;添加学生成功！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-SpringMVC会将Result对象转为JSON格式写入输出流，而SpringMVC默认使用的JSON转换器是jackson，需要在pom中添加jackson依赖"><a href="#5-SpringMVC会将Result对象转为JSON格式写入输出流，而SpringMVC默认使用的JSON转换器是jackson，需要在pom中添加jackson依赖" class="headerlink" title="5.SpringMVC会将Result对象转为JSON格式写入输出流，而SpringMVC默认使用的JSON转换器是jackson，需要在pom中添加jackson依赖"></a>5.SpringMVC会将Result对象转为JSON格式写入输出流，而SpringMVC默认使用的JSON转换器是jackson，需要在pom中添加jackson依赖</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jackson --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-annotations<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC注解-RestController"><a href="#SpringMVC注解-RestController" class="headerlink" title="SpringMVC注解_@RestController"></a>SpringMVC注解_@RestController</h2><p>如果一个控制器类下的所有控制器方法都返回JSON格式数据且不进行跳转，可以使用@RestController代替@Controller，此时每个方法上的@ResonseBody都可以省略</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Controller</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/c8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController8</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addStudent&quot;)</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addStudent</span><span class="params">(String name,String sex)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 输出接受到的参数，模拟添加学生</span></span><br><span class="line">        System.out.println(name+<span class="string">&quot;:&quot;</span>+sex);</span><br><span class="line">        <span class="comment">// 返回添加结果</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>, <span class="string">&quot;添加学生成功！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="静态资源映射"><a href="#静态资源映射" class="headerlink" title="静态资源映射"></a>静态资源映射</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221160948500.png" alt="image-20211221160948500"></p><p>当在DispatcherServlet的<url-pattern>中配置拦截”&#x2F;“时，除了jsp文件不会拦截以外，其他所有的请求都会经过前端控制器进行匹配。此时静态资源例如css、js、jpg等就会被前端控制器拦截，导致不能访问，出现404问题。想要正常映射静态资源共有三种方案：</p><h3 id="配置静态资源筛查器"><a href="#配置静态资源筛查器" class="headerlink" title="配置静态资源筛查器"></a>配置静态资源筛查器</h3><p>在SpringMVC的配置文件中配置&lt;mvc:default-servlet-handler &#x2F;&gt;后，会在Spring容器中创建一个资源检查器，它对进入DispatcherServlet的URL进行筛查，如果不是静态资源，才由DispatcherServlet处理。</p><p>修改SpringMVC核心配置文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置静态资源映射器"><a href="#配置静态资源映射器" class="headerlink" title="配置静态资源映射器"></a>配置静态资源映射器</h3><p>SpringMVC模块提供了静态资源映射器组件，通过<code>&lt;mvc:resources&gt;</code>标签配置静态资源映射器，配置后的路径不会由DispatcherServlet处理。</p><p>修改SpringMVC核心配置文件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置静态资源映射器--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mapping:配置请求的URL location:资源路径--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/img/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/img/&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">&quot;/js/&quot;</span> <span class="attr">location</span>=<span class="string">&quot;/js/&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置默认Servlet处理静态资源"><a href="#配置默认Servlet处理静态资源" class="headerlink" title="配置默认Servlet处理静态资源"></a>配置默认Servlet处理静态资源</h3><p>在web.xml可以配置默认Servlet处理静态资源，该Servlet由tomcat提供，它会直接访问静态资源不进行其他操作。这样就避免了使用DispatcherServlet对静态资源的拦截：</p><p>修改web.xml:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.jpg<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.css<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.js<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>default<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>*.png<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC注解-RequestBody"><a href="#SpringMVC注解-RequestBody" class="headerlink" title="SpringMVC注解_@RequestBody"></a>SpringMVC注解_@RequestBody</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221161108835.png" alt="image-20211221161108835"></p><p>作用：将请求中JSON格式的参数转为JAVA对象</p><p>位置：写在方法参数前</p><h4 id="1-AJAX请求发送JSON格式的参数"><a href="#1-AJAX请求发送JSON格式的参数" class="headerlink" title="1.AJAX请求发送JSON格式的参数"></a>1.AJAX请求发送JSON格式的参数</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;ajax请求  &lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;/js/jquery-2.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">               <span class="type">var</span> <span class="variable">name</span> <span class="operator">=</span>$(<span class="string">&quot;#name&quot;</span>).val();</span><br><span class="line">               <span class="type">var</span> <span class="variable">sex</span> <span class="operator">=</span>$(<span class="string">&quot;#sex&quot;</span>).val();</span><br><span class="line">               <span class="type">var</span> <span class="variable">param</span> <span class="operator">=</span> JSON.stringify(&#123;<span class="string">&quot;name&quot;</span>:name,<span class="string">&quot;sex&quot;</span>:sex&#125;);</span><br><span class="line">               $.ajax(&#123;</span><br><span class="line">                  url:<span class="string">&quot;/c8/addStudent2&quot;</span>,</span><br><span class="line">                  contentType:<span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">                  type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                  data:param,</span><br><span class="line">                  success:function (data) &#123;</span><br><span class="line">                      console.log(data);</span><br><span class="line">                  &#125;</span><br><span class="line">               &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    姓名:&lt;input id=<span class="string">&quot;name&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    性别:&lt;input id=<span class="string">&quot;sex&quot;</span>/&gt;&lt;br/&gt;</span><br><span class="line">    &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;提交&quot;</span> id=<span class="string">&quot;btn&quot;</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-编写控制器"><a href="#2-编写控制器" class="headerlink" title="2.编写控制器"></a>2.编写控制器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@PostMapping(&quot;/addStudent2&quot;)</span></span><br><span class="line"><span class="comment">//    @ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">addStudent</span><span class="params">(<span class="meta">@RequestBody</span> Student student)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(student);</span><br><span class="line">        <span class="comment">// 返回添加结果</span></span><br><span class="line">        <span class="type">Result</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="literal">true</span>, <span class="string">&quot;添加学生成功！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC文件上传-原生方式上传"><a href="#SpringMVC文件上传-原生方式上传" class="headerlink" title="SpringMVC文件上传_原生方式上传"></a>SpringMVC文件上传_原生方式上传</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221165611156.png" alt="image-20211221165611156"></p><p>上传是Web工程中很常见的功能，SpringMVC框架简化了文件上传的代码，我们首先使用JAVAEE原生方式上传文件：</p><h4 id="1-创建新的SpringMVC项目，在web-xml中将项目从2-3改为3-1，即可默认开启el表达式"><a href="#1-创建新的SpringMVC项目，在web-xml中将项目从2-3改为3-1，即可默认开启el表达式" class="headerlink" title="1.创建新的SpringMVC项目，在web.xml中将项目从2.3改为3.1，即可默认开启el表达式"></a>1.创建新的SpringMVC项目，在web.xml中将项目从2.3改为3.1，即可默认开启el表达式</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">id</span>=<span class="string">&quot;WebApp_ID&quot;</span> <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-编写上传表单"><a href="#2-编写上传表单" class="headerlink" title="2.编写上传表单"></a>2.编写上传表单</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;文件上传&lt;/h3&gt;</span><br><span class="line">    &lt;%--上传表单的提交方式必须是post--%&gt;</span><br><span class="line">    &lt;%-- enctype属性为multipart/form-data，意思是不对表单数据进行编码 --%&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/fileUpload&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        &lt;%-- 文件选择控件,类型是file，必须要有name属性--%&gt;</span><br><span class="line">        选择文件:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;upload&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-接受请求体数据："><a href="#3-接受请求体数据：" class="headerlink" title="3.接受请求体数据："></a>3.接受请求体数据：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/fileUpload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">// 获取输入流</span></span><br><span class="line">    <span class="type">ServletInputStream</span> <span class="variable">is</span> <span class="operator">=</span> request.getInputStream();</span><br><span class="line">    <span class="comment">// 从输入流获取请求体数据</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> ((i=is.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">        System.out.println((<span class="type">char</span>)i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来需要分析请求体中的文件项，并将数据写入磁盘，此时需要借助文件上传工具</p><h4 id="1-引入文件上传依赖："><a href="#1-引入文件上传依赖：" class="headerlink" title="1.引入文件上传依赖："></a>1.引入文件上传依赖：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="2-编写控制器接收上传请求，控制器进行三步操作"><a href="#2-编写控制器接收上传请求，控制器进行三步操作" class="headerlink" title="2.编写控制器接收上传请求，控制器进行三步操作"></a>2.编写控制器接收上传请求，控制器进行三步操作</h4><ol><li>创建文件夹，存放上传文件。</li><li>分析请求体，找到上传文件数据。</li><li>将文件数据写入文件夹。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileItem;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.FileUploadException;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletInputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/fileUpload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        //获取输入流</span></span><br><span class="line"><span class="comment">//        ServletInputStream inputStream = request.getInputStream();</span></span><br><span class="line"><span class="comment">//        //从输入流获取请求体数据</span></span><br><span class="line"><span class="comment">//        int i = 0;</span></span><br><span class="line"><span class="comment">//        while ((i= inputStream.read())!=-1)</span></span><br><span class="line"><span class="comment">//        &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println((char) i);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">//创建文件夹，存放上传文件</span></span><br><span class="line">     <span class="comment">//1.设置上传文件夹的真实路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">     <span class="comment">//2.判断该目录是否存在，如果不存在，创建该目录</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">        <span class="keyword">if</span>(!file.exists())</span><br><span class="line">        &#123;</span><br><span class="line">            file.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//分析请求体，找到上传文件数据</span></span><br><span class="line">     <span class="comment">//1.创建磁盘文件工厂</span></span><br><span class="line">        <span class="type">DiskFileItemFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DiskFileItemFactory</span>();</span><br><span class="line">     <span class="comment">//2.创建上传数据分析器对象</span></span><br><span class="line">        <span class="type">ServletFileUpload</span> <span class="variable">servletFileUpload</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServletFileUpload</span>(factory);</span><br><span class="line">     <span class="comment">//3.利用分析器对象解析请求体，返回所有数据项</span></span><br><span class="line">        List&lt;FileItem&gt; fileItems = servletFileUpload.parseRequest(request);</span><br><span class="line">     <span class="comment">//4.遍历所有数据，找到文件项(非表单项)</span></span><br><span class="line">        <span class="keyword">for</span> (FileItem fileItem : fileItems) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!fileItem.isFormField())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//将文件数据写入文件夹</span></span><br><span class="line">                <span class="comment">//1.获取文件名</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> fileItem.getName();</span><br><span class="line">                <span class="comment">//2.将文件写入磁盘</span></span><br><span class="line">                fileItem.write(<span class="keyword">new</span> <span class="title class_">File</span>(file,name));</span><br><span class="line">                <span class="comment">//3.删除内存中的临时文件</span></span><br><span class="line">                fileItem.delete();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC文件上传-SpringMVC方式上传"><a href="#SpringMVC文件上传-SpringMVC方式上传" class="headerlink" title="SpringMVC文件上传_SpringMVC方式上传"></a>SpringMVC文件上传_SpringMVC方式上传</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221165812035.png" alt="image-20211221165812035"></p><p>SpringMVC使用框架提供的文件解析器对象，可以直接将请求体中的文件数据转为MultipartFile对象，从而省略原生上传中分析请求体的步骤。</p><h4 id="1-在SpringMVC核心配置文件配置文件解析器"><a href="#1-在SpringMVC核心配置文件配置文件解析器" class="headerlink" title="1.在SpringMVC核心配置文件配置文件解析器"></a>1.在SpringMVC核心配置文件配置文件解析器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件解析器对象，id名称必须是multipartResolver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.commons.CommonsMultipartResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 支持一次上传文件的总容量。单位：字节 100M = 100*1024*1024--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxUploadSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;104857600&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 文件名的编码方式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;defaultEncoding&quot;</span> <span class="attr">value</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-创建JSP表单"><a href="#2-创建JSP表单" class="headerlink" title="2.创建JSP表单"></a>2.创建JSP表单</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;文件上传&lt;/h3&gt;</span><br><span class="line">    &lt;%--上传表单的提交方式必须是post--%&gt;</span><br><span class="line">    &lt;%-- enctype属性为multipart/form-data，意思是不对表单数据进行编码 --%&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/fileUpload2&quot;</span> method=<span class="string">&quot;post&quot;</span> enctype=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span><br><span class="line">        &lt;%-- 文件选择控件,类型是file，必须要有name属性--%&gt;</span><br><span class="line">        选择文件:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;上传&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="3-编写控制器接受上传请求"><a href="#3-编写控制器接受上传请求" class="headerlink" title="3.编写控制器接受上传请求"></a>3.编写控制器接受上传请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MultipartFile参数名必须和JSP文件空间的name属性一致</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/fileUpload2&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload2</span><span class="params">(MultipartFile file,HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建文件夹,存放上传文件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())</span><br><span class="line">    &#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将上传的数据写到文件夹的文件中</span></span><br><span class="line">    <span class="comment">//1.拿到上传的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    originalFilename = UUID.randomUUID()+<span class="string">&quot;_&quot;</span>+originalFilename;</span><br><span class="line">    <span class="comment">//2.创建空文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,originalFilename);</span><br><span class="line">    <span class="comment">//3.将数据写入空文件中</span></span><br><span class="line">    file.transferTo(newFile);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC文件上传-上传多文件"><a href="#SpringMVC文件上传-上传多文件" class="headerlink" title="SpringMVC文件上传_上传多文件"></a>SpringMVC文件上传_上传多文件</h2><p>SpringMVC支持一次性上传多个文件，写法如下：</p><h4 id="1-创建JSP表单"><a href="#1-创建JSP表单" class="headerlink" title="1.创建JSP表单"></a>1.创建JSP表单</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    &lt;%--上传表单的提交方式必须是post--%&gt;</span><br><span class="line">    &lt;%-- enctype属性为multipart/form-data，意思是不对表单数据进行编码 --%&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/fileUpload3&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        &lt;%-- 文件选择控件,类型是file，必须要有name属性--%&gt;</span><br><span class="line">        用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        文件1:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        文件2:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;files&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-编写控制器接收上传请求"><a href="#2-编写控制器接收上传请求" class="headerlink" title="2.编写控制器接收上传请求"></a>2.编写控制器接收上传请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理多文件上传,参数类型为MultipartFile数组，参数名和JSP文件控件的name属性一致</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/fileUpload3&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload3</span><span class="params">(MultipartFile files[],String username,HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(username);</span><br><span class="line">    <span class="comment">//1.设置上传文件保存的文件夹</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">    <span class="keyword">if</span> (!dir.exists())&#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.遍历数组，将上传文件保存到文件夹</span></span><br><span class="line">    <span class="keyword">for</span>(MultipartFile file:files)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">        originalFilename = UUID.randomUUID()+<span class="string">&quot;_&quot;</span>+originalFilename;</span><br><span class="line">        <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir, originalFilename);</span><br><span class="line">        file.transferTo(newFile);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC文件上传-异步上传"><a href="#SpringMVC文件上传-异步上传" class="headerlink" title="SpringMVC文件上传_异步上传"></a>SpringMVC文件上传_异步上传</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221170609881.png" alt="image-20211221170609881"></p><p>之前的上传答案，在上传成功后都会跳转页面。而在实际开发中，很多情况下上传后不进行跳转，而是进行页面的局部刷新，比如：上传头像成功后将头像显示在网页中。这时候就需要使用异步文件上传。</p><h4 id="1-编写jsp页面，引入jQuery和jQuery表单上传工具jquery-form-js"><a href="#1-编写jsp页面，引入jQuery和jQuery表单上传工具jquery-form-js" class="headerlink" title="1.编写jsp页面，引入jQuery和jQuery表单上传工具jquery.form.js"></a>1.编写jsp页面，引入jQuery和jQuery表单上传工具jquery.form.js</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;/js/jquery-2.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;/js/jquery.form.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;文件上传&lt;/h3&gt;</span><br><span class="line">    &lt;%--上传表单的提交方式必须是post--%&gt;</span><br><span class="line">    &lt;%-- enctype属性为multipart/form-data，意思是不对表单数据进行编码 --%&gt;</span><br><span class="line">    &lt;form  enctype=<span class="string">&quot;multipart/form-data&quot;</span> id=<span class="string">&quot;ajaxForm&quot;</span>&gt;</span><br><span class="line">        图片上传:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line">        &lt;%-- 按钮类型不能是submit，否则会刷新页面       --%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;上传头像&quot;</span> id=<span class="string">&quot;btn&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">        &lt;%--上传头像后展示的位置--%&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;/&quot;</span> width=<span class="string">&quot;100&quot;</span> id=<span class="string">&quot;img&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">       $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">          <span class="comment">//异步提交表单</span></span><br><span class="line">          $(<span class="string">&quot;#ajaxForm&quot;</span>).ajaxSubmit(</span><br><span class="line">              &#123;</span><br><span class="line">                  url:<span class="string">&quot;/fileUpload4&quot;</span>,</span><br><span class="line">                  type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                  success:function (data) &#123;</span><br><span class="line">                      $(<span class="string">&quot;#img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,data);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="2-编写控制器接收异步上传请求"><a href="#2-编写控制器接收异步上传请求" class="headerlink" title="2.编写控制器接收异步上传请求"></a>2.编写控制器接收异步上传请求</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MultipartFile参数名必须和JSP文件空间的name属性一致</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/fileUpload4&quot;)</span></span><br><span class="line"><span class="comment">//不进行页面跳转，既不跳转到页面解析器</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload4</span><span class="params">(MultipartFile file,HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//创建文件夹,存放上传文件</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">    <span class="keyword">if</span>(!dir.exists())</span><br><span class="line">    &#123;</span><br><span class="line">        dir.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将上传的数据写到文件夹的文件中</span></span><br><span class="line">    <span class="comment">//1.拿到上传的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    originalFilename = UUID.randomUUID()+<span class="string">&quot;_&quot;</span>+originalFilename;</span><br><span class="line">    <span class="comment">//2.创建空文件</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">newFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(dir,originalFilename);</span><br><span class="line">    <span class="comment">//3.将数据写入空文件中</span></span><br><span class="line">    file.transferTo(newFile);</span><br><span class="line">    <span class="comment">//返回文件的路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;/upload/&quot;</span>+originalFilename;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC文件上传-跨服务器上传"><a href="#SpringMVC文件上传-跨服务器上传" class="headerlink" title="SpringMVC文件上传_跨服务器上传"></a>SpringMVC文件上传_跨服务器上传</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221171301415.png" alt="image-20211221171301415"></p><p>由于文件占据磁盘空间较大，在实际开发中往往会将文件上传到其他服务器中，此时需要使用跨服务器上传文件。</p><h4 id="1-在tomcat的webapps下创建upload目录作为文件上传目录。"><a href="#1-在tomcat的webapps下创建upload目录作为文件上传目录。" class="headerlink" title="1.在tomcat的webapps下创建upload目录作为文件上传目录。"></a>1.在tomcat的webapps下创建upload目录作为文件上传目录。</h4><h4 id="2-修改tomcat的conf-web-xml文件，支持跨服上传"><a href="#2-修改tomcat的conf-web-xml文件，支持跨服上传" class="headerlink" title="2.修改tomcat的conf/web.xml文件，支持跨服上传"></a>2.修改tomcat的<code>conf/web.xml</code>文件，支持跨服上传</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>readonly<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span>     </span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-修改tomcat的conf-server-xml文件，修改tomcat端口，修改完开启tomcat服务器"><a href="#3-修改tomcat的conf-server-xml文件，修改tomcat端口，修改完开启tomcat服务器" class="headerlink" title="3.修改tomcat的conf/server.xml文件，修改tomcat端口，修改完开启tomcat服务器"></a>3.修改tomcat的<code>conf/server.xml</code>文件，修改tomcat端口，修改完开启tomcat服务器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8081&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span>               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span> <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-编写JSP上传表单"><a href="#4-编写JSP上传表单" class="headerlink" title="4.编写JSP上传表单"></a>4.编写JSP上传表单</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;上传&lt;/title&gt;</span><br><span class="line">    &lt;<span class="type">script</span> <span class="variable">src</span> <span class="operator">=</span> <span class="string">&quot;/js/jquery-2.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;/js/jquery.form.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h3&gt;文件上传&lt;/h3&gt;</span><br><span class="line">    &lt;%--上传表单的提交方式必须是post--%&gt;</span><br><span class="line">    &lt;%-- enctype属性为multipart/form-data，意思是不对表单数据进行编码 --%&gt;</span><br><span class="line">    &lt;form  enctype=<span class="string">&quot;multipart/form-data&quot;</span> id=<span class="string">&quot;ajaxForm&quot;</span>&gt;</span><br><span class="line">        图片上传:&lt;input type=<span class="string">&quot;file&quot;</span> name=<span class="string">&quot;file&quot;</span>/&gt;</span><br><span class="line">        &lt;%-- 按钮类型不能是submit，否则会刷新页面       --%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;上传头像&quot;</span> id=<span class="string">&quot;btn&quot;</span>/&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">        &lt;%--上传头像后展示的位置--%&gt;</span><br><span class="line">    &lt;img src=<span class="string">&quot;/&quot;</span> width=<span class="string">&quot;100&quot;</span> id=<span class="string">&quot;img&quot;</span>&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(function () &#123;</span><br><span class="line">       $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">          <span class="comment">//异步提交表单</span></span><br><span class="line">          $(<span class="string">&quot;#ajaxForm&quot;</span>).ajaxSubmit(</span><br><span class="line">              &#123;</span><br><span class="line">                  url:<span class="string">&quot;/fileUpload5&quot;</span>,</span><br><span class="line">                  type:<span class="string">&quot;post&quot;</span>,</span><br><span class="line">                  success:function (data) &#123;</span><br><span class="line">                      $(<span class="string">&quot;#img&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,data);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;);</span><br><span class="line">       &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-添加跨服上传依赖"><a href="#5-添加跨服上传依赖" class="headerlink" title="5.添加跨服上传依赖"></a>5.添加跨服上传依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 跨服上传 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jersey<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jersey-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-创建控制器方法，该方法在接受到上传请求后将文件保存到其他服务器上。"><a href="#6-创建控制器方法，该方法在接受到上传请求后将文件保存到其他服务器上。" class="headerlink" title="6.创建控制器方法，该方法在接受到上传请求后将文件保存到其他服务器上。"></a>6.创建控制器方法，该方法在接受到上传请求后将文件保存到其他服务器上。</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/fileUpload5&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload4</span><span class="params">(HttpServletRequest request, MultipartFile file)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//设置跨服上传的服务器路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> <span class="string">&quot;http://localhost:8888/upload/&quot;</span>;</span><br><span class="line">    <span class="comment">//获取上传的文件名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">    filename = UUID.randomUUID()+<span class="string">&quot;_&quot;</span>+filename;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//跨服上传；</span></span><br><span class="line">    <span class="comment">//1.创建客户端对象</span></span><br><span class="line">    <span class="type">Client</span> <span class="variable">client</span> <span class="operator">=</span> Client.create();</span><br><span class="line">    <span class="comment">//2.使用客户端对象连接图片服务器</span></span><br><span class="line">    <span class="type">WebResource</span> <span class="variable">resource</span> <span class="operator">=</span> client.resource(path + filename);</span><br><span class="line">    <span class="comment">//3.传输数据</span></span><br><span class="line">    resource.put(file.getBytes());</span><br><span class="line">    <span class="keyword">return</span> path+filename;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC文件上传-文件下载"><a href="#SpringMVC文件上传-文件下载" class="headerlink" title="SpringMVC文件上传_文件下载"></a>SpringMVC文件上传_文件下载</h2><p>将文件上传到服务器后，有时我们需要让用户下载上传的文件，接下来我们编写文件下载功能：</p><h2 id="查询所有可下载的文件"><a href="#查询所有可下载的文件" class="headerlink" title="查询所有可下载的文件"></a>查询所有可下载的文件</h2><h4 id="1-编写控制器方法，查询所有可下载的文件，并跳转到下载页面"><a href="#1-编写控制器方法，查询所有可下载的文件，并跳转到下载页面" class="headerlink" title="1.编写控制器方法，查询所有可下载的文件，并跳转到下载页面"></a>1.编写控制器方法，查询所有可下载的文件，并跳转到下载页面</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DownLoadController</span> &#123;</span><br><span class="line">    <span class="comment">//查询可下载的文件</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/showFiles&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">showFileDown</span><span class="params">(HttpServletRequest request, Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//1.获取下载文件路径集合</span></span><br><span class="line">        <span class="comment">//注意：跨服务器上传中，网络路径将无法获取文件列表</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">realPath</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(realPath);</span><br><span class="line">        String[] files = file.list();</span><br><span class="line">        <span class="comment">//2.将路径放入模型中，跳转到JSP页面</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;files&quot;</span>,files);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;download&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-添加JSTL依赖"><a href="#2-添加JSTL依赖" class="headerlink" title="2.添加JSTL依赖"></a>2.添加JSTL依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- JSTL --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-spec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-编写下载页面"><a href="#3-编写下载页面" class="headerlink" title="3.编写下载页面"></a>3.编写下载页面</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">4</span>/<span class="number">20</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">40</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;下载&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;文件下载&lt;/h3&gt;</span><br><span class="line">&lt;%--遍历文件集合--%&gt;</span><br><span class="line">&lt;c:forEach items=<span class="string">&quot;$&#123;files&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;file&quot;</span>&gt;</span><br><span class="line">    &lt;a href=<span class="string">&quot;/download?fileName=$&#123;file&#125;&quot;</span>&gt;$&#123;file&#125;&lt;/a&gt;&lt;br/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="编写下载控制器"><a href="#编写下载控制器" class="headerlink" title="编写下载控制器"></a>编写下载控制器</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件下载</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/download&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fileDown</span><span class="params">(HttpServletRequest request, HttpServletResponse response,String fileName)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 设置响应头</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>,<span class="string">&quot;attachment;filename=&quot;</span>+fileName);</span><br><span class="line">    <span class="comment">// 获取文件路径</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> request.getSession().getServletContext().getRealPath(<span class="string">&quot;/upload&quot;</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(path,fileName);</span><br><span class="line">    <span class="comment">// 获取字节输出流</span></span><br><span class="line">    <span class="type">ServletOutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="comment">// 使用输出流写出文件</span></span><br><span class="line">    os.write(FileUtils.readFileToByteArray(file));</span><br><span class="line">    os.flush();</span><br><span class="line">    os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC异常处理-单个控制器异常处理"><a href="#SpringMVC异常处理-单个控制器异常处理" class="headerlink" title="SpringMVC异常处理_单个控制器异常处理"></a>SpringMVC异常处理_单个控制器异常处理</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220420212234804.png" alt="image-20220420212234804"></p><p>在系统当中， Dao、Service、Controller层代码出现都可能抛出异常。如果哪里产生异常就在哪里处理，则会降低开发效率。所以一般情况下我们会让异常向上抛出，最终到达DispatcherServlet中，此时SpringMVC提供了异常处理器进行异常处理，这样可以提高开发效率。</p><h4 id="处理单个控制器的异常："><a href="#处理单个控制器的异常：" class="headerlink" title="处理单个控制器的异常："></a>处理单个控制器的异常：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/t1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">t1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">str</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="comment">//        str.length();</span></span><br><span class="line"><span class="comment">//        int flag = 1/0;</span></span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model 模型对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 添加@ExceptionHandler，表示该方法是处理异常的方法，属性为处理的异常类</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;java.lang.NullPointerException.class,java.lang.ArithmeticException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">exceptionHandler1</span><span class="params">(Exception ex, Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向模型中添加异常对象</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,ex);</span><br><span class="line">        <span class="comment">//跳转到异常页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法一不能处理的异常交给方法二来处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;java.lang.Exception.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">exceptionHandler2</span><span class="params">(Exception ex, Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向模型中添加异常对象</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,ex);</span><br><span class="line">        <span class="comment">//跳转到异常页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="异常页面error-jsp"><a href="#异常页面error-jsp" class="headerlink" title="异常页面error.jsp"></a>异常页面error.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">4</span>/<span class="number">20</span></span><br><span class="line">  Time: <span class="number">21</span>:<span class="number">16</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;出错了!&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;ERROR!!! 发生异常 $&#123;msg&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="异常页面error2-jsp"><a href="#异常页面error2-jsp" class="headerlink" title="异常页面error2.jsp"></a>异常页面error2.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;出错了！&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line"></span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h3&gt;ERROR2 发生严重异常！$&#123;msg&#125;&lt;/h3&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC异常处理-全局异常处理"><a href="#SpringMVC异常处理-全局异常处理" class="headerlink" title="SpringMVC异常处理_全局异常处理"></a>SpringMVC异常处理_全局异常处理</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221171825754.png" alt="image-20211221171825754"></p><p>在控制器中定义异常处理方法只能处理该控制器类的异常，要想处理所有控制器的异常，需要定义全局异常处理类。</p><h4 id="1-编写另一个有异常的控制器类"><a href="#1-编写另一个有异常的控制器类" class="headerlink" title="1.编写另一个有异常的控制器类"></a>1.编写另一个有异常的控制器类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController2</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/t2&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">1</span>];</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写全局异常处理器类"><a href="#2-编写全局异常处理器类" class="headerlink" title="2.编写全局异常处理器类"></a>2.编写全局异常处理器类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局异常处理器，需要添加@ControllerAdvice</span></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常处理方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> model 模型对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// 添加@ExceptionHandler，表示该方法是处理异常的方法，属性为处理的异常类</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;java.lang.NullPointerException.class,java.lang.ArithmeticException.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">exceptionHandler1</span><span class="params">(Exception ex, Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向模型中添加异常对象</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,ex);</span><br><span class="line">        <span class="comment">//跳转到异常页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法一不能处理的异常交给方法二来处理</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(&#123;java.lang.Exception.class&#125;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">exceptionHandler2</span><span class="params">(Exception ex, Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//向模型中添加异常对象</span></span><br><span class="line">        model.addAttribute(<span class="string">&quot;msg&quot;</span>,ex);</span><br><span class="line">        <span class="comment">//跳转到异常页面</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error2&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC异常处理-自定义异常处理器"><a href="#SpringMVC异常处理-自定义异常处理器" class="headerlink" title="SpringMVC异常处理_自定义异常处理器"></a>SpringMVC异常处理_自定义异常处理器</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221172137762.png" alt="image-20211221172137762"></p><p>以上方式都是使用的SpringMVC自带的异常处理器进行异常处理，我们还可以自定义异常处理器处理异常：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerExceptionResolver;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义异常处理器实现HandlerExceptionResolver接口，并放入Spring容器中</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyExceptionHandler</span> <span class="keyword">implements</span> <span class="title class_">HandlerExceptionResolver</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> ModelAndView <span class="title function_">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> &#123;</span><br><span class="line">        <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> NullPointerException)</span><br><span class="line">        &#123;</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;error2&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        modelAndView.addObject(<span class="string">&quot;msg&quot;</span>,e);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringMVC拦截器-拦截器简介"><a href="#SpringMVC拦截器-拦截器简介" class="headerlink" title="SpringMVC拦截器_拦截器简介"></a>SpringMVC拦截器_拦截器简介</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211217145207400.png" alt="image-20211217145207400"></p><p>SpringMVC的拦截器（Interceptor）也是AOP思想的一种实现方式。它与Servlet的过滤器（Filter）功能类似</p><p>主要用于拦截用户的请求并做相应的处理，通常应用在权限验证、记录请求信息的日志、判断用户是否登录等功能上。</p><h3 id="拦截器和过滤器的区别"><a href="#拦截器和过滤器的区别" class="headerlink" title="拦截器和过滤器的区别"></a><strong>拦截器和过滤器的区别</strong></h3><ul><li>拦截器是SpringMVC组件，而过滤器是Servlet组件。</li><li>拦截器不依赖Web容器，过滤器依赖Web容器。</li><li>拦截器只能对控制器请求起作用，而过滤器则可以对所有的请求起作用。</li><li>拦截器可以直接获取IOC容器中的对象，而过滤器就不太方便获取。</li></ul><h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h2 id="SpringMVC拦截器-拦截器使用"><a href="#SpringMVC拦截器-拦截器使用" class="headerlink" title="SpringMVC拦截器_拦截器使用"></a>SpringMVC拦截器_拦截器使用</h2><h4 id="1-使用maven创建SpringMVC的web项目"><a href="#1-使用maven创建SpringMVC的web项目" class="headerlink" title="1.使用maven创建SpringMVC的web项目"></a>1.使用maven创建SpringMVC的web项目</h4><h4 id="2-创建控制器方法"><a href="#2-创建控制器方法" class="headerlink" title="2.创建控制器方法"></a>2.创建控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController1</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/m1&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">m1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;控制器方法&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-创建拦截器类，该类实现HandlerInterceptor接口，需要重写三个方法："><a href="#3-创建拦截器类，该类实现HandlerInterceptor接口，需要重写三个方法：" class="headerlink" title="3.创建拦截器类，该类实现HandlerInterceptor接口，需要重写三个方法："></a>3.创建拦截器类，该类实现HandlerInterceptor接口，需要重写三个方法：</h4><ul><li>preHandle：请求到达Controller前执行的方法，返回值为true通过拦截器，返回值为false被拦截器拦截。</li><li>postHandle：跳转到JSP前执行的方法</li><li>afterCompletion：跳转到JSP后执行的方法</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 请求到达Controller前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;请求到达Controller前&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果return false则无法到达Controller</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转到JSP前执行，此时可以向Request域添加数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跳转到JSP前&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;百战&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转到JSP后执行，此时已经不能向Request域添加数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跳转到JSP后&quot;</span>);</span><br><span class="line">        request.setAttribute(<span class="string">&quot;age&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写JSP页面"><a href="#4-编写JSP页面" class="headerlink" title="4.编写JSP页面"></a>4.编写JSP页面</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: 百里诀</span><br><span class="line">  Date: <span class="number">2022</span>/<span class="number">4</span>/<span class="number">20</span></span><br><span class="line">  Time: <span class="number">23</span>:<span class="number">13</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;结果&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h3&gt;name:$&#123;requestScope.name&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;age:$&#123;requestScope.age&#125;&lt;/h3&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-在SpringMVC核心配置文件中配置拦截器"><a href="#5-在SpringMVC核心配置文件中配置拦截器" class="headerlink" title="5.在SpringMVC核心配置文件中配置拦截器"></a>5.在SpringMVC核心配置文件中配置拦截器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置拦截器的作用路径     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 拦截器对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.interceptor.MyInterceptor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC拦截器-全局拦截器"><a href="#SpringMVC拦截器-全局拦截器" class="headerlink" title="SpringMVC拦截器_全局拦截器"></a>SpringMVC拦截器_全局拦截器</h2><p>全局拦截器可以拦截所有控制器处理的URL，作用等于&#x2F;**，配置方式如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span>   </span><br><span class="line">    <span class="comment">&lt;!-- 全局拦截器 --&gt;</span>    </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.interceptor.MyInterceptor&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringMVC拦截器-拦截器链与执行顺序"><a href="#SpringMVC拦截器-拦截器链与执行顺序" class="headerlink" title="SpringMVC拦截器_拦截器链与执行顺序"></a>SpringMVC拦截器_拦截器链与执行顺序</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221172301687.png" alt="image-20211221172301687"></p><p>如果一个URL能够被多个拦截器所拦截，全局拦截器最先执行，其他拦截器根据配置文件中配置的从上到下执行，接下来我们再配置一个拦截器：</p><h4 id="1-编写拦截器类"><a href="#1-编写拦截器类" class="headerlink" title="1.编写拦截器类"></a>1.编写拦截器类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">//拦截器类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor2</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">// 请求到达Controller前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器2：请求到达Controller前&quot;</span>);</span><br><span class="line">        <span class="comment">// 如果return false则无法到达Controller</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转到JSP前执行，此时可以向Request域添加数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器2：跳转到JSP前&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 跳转到JSP后执行，此时已经不能向Request域添加数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器2：跳转到JSP后&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="-3"><a href="#-3" class="headerlink" title=""></a></h4><h4 id="2-配置拦截器链-在springmvc-xml配置"><a href="#2-配置拦截器链-在springmvc-xml配置" class="headerlink" title="2.配置拦截器链(在springmvc.xml配置)"></a>2.配置拦截器链(在springmvc.xml配置)</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截器1 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.interceptor.MyInterceptor&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 拦截器2 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.interceptor.MyInterceptor2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure><p>访问控制器方法后输出如下：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211217153441523.png" alt="image-20211217153441523"></p><h3 id="结论："><a href="#结论：" class="headerlink" title="结论："></a>结论：</h3><ol><li>preHandle()顺序执行，postHandle()、afterComletion()逆序执行。</li><li>只要有一个preHandle()拦截，后面的preHandle()，postHandle()都不会执行。</li><li>只要相应的preHandle()放行，afterComletion()就会执行。</li></ol><h2 id="SpringMVC跨域请求-同源策略"><a href="#SpringMVC跨域请求-同源策略" class="headerlink" title="SpringMVC跨域请求_同源策略"></a>SpringMVC跨域请求_同源策略</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221172937329.png" alt="image-20211221172937329"></p><p>同源策略是浏览器的一个安全功能。同源，指的是两个URL的协议，域名，端口相同。浏览器出于安全方面的考虑，不同源的客户端脚本在没有明确授权的情况下，不能读写对方资源。</p><h4 id="哪些不受同源策略限制："><a href="#哪些不受同源策略限制：" class="headerlink" title="哪些不受同源策略限制："></a>哪些不受同源策略限制：</h4><ol><li>页面中的<code>&lt;a&gt;</code>跳转、表单提交不会受到同源策略限制的。</li><li>静态资源引入也不会受到同源策略限制。如嵌入到页面中的<code>&lt;script src=&quot;&quot;&gt;</code>，<code>&lt;img src=&quot;&quot;&gt;</code>，<code>&lt;link href=&quot;&quot;&gt;</code>等。</li><li>最容易收到同源策略影响的就是Ajax请求。</li></ol><h2 id="SpringMVC跨域请求-跨域请求"><a href="#SpringMVC跨域请求-跨域请求" class="headerlink" title="SpringMVC跨域请求_跨域请求"></a>SpringMVC跨域请求_跨域请求</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221173152117.png" alt="image-20211221173152117"></p><p>当请求URL的协议、域名、端口三者中任意一个与当前页面URL不同时即为跨域。浏览器执行JavaScript脚本时，会检查当前请求是否同源，如果不是同源资源，就不会被执行。</p><table><thead><tr><th>当前页面URL</th><th>被请求页面URL</th><th>是否跨域</th><th>原因</th></tr></thead><tbody><tr><td><a href="http://www.itbaizhan.com/">http://www.itbaizhan.com/</a></td><td><a href="http://www.itbaizhan.com/index.html">http://www.itbaizhan.com/index.html</a></td><td>否</td><td></td></tr><tr><td><a href="http://www.itbaizhan.com/">http://www.itbaizhan.com/</a></td><td><a href="https://www.itbaizhan.com/index.html">https://www.itbaizhan.com/index.html</a></td><td>跨域</td><td>协议不同</td></tr><tr><td><a href="http://www.itbaizhan.com/">http://www.itbaizhan.com/</a></td><td><a href="http://www.baidu.com/">http://www.baidu.com/</a></td><td>跨域</td><td>主域名不同</td></tr><tr><td><a href="http://www.itbaizhan.com/">http://www.itbaizhan.com/</a></td><td><a href="http://itbz.itbaizhan.com/">http://itbz.itbaizhan.com/</a></td><td>跨域</td><td>子域名不同</td></tr><tr><td><a href="http://www.itbaizhan.com:8080/">http://www.itbaizhan.com:8080/</a></td><td><a href="http://www.itbaizhan.com:7001/">http://www.itbaizhan.com:7001/</a></td><td>跨域</td><td>端口号不同</td></tr></tbody></table><h4 id="1-编写控制器方法-5"><a href="#1-编写控制器方法-5" class="headerlink" title="1.编写控制器方法"></a>1.编写控制器方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController3</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/m3&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">m3</span><span class="params">(Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;测试跨域请求&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="2-编写JSP页面，发送异步请求"><a href="#2-编写JSP页面，发送异步请求" class="headerlink" title="2.编写JSP页面，发送异步请求"></a>2.编写JSP页面，发送异步请求</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;跨域请求&lt;/title&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;/js/jquery-2.1.1.min.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(function () &#123;</span><br><span class="line">            $(<span class="string">&quot;#btn&quot;</span>).click(function () &#123;</span><br><span class="line">                <span class="comment">// $.get(&quot;http://localhost:8080/m3&quot;,function (data) &#123;</span></span><br><span class="line">                <span class="comment">//     console.log(data);</span></span><br><span class="line">                <span class="comment">// &#125;)</span></span><br><span class="line">                $.get(<span class="string">&quot;http://127.0.0.1:8080/m3&quot;</span>, function (data) &#123;</span><br><span class="line">                    console.log(data);</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn&quot;</span>&gt;异步请求&lt;/button&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>结果：</p><p>当浏览器通过<a href="http://localhost:8080/cross.jsp%E8%AE%BF%E9%97%AEJSP%E9%A1%B5%E9%9D%A2%E6%97%B6">http://localhost:8080/cross.jsp访问JSP页面时</a></p><ul><li><a href="http://localhost:8080/m3">http://localhost:8080/m3</a> 能发送异步请求；</li><li><a href="http://127.0.0.1:8080/m3">http://127.0.0.1:8080/m3</a> 由于同源无法发送异步请求，报以下异常：</li></ul><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211217171651760.png" alt="image-20211217171651760"></p><h2 id="SpringMVC跨域请求-控制器接收跨域请求"><a href="#SpringMVC跨域请求-控制器接收跨域请求" class="headerlink" title="SpringMVC跨域请求_控制器接收跨域请求"></a>SpringMVC跨域请求_控制器接收跨域请求</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211221173320233.png" alt="image-20211221173320233"></p><p>SpringMVC提供了注解@CrossOrigin解决跨域问题。用法如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/m3&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="comment">// 如果请求从http://localhost:8080发出，则允许跨域访问</span></span><br><span class="line"><span class="meta">@CrossOrigin(&quot;http://localhost:8080&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">m3</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;测试跨域请求&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SSM整合-需求分析"><a href="#SSM整合-需求分析" class="headerlink" title="SSM整合_需求分析"></a>SSM整合_需求分析</h2><p>接下来我们使用Maven+Spring+MyBatis+SpringMVC完成一个案例，案例需求为在页面可以进行添加学生+查询所有学生！</p><h3 id="案例需要使用以下技术："><a href="#案例需要使用以下技术：" class="headerlink" title="案例需要使用以下技术："></a><strong>案例需要使用以下技术：</strong></h3><ul><li>使用Maven创建聚合工程，并使用Maven的tomcat插件运行工程</li><li>使用Spring的IOC容器管理对象</li><li>使用MyBatis操作数据库</li><li>使用Spring的声明式事务进行事务管理</li><li>使用SpringMVC作为控制器封装Model并跳转到JSP页面展示数据</li><li>使用Junit测试方法</li><li>使用Log4j在控制台打印日志</li></ul><h3 id="案例的编写流程如下："><a href="#案例的编写流程如下：" class="headerlink" title="案例的编写流程如下："></a><strong>案例的编写流程如下：</strong></h3><ol><li>创建maven父工程，添加需要的依赖和插件</li><li>创建dao子工程，配置MyBatis操作数据库，配置Log4j在控制台打印日志。</li><li>创建service子工程，配置Spring声明式事务</li><li>创建controller子工程，配置SpringMVC作为控制器，编写JSP页面展示数据。</li><li>每个子工程都使用Spring进行IOC管理</li></ol><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"># 准备数据库数据</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE `student`;</span><br><span class="line">USE `student`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `student`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">INSERT</span>  <span class="keyword">INTO</span> `student`(`id`,`name`,`sex`,`address`) <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;百战程序员&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;北京尚学堂&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br></pre></td></tr></table></figure><h2 id="SSM整合-创建父工程"><a href="#SSM整合-创建父工程" class="headerlink" title="SSM整合_创建父工程"></a>SSM整合_创建父工程</h2><p>创建maven父工程，添加需要的依赖和插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Spring版本--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>5.2.12.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybaits  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- mysql驱动 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  druid连接池  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis与Spring的整合包--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- springmvc --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 事务 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- jstl --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-spec<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>taglibs-standard-impl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- servlet --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- jsp --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- log4j --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">               <span class="comment">&lt;!-- tomcat插件 --&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                       <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">server</span>&gt;</span>tomcat7<span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">java.util.logging.SimpleFormatter.format</span>&gt;</span>%1$tH:%1$tM:%1$tS %2$s%n%4$s: %5$s%6$s%n</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">java.util.logging.SimpleFormatter.format</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">systemProperties</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SSM整合-创建dao子工程"><a href="#SSM整合-创建dao子工程" class="headerlink" title="SSM整合_创建dao子工程"></a>SSM整合_创建dao子工程</h2><h4 id="1-在父工程下创建maven普通java子工程"><a href="#1-在父工程下创建maven普通java子工程" class="headerlink" title="1.在父工程下创建maven普通java子工程"></a>1.在父工程下创建maven普通java子工程</h4><h4 id="2-编写实体类"><a href="#2-编写实体类" class="headerlink" title="2.编写实体类"></a>2.编写实体类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name, String sex, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写持久层接口"><a href="#3-编写持久层接口" class="headerlink" title="3.编写持久层接口"></a>3.编写持久层接口</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="comment">//查询所有学生</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from stduent&quot;)</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加学生</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into student values(null.#&#123;name&#125;,#&#123;sex&#125;,#&#123;address&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Student student)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写log4j-properties配置文件"><a href="#4-编写log4j-properties配置文件" class="headerlink" title="4.编写log4j.properties配置文件"></a>4.编写log4j.properties配置文件</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">log4j.rootCategory</span>=<span class="string">debug, CONSOLE, LOGFILE</span></span><br><span class="line"><span class="attr">log4j.logger.org.apache.axis.enterprise</span>=<span class="string">FATAL, CONSOLE</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE</span>=<span class="string">org.apache.log4j.ConsoleAppender</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout</span>=<span class="string">org.apache.log4j.PatternLayout</span></span><br><span class="line"><span class="attr">log4j.appender.CONSOLE.layout.ConversionPattern</span>=<span class="string">[%d&#123;MM/dd HH:mm:ss&#125;] %-6r [%15.15t] %-5p %30.30c %x - %m\n</span></span><br></pre></td></tr></table></figure><h4 id="5-编写数据库配置文件druid-properties"><a href="#5-编写数据库配置文件druid-properties" class="headerlink" title="5.编写数据库配置文件druid.properties"></a>5.编写数据库配置文件druid.properties</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql:///student</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><h4 id="6-编写MyBatis配置文件SqlMapConfig-xml"><a href="#6-编写MyBatis配置文件SqlMapConfig-xml" class="headerlink" title="6.编写MyBatis配置文件SqlMapConfig.xml"></a>6.编写MyBatis配置文件SqlMapConfig.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-编写Spring配置文件applicationContext-dao-xml"><a href="#7-编写Spring配置文件applicationContext-dao-xml" class="headerlink" title="7.编写Spring配置文件applicationContext-dao.xml"></a>7.编写Spring配置文件applicationContext-dao.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">          http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取数据库配置文件  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:druid.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  配置数据源  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSouce&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  SqlSessionFactory  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSouce&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:SqlMapConfig.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置扫描包对象，为包下的接口创建代理对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itbaizhan.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-测试持久层接口的方法"><a href="#8-测试持久层接口的方法" class="headerlink" title="8.测试持久层接口的方法"></a>8.测试持久层接口的方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:applicationContext-dao.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Student&gt; all = studentDao.findAll();</span><br><span class="line">        <span class="keyword">for</span> (Student student : all) &#123;</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;wwww&quot;</span>, <span class="string">&quot;ewg&quot;</span>, <span class="string">&quot;fsf&quot;</span>);</span><br><span class="line">        studentDao.add(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SSM整合-创建service子工程"><a href="#SSM整合-创建service子工程" class="headerlink" title="SSM整合_创建service子工程"></a>SSM整合_创建service子工程</h2><ol><li><h4 id="在父工程下创建maven普通java子工程"><a href="#在父工程下创建maven普通java子工程" class="headerlink" title="在父工程下创建maven普通java子工程"></a>在父工程下创建maven普通java子工程</h4></li><li><h4 id="service子工程引入dao子工程的依赖"><a href="#service子工程引入dao子工程的依赖" class="headerlink" title="service子工程引入dao子工程的依赖"></a>service子工程引入dao子工程的依赖</h4></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_dao<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-创建服务层方法"><a href="#3-创建服务层方法" class="headerlink" title="3.创建服务层方法"></a>3.创建服务层方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAllStudent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span>&#123;</span><br><span class="line">        studentDao.add(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-创建服务层的Spring配置文件applicationContext-service-xml，配置声明式事务"><a href="#4-创建服务层的Spring配置文件applicationContext-service-xml，配置声明式事务" class="headerlink" title="4.创建服务层的Spring配置文件applicationContext-service.xml，配置声明式事务"></a>4.创建服务层的Spring配置文件applicationContext-service.xml，配置声明式事务</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  包扫描  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan.service&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--  切面  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut</span>=<span class="string">&quot;execution(* com.itbaizhan.service.*.*(..))&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:advisor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SSM整合-创建controller子工程"><a href="#SSM整合-创建controller子工程" class="headerlink" title="SSM整合_创建controller子工程"></a>SSM整合_创建controller子工程</h2><h4 id="1-在父工程下使用maven创建web类型子工程"><a href="#1-在父工程下使用maven创建web类型子工程" class="headerlink" title="1.在父工程下使用maven创建web类型子工程"></a>1.在父工程下使用maven创建web类型子工程</h4><h4 id="2-controller工程引入service子工程的依赖，并配置ssm父工程"><a href="#2-controller工程引入service子工程的依赖，并配置ssm父工程" class="headerlink" title="2.controller工程引入service子工程的依赖，并配置ssm父工程"></a>2.controller工程引入service子工程的依赖，并配置ssm父工程</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_controller<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_demo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ssm_service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-编写控制器类"><a href="#3-编写控制器类" class="headerlink" title="3.编写控制器类"></a>3.编写控制器类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/student&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/all&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">all</span><span class="params">(Model model)</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Student&gt; allStudent = studentService.findAllStudent();</span><br><span class="line">        model.addAttribute(<span class="string">&quot;students&quot;</span>,allStudent);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;allStudent&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">add</span><span class="params">(Student student)</span></span><br><span class="line">    &#123;</span><br><span class="line">        studentService.addStudent(student);</span><br><span class="line">        <span class="comment">//重定向到查询所有学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/student/all&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-编写SpringMVC配置文件springmvc-xml"><a href="#4-编写SpringMVC配置文件springmvc-xml" class="headerlink" title="4.编写SpringMVC配置文件springmvc.xml"></a>4.编写SpringMVC配置文件springmvc.xml</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">              http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">               http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">               http://www.springframework.org/schema/mvc</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/mvc/spring-mvc.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 扫描Controller包  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan.controller&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 配置视图解析器   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;internalResourceViewResolver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 开启SpringMVC注解的支持 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 放行静态资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-编写Spring的总配置文件applicationContext-xml，该文件引入dao和service层的Spring配置文件"><a href="#5-编写Spring的总配置文件applicationContext-xml，该文件引入dao和service层的Spring配置文件" class="headerlink" title="5.编写Spring的总配置文件applicationContext.xml，该文件引入dao和service层的Spring配置文件"></a>5.编写Spring的总配置文件applicationContext.xml，该文件引入dao和service层的Spring配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-dao.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">&quot;applicationContext-service.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="6-在web-xml中配置Spring监听器，该监听器会监听服务器启动，并自动创建Spring的IOC容器"><a href="#6-在web-xml中配置Spring监听器，该监听器会监听服务器启动，并自动创建Spring的IOC容器" class="headerlink" title="6.在web.xml中配置Spring监听器，该监听器会监听服务器启动，并自动创建Spring的IOC容器"></a>6.在web.xml中配置Spring监听器，该监听器会监听服务器启动，并自动创建Spring的IOC容器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 创建spring容器的监听器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="7-在web-xml中配置SpringMVC的前端控制器和编码过滤器"><a href="#7-在web-xml中配置SpringMVC的前端控制器和编码过滤器" class="headerlink" title="7.在web.xml中配置SpringMVC的前端控制器和编码过滤器"></a>7.在web.xml中配置SpringMVC的前端控制器和编码过滤器</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">&quot;3.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--前端控制器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--编码过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 创建spring容器的监听器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="8-编写JSP页面allStudent-jsp"><a href="#8-编写JSP页面allStudent-jsp" class="headerlink" title="8.编写JSP页面allStudent.jsp"></a>8.编写JSP页面allStudent.jsp</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;所有学生&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;%-- 添加学生表单 --%&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;/student/add&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        姓名：&lt;input name=<span class="string">&quot;name&quot;</span>&gt;</span><br><span class="line">        性别：&lt;input name=<span class="string">&quot;sex&quot;</span>&gt;</span><br><span class="line">        地址：&lt;input name=<span class="string">&quot;address&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;提交&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;%-- 展示学生表格 --%&gt;</span><br><span class="line">    &lt;table width=<span class="string">&quot;500&quot;</span> cellpadding=<span class="string">&quot;0&quot;</span> cellspacing=<span class="string">&quot;0&quot;</span> border=<span class="string">&quot;1&quot;</span> align=<span class="string">&quot;center&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;id&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;地址&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;#&#123;students&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;student&quot;</span>&gt;</span><br><span class="line">           &lt;tr&gt;</span><br><span class="line">               &lt;td&gt;$&#123;student.id&#125;&lt;/td&gt;</span><br><span class="line">               &lt;td&gt;$&#123;student.name&#125;&lt;/td&gt;</span><br><span class="line">               &lt;td&gt;$&#123;student.sex&#125;&lt;/td&gt;</span><br><span class="line">               &lt;td&gt;$&#123;student.address&#125;&lt;/td&gt;</span><br><span class="line">           &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web案例实战</title>
      <link href="/archives/9c44dee7.html"/>
      <url>/archives/9c44dee7.html</url>
      
        <content type="html"><![CDATA[<h1 id="Web案例实战"><a href="#Web案例实战" class="headerlink" title="Web案例实战"></a>Web案例实战</h1><h2 id="一、案例需求"><a href="#一、案例需求" class="headerlink" title="一、案例需求"></a>一、案例需求</h2><h3 id="1-需求："><a href="#1-需求：" class="headerlink" title="1.需求："></a>1.需求：</h3><p>实现用户登录与退出登录功能，要求一个用户只能在一处登录（利用Session）</p><p>完成对用户表的CRUD操作</p><p>使用技术：</p><p>JSP、Servlet、Filter、Listener、JDBC、MySQL</p><h3 id="2-创建数据库表"><a href="#2-创建数据库表" class="headerlink" title="2.创建数据库表"></a>2.创建数据库表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CREATE TABLE `users` (</span><br><span class="line"> `userid` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line"> `username` varchar(30) DEFAULT NULL,</span><br><span class="line"> `userpwd` varchar(30) DEFAULT NULL,</span><br><span class="line"> `usersex` varchar(2) DEFAULT NULL,</span><br><span class="line"> `phonenumber` varchar(30) DEFAULT NULL,</span><br><span class="line"> `qqnumber` varchar(20) DEFAULT NULL,</span><br><span class="line"> PRIMARY KEY (`userid`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</span><br></pre></td></tr></table></figure><h3 id="3-搭建环境"><a href="#3-搭建环境" class="headerlink" title="3 搭建环境"></a>3 搭建环境</h3><h4 id="3-1-创建项目"><a href="#3-1-创建项目" class="headerlink" title="3.1 创建项目"></a>3.1 创建项目</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220329194256047.png" alt="image-20220329194256047"></p><h4 id="3-2-添加jar包-或maven项目添加依赖"><a href="#3-2-添加jar包-或maven项目添加依赖" class="headerlink" title="3.2 添加jar包(或maven项目添加依赖)"></a>3.2 添加jar包(或maven项目添加依赖)</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220329194323245.png" alt="image-20220329194323245"></p><h4 id="3-3-添加jstl标签库的约束文件"><a href="#3-3-添加jstl标签库的约束文件" class="headerlink" title="3.3 添加jstl标签库的约束文件"></a>3.3 添加jstl标签库的约束文件</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220329194501300.png" alt="image-20220329194501300"></p><h4 id="3-4-创建包"><a href="#3-4-创建包" class="headerlink" title="3.4 创建包"></a>3.4 创建包</h4><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220329194620238.png" alt="image-20220329194620238"></p><h4 id="3-5-创建POJO"><a href="#3-5-创建POJO" class="headerlink" title="3.5 创建POJO"></a>3.5 创建POJO</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Users</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> userid;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String userpwd;</span><br><span class="line">    <span class="keyword">private</span> String usersex;</span><br><span class="line">    <span class="keyword">private</span> String phonenumber;</span><br><span class="line">    <span class="keyword">private</span> String qqnumber;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getUserid</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserid</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userid = userid;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUserpwd</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userpwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserpwd</span><span class="params">(String userpwd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userpwd = userpwd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsersex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> usersex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsersex</span><span class="params">(String usersex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.usersex = usersex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPhonenumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> phonenumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPhonenumber</span><span class="params">(String phonenumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.phonenumber = phonenumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getQqnumber</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> qqnumber;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setQqnumber</span><span class="params">(String qqnumber)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.qqnumber = qqnumber;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-创建JDBC工具类（也可以使用MyBatis-）"><a href="#3-6-创建JDBC工具类（也可以使用MyBatis-）" class="headerlink" title="3.6 创建JDBC工具类（也可以使用MyBatis ）"></a>3.6 创建JDBC工具类（也可以使用MyBatis ）</h4><p>利用Properties类进行读取值</p><p>db.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/bjsxt?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>JdbcUtils</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.commons;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ResourceBundle;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String driver;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String url;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String username;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String password;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ResourceBundle</span> <span class="variable">bundle</span> <span class="operator">=</span> ResourceBundle.getBundle(<span class="string">&quot;db&quot;</span>);</span><br><span class="line">        driver = bundle.getString(<span class="string">&quot;jdbc.driver&quot;</span>);</span><br><span class="line">        url = bundle.getString(<span class="string">&quot;jdbc.url&quot;</span>);</span><br><span class="line">        username = bundle.getString(<span class="string">&quot;jdbc.username&quot;</span>);</span><br><span class="line">        password = bundle.getString(<span class="string">&quot;jdbc.password&quot;</span>);</span><br><span class="line">        Class.forName(driver);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取连接方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title function_">getConnection</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span>  <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = DriverManager.getConnection(url,username,password);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> conn;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭连接</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">closeConnection</span><span class="params">(Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//事务回滚</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rollbackConnection</span><span class="params">(Connection conn)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//事务回滚</span></span><br><span class="line">            conn.rollback();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、业务实现"><a href="#二、业务实现" class="headerlink" title="二、业务实现"></a>二、业务实现</h2><h3 id="1-用户登录"><a href="#1-用户登录" class="headerlink" title="1. 用户登录"></a>1. 用户登录</h3><h4 id="1-1-创建登录页面"><a href="#1-1-创建登录页面" class="headerlink" title="1.1 创建登录页面"></a>1.1 创建登录页面</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">53</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;欢迎登录后台管理系统&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;script language=<span class="string">&quot;JavaScript&quot;</span> src=<span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/cloud.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">if</span>(window.parent.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            window.parent.location=<span class="string">&quot;login.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">            $(<span class="string">&#x27;.loginbox&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>:<span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;left&#x27;</span>:($(window).width()-<span class="number">692</span>)/<span class="number">2</span>&#125;);</span><br><span class="line">            $(window).resize(function()&#123;</span><br><span class="line">                $(<span class="string">&#x27;.loginbox&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>:<span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;left&#x27;</span>:($(window).width()-<span class="number">692</span>)/<span class="number">2</span>&#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        function <span class="title function_">change</span><span class="params">()</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#code&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;validateCode.do?&quot;</span>+Math.random());</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;background-color:#1c77ac; background-image:url(images/light.png); background-repeat:no-repeat; background-position:center top; overflow:hidden;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;mainBody&quot;</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;cloud1&quot;</span> class=<span class="string">&quot;cloud&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;cloud2&quot;</span> class=<span class="string">&quot;cloud&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;logintop&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;回首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;帮助&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;关于&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;loginbody&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">    &lt;div class=<span class="string">&quot;loginbox loginbox2&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">       &lt;form action=<span class="string">&quot;login.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">           &lt;ul&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;username&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;loginuser&quot;</span> value=<span class="string">&quot;admin&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;userpwd&quot;</span> type=<span class="string">&quot;password&quot;</span> class=<span class="string">&quot;loginpwd&quot;</span> value=<span class="string">&quot;密码&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">               &lt;li class=<span class="string">&quot;yzm&quot;</span>&gt;</span><br><span class="line">                   &lt;span&gt;&lt;input name=<span class="string">&quot;code&quot;</span> type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;验证码&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/span&gt;&lt;cite&gt;&lt;img id=<span class="string">&quot;code&quot;</span> src=<span class="string">&quot;validateCode.do&quot;</span> onclick=<span class="string">&quot;change()&quot;</span>&gt;&lt;/cite&gt;</span><br><span class="line">               &lt;/li&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;loginbtn&quot;</span> value=<span class="string">&quot;登录&quot;</span>  onclick=<span class="string">&quot;javascript:window.location=&#x27;main.html&#x27;&quot;</span>  /&gt;&lt;/li&gt;</span><br><span class="line">           &lt;/ul&gt;</span><br><span class="line">       &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="1-2-创建登陆业务持久层"><a href="#1-2-创建登陆业务持久层" class="headerlink" title="1.2 创建登陆业务持久层"></a>1.2 创建登陆业务持久层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserLoginDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">selectUsersByUserNameAndUserPwd</span><span class="params">(String username,String userpwd)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserLoginDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserLoginDao</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录的数据库查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userpwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">selectUsersByUserNameAndUserPwd</span><span class="params">(String username, String userpwd)</span> &#123;</span><br><span class="line">        <span class="type">Users</span>  <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;select * from users where username = ? and userpwd =  ?&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,username);</span><br><span class="line">            ps.setString(<span class="number">2</span>,userpwd);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> ps.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setUsersex(resultSet.getString(<span class="string">&quot;usersex&quot;</span>));</span><br><span class="line">                user.setUserpwd(resultSet.getString(<span class="string">&quot;userpwd&quot;</span>));</span><br><span class="line">                user.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setUserid(resultSet.getInt(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">                user.setPhonenumber(resultSet.getString(<span class="string">&quot;phonenumber&quot;</span>));</span><br><span class="line">                user.setQqnumber(resultSet.getString(<span class="string">&quot;qqnumber&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-创建登录业务的业务层"><a href="#1-4-创建登录业务的业务层" class="headerlink" title="1.4 创建登录业务的业务层"></a>1.4 创建登录业务的业务层</h4><p>用户登录状态的自定义异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.exception;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录状态的自定义异常</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserNotFoundException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotFoundException</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotFoundException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">UserNotFoundException</span><span class="params">(String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建业务层</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserLoginService</span> &#123;</span><br><span class="line">    Users <span class="title function_">userLogin</span><span class="params">(String username,String userpwd)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserLoginDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.impl.UserLoginDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.exception.UserNotFoundException;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserLoginService;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户登录业务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserLoginService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户登录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userpwd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">userLogin</span><span class="params">(String username, String userpwd)</span> &#123;</span><br><span class="line">        <span class="type">UserLoginDao</span> <span class="variable">userLoginDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserLoginDaoImpl</span>();</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> userLoginDao.selectUsersByUserNameAndUserPwd(username, userpwd);</span><br><span class="line">        <span class="keyword">if</span>(users == <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UserNotFoundException</span>(<span class="string">&quot;用户名或密码有误！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-创建登录业务的web层"><a href="#1-4-创建登录业务的web层" class="headerlink" title="1.4 创建登录业务的web层"></a>1.4 创建登录业务的web层</h4><h5 id="1-4-1-创建Servlert"><a href="#1-4-1-创建Servlert" class="headerlink" title="1.4.1 创建Servlert"></a>1.4.1 创建Servlert</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.Constants;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.exception.UserNotFoundException;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserLoginService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserLoginServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用户登录请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">   </span><br><span class="line">            <span class="comment">//调用相应的业务层</span></span><br><span class="line">                <span class="type">UserLoginService</span> <span class="variable">userLoginService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserLoginServiceImpl</span>();</span><br><span class="line">                <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> userLoginService.userLogin(username, userpwd);</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//建立客户端与服务端的会话状态</span></span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">   session.setAttribute(Constants.USER_SESSION_KEY,users);</span><br><span class="line">               </span><br><span class="line">                <span class="comment">//使用重定向方式跳转首页</span></span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;main.jsp&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(UserNotFoundException e)&#123;</span><br><span class="line">           req.setAttribute(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">           req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-4-2-添加登录后的首页"><a href="#1-4-2-添加登录后的首页" class="headerlink" title="1.4.2 添加登录后的首页"></a>1.4.2 添加登录后的首页</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">11</span>:<span class="number">36</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;信息管理系统界面&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;frameset rows=<span class="string">&quot;*,31&quot;</span> cols=<span class="string">&quot;*&quot;</span> frameborder=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> framespacing=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">    &lt;frameset cols=<span class="string">&quot;187,*&quot;</span> frameborder=<span class="string">&quot;no&quot;</span> border=<span class="string">&quot;0&quot;</span> framespacing=<span class="string">&quot;0&quot;</span>&gt;</span><br><span class="line">        &lt;frame src=<span class="string">&quot;left.jsp&quot;</span> name=<span class="string">&quot;leftFrame&quot;</span> scrolling=<span class="string">&quot;No&quot;</span> noresize=<span class="string">&quot;noresize&quot;</span> id=<span class="string">&quot;leftFrame&quot;</span> title=<span class="string">&quot;leftFrame&quot;</span> /&gt;</span><br><span class="line">        &lt;frame src=<span class="string">&quot;index.jsp&quot;</span> name=<span class="string">&quot;rightFrame&quot;</span> id=<span class="string">&quot;rightFrame&quot;</span> title=<span class="string">&quot;rightFrame&quot;</span> /&gt;</span><br><span class="line">    &lt;/frameset&gt;</span><br><span class="line">    &lt;frame src=<span class="string">&quot;footer.jsp&quot;</span> name=<span class="string">&quot;bottomFrame&quot;</span> scrolling=<span class="string">&quot;No&quot;</span> noresize=<span class="string">&quot;noresize&quot;</span> id=<span class="string">&quot;bottomFrame&quot;</span> title=<span class="string">&quot;bottomFrame&quot;</span> /&gt;</span><br><span class="line">&lt;/frameset&gt;</span><br><span class="line">&lt;noframes&gt;&lt;body&gt;</span><br><span class="line">&lt;/body&gt;&lt;/noframes&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="1-4-3-创建登录业务的Filter"><a href="#1-4-3-创建登录业务的Filter" class="headerlink" title="1.4.3 创建登录业务的Filter"></a>1.4.3 创建登录业务的Filter</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.Constants;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前客户端浏览器是否登录的Filter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;*.do&quot;,&quot;*.jsp&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//查看session是否有值，从而判断登录的状态</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)servletRequest;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">//判断当前请求的是否为login.jsp或者login.do，如果请求的是用户登录的资源那么需要放行。</span></span><br><span class="line">        <span class="keyword">if</span>(uri.indexOf(<span class="string">&quot;login.jsp&quot;</span>) != -<span class="number">1</span> || uri.indexOf(<span class="string">&quot;login.do&quot;</span>) != -<span class="number">1</span>|| uri.indexOf(<span class="string">&quot;validateCode.do&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">            <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> (Users) session.getAttribute(Constants.USER_SESSION_KEY);</span><br><span class="line">            <span class="keyword">if</span>(users !=  <span class="literal">null</span>)&#123;</span><br><span class="line">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                request.setAttribute(Constants.REQUEST_MSG,<span class="string">&quot;不登录不好使！&quot;</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5-用户只能在一处登录"><a href="#1-5-用户只能在一处登录" class="headerlink" title="1.5 用户只能在一处登录"></a>1.5 用户只能在一处登录</h4><h5 id="1-5-1-修改处理登录请求的Servlet"><a href="#1-5-1-修改处理登录请求的Servlet" class="headerlink" title="1.5.1 修改处理登录请求的Servlet"></a>1.5.1 修改处理登录请求的Servlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.Constants;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.exception.UserNotFoundException;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserLoginService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserLoginServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用户登录请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">try</span>&#123;  <span class="type">UserLoginService</span> <span class="variable">userLoginService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserLoginServiceImpl</span>();</span><br><span class="line">                <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> userLoginService.userLogin(username, userpwd);</span><br><span class="line">                <span class="comment">//建立客户端与服务端的会话状态</span></span><br><span class="line"><span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">                session.setAttribute(Constants.USER_SESSION_KEY,users);</span><br><span class="line">                <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">                <span class="type">HttpSession</span> <span class="variable">temp</span> <span class="operator">=</span> (HttpSession) servletContext.getAttribute(users.getUserid()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(temp != <span class="literal">null</span>)&#123;</span><br><span class="line">                    servletContext.removeAttribute(users.getUserid()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    temp.invalidate();</span><br><span class="line">                &#125;</span><br><span class="line">                servletContext.setAttribute(users.getUserid()+<span class="string">&quot;&quot;</span>,session);</span><br><span class="line">                <span class="comment">//使用重定向方式跳转首页</span></span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;main.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(UserNotFoundException e)&#123;</span><br><span class="line">           req.setAttribute(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">           req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-5-2-修改登录页面"><a href="#1-5-2-修改登录页面" class="headerlink" title="1.5.2 修改登录页面"></a>1.5.2 修改登录页面</h5><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">53</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;欢迎登录后台管理系统&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;script language=<span class="string">&quot;JavaScript&quot;</span> src=<span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/cloud.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">if</span>(window.parent.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            window.parent.location=<span class="string">&quot;login.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">            $(<span class="string">&#x27;.loginbox&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>:<span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;left&#x27;</span>:($(window).width()-<span class="number">692</span>)/<span class="number">2</span>&#125;);</span><br><span class="line">            $(window).resize(function()&#123;</span><br><span class="line">                $(<span class="string">&#x27;.loginbox&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>:<span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;left&#x27;</span>:($(window).width()-<span class="number">692</span>)/<span class="number">2</span>&#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        function <span class="title function_">change</span><span class="params">()</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#code&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;validateCode.do?&quot;</span>+Math.random());</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;background-color:#1c77ac; background-image:url(images/light.png); background-repeat:no-repeat; background-position:center top; overflow:hidden;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;mainBody&quot;</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;cloud1&quot;</span> class=<span class="string">&quot;cloud&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;cloud2&quot;</span> class=<span class="string">&quot;cloud&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;logintop&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;回首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;帮助&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;关于&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;loginbody&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">    &lt;div class=<span class="string">&quot;loginbox loginbox2&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">       &lt;form action=<span class="string">&quot;login.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">           &lt;ul&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;username&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;loginuser&quot;</span> value=<span class="string">&quot;admin&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;userpwd&quot;</span> type=<span class="string">&quot;passwor&quot;</span> class=<span class="string">&quot;loginpwd&quot;</span> value=<span class="string">&quot;密码&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">               &lt;li class=<span class="string">&quot;yzm&quot;</span>&gt;</span><br><span class="line">                   &lt;span&gt;&lt;input name=<span class="string">&quot;code&quot;</span> type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;验证码&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/span&gt;&lt;cite&gt;&lt;img id=<span class="string">&quot;code&quot;</span> src=<span class="string">&quot;validateCode.do&quot;</span> onclick=<span class="string">&quot;change()&quot;</span>&gt;&lt;/cite&gt;</span><br><span class="line">               &lt;/li&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;loginbtn&quot;</span> value=<span class="string">&quot;登录&quot;</span>  onclick=<span class="string">&quot;javascript:window.location=&#x27;main.html&#x27;&quot;</span>  /&gt;&lt;/li&gt;</span><br><span class="line">           &lt;/ul&gt;</span><br><span class="line">       &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h5 id="1-5-3-解决HttpSession超时销毁时的异常问题"><a href="#1-5-3-解决HttpSession超时销毁时的异常问题" class="headerlink" title="1.5.3 解决HttpSession超时销毁时的异常问题"></a>1.5.3 解决HttpSession超时销毁时的异常问题</h5><p>添加产生验证的servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.listener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.Constants;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSessionListener;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决HttpSession被反复销毁的问题</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpSessionLifecycleListener</span> <span class="keyword">implements</span> <span class="title class_">HttpSessionListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionCreated</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sessionDestroyed</span><span class="params">(HttpSessionEvent se)</span> &#123;</span><br><span class="line">            <span class="comment">//获取ServletContext对象，然后将所对应的HttpSession删除掉</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> se.getSession();</span><br><span class="line">        <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> session.getServletContext();</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> (Users) session.getAttribute(Constants.USER_SESSION_KEY);</span><br><span class="line">        servletContext.removeAttribute(users.getUserid()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-在登陆中添加验证码功能"><a href="#1-4-在登陆中添加验证码功能" class="headerlink" title="1.4 在登陆中添加验证码功能"></a>1.4 在登陆中添加验证码功能</h4><p>添加产生验证的Servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.commons;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Font;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"><span class="keyword">import</span> java.awt.image.BufferedImage;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.imageio.ImageIO;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/validateCode.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ValidateCodeServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">         <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 在内存中创建图象</span></span><br><span class="line">      <span class="type">int</span> <span class="variable">width</span> <span class="operator">=</span> <span class="number">70</span>, height = <span class="number">45</span>;</span><br><span class="line">      <span class="type">BufferedImage</span> <span class="variable">image</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedImage</span>(width, height,</span><br><span class="line">            BufferedImage.TYPE_INT_RGB);</span><br><span class="line">      <span class="comment">// 获取图形上下文</span></span><br><span class="line">      <span class="type">Graphics</span> <span class="variable">g</span> <span class="operator">=</span> image.getGraphics();</span><br><span class="line">      <span class="comment">// 生成随机类</span></span><br><span class="line">      <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">      <span class="comment">// 设定背景色</span></span><br><span class="line">      g.setColor(getRandColor(<span class="number">200</span>, <span class="number">250</span>));</span><br><span class="line">      g.fillRect(<span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">      <span class="comment">// 设定字体</span></span><br><span class="line">      g.setFont(<span class="keyword">new</span> <span class="title class_">Font</span>(<span class="string">&quot;Times New Roman&quot;</span>, Font.PLAIN, <span class="number">20</span>));</span><br><span class="line">      <span class="comment">// 随机产生155条干扰线，使图象中的认证码不易被其它程序探测到</span></span><br><span class="line">      g.setColor(getRandColor(<span class="number">160</span>, <span class="number">200</span>));</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">155</span>; i++) &#123;</span><br><span class="line">         <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> random.nextInt(width);</span><br><span class="line">         <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> random.nextInt(height);</span><br><span class="line">         <span class="type">int</span> <span class="variable">xl</span> <span class="operator">=</span> random.nextInt(<span class="number">12</span>);</span><br><span class="line">         <span class="type">int</span> <span class="variable">yl</span> <span class="operator">=</span> random.nextInt(<span class="number">12</span>);</span><br><span class="line">         g.drawLine(x, y, x + xl, y + yl);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 取随机产生的认证码(4位数字)</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sRand</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">         <span class="type">String</span> <span class="variable">rand</span> <span class="operator">=</span> String.valueOf(random.nextInt(<span class="number">10</span>));</span><br><span class="line">         sRand += rand;</span><br><span class="line">         <span class="comment">// 将认证码显示到图象中</span></span><br><span class="line">         g.setColor(<span class="keyword">new</span> <span class="title class_">Color</span>(<span class="number">20</span> + random.nextInt(<span class="number">110</span>), <span class="number">20</span> + random</span><br><span class="line">               .nextInt(<span class="number">110</span>), <span class="number">20</span> + random.nextInt(<span class="number">110</span>)));</span><br><span class="line">         <span class="comment">// 调用函数出来的颜色相同，可能是因为种子太接近，所以只能直接生成</span></span><br><span class="line">         g.drawString(rand, <span class="number">13</span> * i + <span class="number">6</span>, <span class="number">16</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 图象生效</span></span><br><span class="line">      g.dispose();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">         ImageIO.write(image, <span class="string">&quot;JPEG&quot;</span>, response.getOutputStream());</span><br><span class="line">      &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;验证码图片产生出现错误：&quot;</span> + e.toString());</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">//保存验证码到Session</span></span><br><span class="line">      request.getSession().setAttribute(Constants.VALIDATE_CODE_KEY, sRand);</span><br><span class="line">      </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line">         <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line"></span><br><span class="line">      <span class="built_in">this</span>.doGet(request, response);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 给定范围获得随机颜色</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> Color <span class="title function_">getRandColor</span><span class="params">(<span class="type">int</span> fc, <span class="type">int</span> bc)</span> &#123;</span><br><span class="line">      <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">      <span class="keyword">if</span> (fc &gt; <span class="number">255</span>)</span><br><span class="line">         fc = <span class="number">255</span>;</span><br><span class="line">      <span class="keyword">if</span> (bc &gt; <span class="number">255</span>)</span><br><span class="line">         bc = <span class="number">255</span>;</span><br><span class="line">      <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">      <span class="type">int</span> <span class="variable">g</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">      <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> fc + random.nextInt(bc - fc);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Color</span>(r, g, b);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改登录页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">10</span>:<span class="number">53</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;欢迎登录后台管理系统&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;script language=<span class="string">&quot;JavaScript&quot;</span> src=<span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;js/cloud.js&quot;</span> type=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script language=<span class="string">&quot;javascript&quot;</span>&gt;</span><br><span class="line">        <span class="keyword">if</span>(window.parent.length &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            window.parent.location=<span class="string">&quot;login.jsp&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">            $(<span class="string">&#x27;.loginbox&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>:<span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;left&#x27;</span>:($(window).width()-<span class="number">692</span>)/<span class="number">2</span>&#125;);</span><br><span class="line">            $(window).resize(function()&#123;</span><br><span class="line">                $(<span class="string">&#x27;.loginbox&#x27;</span>).css(&#123;<span class="string">&#x27;position&#x27;</span>:<span class="string">&#x27;absolute&#x27;</span>,<span class="string">&#x27;left&#x27;</span>:($(window).width()-<span class="number">692</span>)/<span class="number">2</span>&#125;);</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;);</span><br><span class="line">        function <span class="title function_">change</span><span class="params">()</span>&#123;</span><br><span class="line">            $(<span class="string">&quot;#code&quot;</span>).attr(<span class="string">&quot;src&quot;</span>,<span class="string">&quot;validateCode.do?&quot;</span>+Math.random());</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;background-color:#1c77ac; background-image:url(images/light.png); background-repeat:no-repeat; background-position:center top; overflow:hidden;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;mainBody&quot;</span>&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;cloud1&quot;</span> class=<span class="string">&quot;cloud&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">    &lt;div id=<span class="string">&quot;cloud2&quot;</span> class=<span class="string">&quot;cloud&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;logintop&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;回首页&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;帮助&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;关于&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;loginbody&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    $&#123;msg&#125;</span><br><span class="line">    &lt;div class=<span class="string">&quot;loginbox loginbox2&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">       &lt;form action=<span class="string">&quot;login.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">           &lt;ul&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;username&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;loginuser&quot;</span> value=<span class="string">&quot;admin&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;userpwd&quot;</span> type=<span class="string">&quot;passwor&quot;</span> class=<span class="string">&quot;loginpwd&quot;</span> value=<span class="string">&quot;密码&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">               &lt;li class=<span class="string">&quot;yzm&quot;</span>&gt;</span><br><span class="line">                   &lt;span&gt;&lt;input name=<span class="string">&quot;code&quot;</span> type=<span class="string">&quot;text&quot;</span> value=<span class="string">&quot;验证码&quot;</span> onclick=<span class="string">&quot;JavaScript:this.value=&#x27;&#x27;&quot;</span>/&gt;&lt;/span&gt;&lt;cite&gt;&lt;img id=<span class="string">&quot;code&quot;</span> src=<span class="string">&quot;validateCode.do&quot;</span> onclick=<span class="string">&quot;change()&quot;</span>&gt;&lt;/cite&gt;</span><br><span class="line">               &lt;/li&gt;</span><br><span class="line">               &lt;li&gt;&lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;loginbtn&quot;</span> value=<span class="string">&quot;登录&quot;</span>  onclick=<span class="string">&quot;javascript:window.location=&#x27;main.html&#x27;&quot;</span>  /&gt;&lt;/li&gt;</span><br><span class="line">           &lt;/ul&gt;</span><br><span class="line">       &lt;/form&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改用户登录过滤器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.Constants;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 判断当前客户端浏览器是否登录的Filter</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebFilter(urlPatterns = &#123;&quot;*.do&quot;,&quot;*.jsp&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> (HttpServletRequest)servletRequest;</span><br><span class="line">        <span class="type">String</span> <span class="variable">uri</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        <span class="comment">//判断当前请求的是否为login.jsp或者login.do，如果请求的是用户登录的资源那么需要放行。</span></span><br><span class="line">        <span class="keyword">if</span>(uri.indexOf(<span class="string">&quot;login.jsp&quot;</span>) != -<span class="number">1</span> || uri.indexOf(<span class="string">&quot;login.do&quot;</span>) != -<span class="number">1</span>|| uri.indexOf(<span class="string">&quot;validateCode.do&quot;</span>) != -<span class="number">1</span>)&#123;</span><br><span class="line">            filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">            <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> (Users) session.getAttribute(Constants.USER_SESSION_KEY);</span><br><span class="line">            <span class="keyword">if</span>(users !=  <span class="literal">null</span>)&#123;</span><br><span class="line">                filterChain.doFilter(servletRequest, servletResponse);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                request.setAttribute(Constants.REQUEST_MSG,<span class="string">&quot;不登录不好使！&quot;</span>);</span><br><span class="line">                request.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(servletRequest, servletResponse);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改处理登录请求的Servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.Constants;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.exception.UserNotFoundException;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserLoginService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserLoginServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用户登录请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/login.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserLoginServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;code&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">            <span class="type">String</span> <span class="variable">codeTemp</span> <span class="operator">=</span> (String)session.getAttribute(Constants.VALIDATE_CODE_KEY);</span><br><span class="line">            <span class="keyword">if</span>(codeTemp.equals(code))&#123;</span><br><span class="line">                <span class="type">UserLoginService</span> <span class="variable">userLoginService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserLoginServiceImpl</span>();</span><br><span class="line">                <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> userLoginService.userLogin(username, userpwd);</span><br><span class="line">                <span class="comment">//建立客户端与服务端的会话状态</span></span><br><span class="line"></span><br><span class="line">                session.setAttribute(Constants.USER_SESSION_KEY,users);</span><br><span class="line">                <span class="type">ServletContext</span> <span class="variable">servletContext</span> <span class="operator">=</span> <span class="built_in">this</span>.getServletContext();</span><br><span class="line">                <span class="type">HttpSession</span> <span class="variable">temp</span> <span class="operator">=</span> (HttpSession) servletContext.getAttribute(users.getUserid()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(temp != <span class="literal">null</span>)&#123;</span><br><span class="line">                    servletContext.removeAttribute(users.getUserid()+<span class="string">&quot;&quot;</span>);</span><br><span class="line">                    temp.invalidate();</span><br><span class="line">                &#125;</span><br><span class="line">                servletContext.setAttribute(users.getUserid()+<span class="string">&quot;&quot;</span>,session);</span><br><span class="line">                <span class="comment">//使用重定向方式跳转首页</span></span><br><span class="line">                resp.sendRedirect(<span class="string">&quot;main.jsp&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                req.setAttribute(Constants.REQUEST_MSG,<span class="string">&quot;验证码有误，请重新输入&quot;</span>);</span><br><span class="line">                req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(UserNotFoundException e)&#123;</span><br><span class="line">           req.setAttribute(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">           req.getRequestDispatcher(<span class="string">&quot;login.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-用户退出登录"><a href="#2-用户退出登录" class="headerlink" title="2 用户退出登录"></a>2 用户退出登录</h3><p>修改left.jsp页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;script language=<span class="string">&quot;JavaScript&quot;</span> src=<span class="string">&quot;js/jquery.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        $(function()&#123;</span><br><span class="line">            <span class="comment">//导航切换</span></span><br><span class="line">            $(<span class="string">&quot;.menuson .header&quot;</span>).click(function()&#123;</span><br><span class="line">                <span class="type">var</span> <span class="variable">$parent</span> <span class="operator">=</span> $(<span class="built_in">this</span>).parent();</span><br><span class="line">                $(<span class="string">&quot;.menuson&gt;li.active&quot;</span>).not($parent).removeClass(<span class="string">&quot;active open&quot;</span>).find(<span class="string">&#x27;.sub-menus&#x27;</span>).hide();</span><br><span class="line"></span><br><span class="line">                $parent.addClass(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span>(!!$(<span class="built_in">this</span>).next(<span class="string">&#x27;.sub-menus&#x27;</span>).size())&#123;</span><br><span class="line">                    <span class="keyword">if</span>($parent.hasClass(<span class="string">&quot;open&quot;</span>))&#123;</span><br><span class="line">                        $parent.removeClass(<span class="string">&quot;open&quot;</span>).find(<span class="string">&#x27;.sub-menus&#x27;</span>).hide();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        $parent.addClass(<span class="string">&quot;open&quot;</span>).find(<span class="string">&#x27;.sub-menus&#x27;</span>).show();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 三级菜单点击</span></span><br><span class="line">            $(<span class="string">&#x27;.sub-menus li&#x27;</span>).click(function(e) &#123;</span><br><span class="line">                $(<span class="string">&quot;.sub-menus li.active&quot;</span>).removeClass(<span class="string">&quot;active&quot;</span>)</span><br><span class="line">                $(<span class="built_in">this</span>).addClass(<span class="string">&quot;active&quot;</span>);</span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            $(<span class="string">&#x27;.title&#x27;</span>).click(function()&#123;</span><br><span class="line">                <span class="type">var</span> <span class="variable">$ul</span> <span class="operator">=</span> $(<span class="built_in">this</span>).next(<span class="string">&#x27;ul&#x27;</span>);</span><br><span class="line">                $(<span class="string">&#x27;dd&#x27;</span>).find(<span class="string">&#x27;.menuson&#x27;</span>).slideUp();</span><br><span class="line">                <span class="keyword">if</span>($ul.is(<span class="string">&#x27;:visible&#x27;</span>))&#123;</span><br><span class="line">                    $(<span class="built_in">this</span>).next(<span class="string">&#x27;.menuson&#x27;</span>).slideUp();</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    $(<span class="built_in">this</span>).next(<span class="string">&#x27;.menuson&#x27;</span>).slideDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body style=<span class="string">&quot;background:#f0f9fd;&quot;</span>&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;lefttop&quot;</span>&gt;&lt;span&gt;&lt;/span&gt;导航菜单&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;dl class=<span class="string">&quot;leftmenu&quot;</span>&gt;</span><br><span class="line">    &lt;dd&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;title&quot;</span>&gt;&lt;span&gt;&lt;img src=<span class="string">&quot;images/leftico03.png&quot;</span> /&gt;&lt;/span&gt;用户管理&lt;/div&gt;</span><br><span class="line">        &lt;ul class=<span class="string">&quot;menuson&quot;</span>&gt;</span><br><span class="line">            &lt;li&gt;&lt;cite&gt;&lt;/cite&gt;&lt;a href=<span class="string">&quot;usermanager/addUser.jsp&quot;</span> target=<span class="string">&quot;rightFrame&quot;</span>&gt;添加用户&lt;/a&gt;&lt;i&gt;&lt;/i&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;cite&gt;&lt;/cite&gt;&lt;a href=<span class="string">&quot;usermanager/findUser.jsp&quot;</span> target=<span class="string">&quot;rightFrame&quot;</span>&gt;查询用户&lt;/a&gt;&lt;i&gt;&lt;/i&gt;&lt;/li&gt;</span><br><span class="line">            &lt;li&gt;&lt;cite&gt;&lt;/cite&gt;&lt;a href=<span class="string">&quot;logout.do&quot;</span> target=<span class="string">&quot;rightFrame&quot;</span>&gt;退出登录&lt;/a&gt;&lt;i&gt;&lt;/i&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">    &lt;/dd&gt;</span><br><span class="line">&lt;/dl&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>创建Servlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户退出登录</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/logout.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogoutServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> req.getSession();</span><br><span class="line">        session.invalidate();</span><br><span class="line">        resp.sendRedirect(<span class="string">&quot;login.jsp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-添加用户业务"><a href="#3-添加用户业务" class="headerlink" title="3 添加用户业务"></a>3 添加用户业务</h3><h4 id="3-1-创建添加用户持久层"><a href="#3-1-创建添加用户持久层" class="headerlink" title="3.1 创建添加用户持久层"></a>3.1 创建添加用户持久层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭conn的事务自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;insert into users values(default,?,?,?,?,?)&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,users.getUsername());</span><br><span class="line">            ps.setString(<span class="number">2</span>,users.getUserpwd());</span><br><span class="line">            ps.setString(<span class="number">3</span>,users.getUsersex());</span><br><span class="line">            ps.setString(<span class="number">4</span>,users.getPhonenumber());</span><br><span class="line">            ps.setString(<span class="number">5</span>,users.getQqnumber());</span><br><span class="line">            ps.execute();</span><br><span class="line">            <span class="comment">//事务提交</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            JdbcUtils.rollbackConnection(conn);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br></pre></td></tr></table></figure><h3 id="3-2-创建添加用户业务层"><a href="#3-2-创建添加用户业务层" class="headerlink" title="3.2 创建添加用户业务层"></a>3.2 创建添加用户业务层</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span>;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.impl.UserManagerDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        userManagerDao.insertUser(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-创建添加用户的Servlet"><a href="#3-3-创建添加用户的Servlet" class="headerlink" title="3.3 创建添加用户的Servlet"></a>3.3 创建添加用户的Servlet</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用管理请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/userManager.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;addUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.findUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;preUpdate&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.preUpdate(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;modifyUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.modifyUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.dropUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.addUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户提交数据</span></span><br><span class="line">    <span class="keyword">private</span> Users <span class="title function_">createUsers</span><span class="params">(HttpServletRequest req)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phonenumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;phonenumber&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">qqnumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;qqnumber&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setQqnumber(qqnumber);</span><br><span class="line">        users.setPhonenumber(phonenumber);</span><br><span class="line">        users.setUsername(username);</span><br><span class="line">        users.setUserpwd(userpwd);</span><br><span class="line">        users.setUsersex(usersex);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理查询用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">Users</span>  <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            List&lt;Users&gt; list = userManagerService.findUser(user);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/viewUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preUpdate</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> userManagerService.findUserByUserId(Integer.parseInt(userid));</span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/updateUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理更新用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        users.setUserid(Integer.parseInt(userid));</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.modifyUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理删除用户的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">dropUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.dropUser(Integer.parseInt(userid));</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-创建添加用户页面"><a href="#3-4-创建添加用户页面" class="headerlink" title="3.4 创建添加用户页面"></a>3.4 创建添加用户页面</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">50</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;../css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;../css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;../css/select.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;place&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;位置：&lt;/span&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;placeul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;添加用户&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;formbody&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;formtitle&quot;</span>&gt;&lt;span&gt;基本信息&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;%--    http:<span class="comment">//localhost:8888/webdemo/usermanger/addUser.jsp--%&gt;</span></span><br><span class="line">&lt;%--    http:<span class="comment">//locathost:8888/webdemo/userManager.do--%&gt;</span></span><br><span class="line">    &lt;form action=<span class="string">&quot;../userManager.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span>  name=<span class="string">&quot;flag&quot;</span> value=<span class="string">&quot;addUser&quot;</span>/&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;forminfo&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;用户名&lt;/label&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;username&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> /&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;用户密码&lt;/label&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;userpwd&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> /&gt;&lt;i&gt;&lt;/i&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;性别&lt;/label&gt;&lt;cite&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;1&quot;</span> checked=<span class="string">&quot;checked&quot;</span> /&gt;男&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;0&quot;</span> /&gt;女</span><br><span class="line"></span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;联系方式&lt;/label&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;phonenumber&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> /&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;QQ号&lt;/label&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;qqnumber&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> /&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;&amp;nbsp;&lt;/label&gt;</span><br><span class="line">            &lt;input  type=<span class="string">&quot;submit&quot;</span>  class=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;确认保存&quot;</span> /&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>创建成功页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">16</span>:<span class="number">54</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">        function <span class="title function_">submitForm</span><span class="params">()</span>&#123;</span><br><span class="line">            window.close();</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div class=<span class="string">&quot;place&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;位置：&lt;/span&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;placeul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;操作提示&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">操作成功!</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="4-查询用户业务"><a href="#4-查询用户业务" class="headerlink" title="4 查询用户业务"></a>4 查询用户业务</h3><h4 id="4-1-创建查询用户持久层"><a href="#4-1-创建查询用户持久层" class="headerlink" title="4.1 创建查询用户持久层"></a>4.1 创建查询用户持久层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    List&lt;Users&gt; <span class="title function_">selectUsersByProperty</span><span class="params">(Users users)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭conn的事务自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;insert into users values(default,?,?,?,?,?)&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,users.getUsername());</span><br><span class="line">            ps.setString(<span class="number">2</span>,users.getUserpwd());</span><br><span class="line">            ps.setString(<span class="number">3</span>,users.getUsersex());</span><br><span class="line">            ps.setString(<span class="number">4</span>,users.getPhonenumber());</span><br><span class="line">            ps.setString(<span class="number">5</span>,users.getQqnumber());</span><br><span class="line">            ps.execute();</span><br><span class="line">            <span class="comment">//事务提交</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            JdbcUtils.rollbackConnection(conn);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">selectUsersByProperty</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="built_in">this</span>.createSQL(users);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setUserid(resultSet.getInt(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">                user.setPhonenumber(resultSet.getString(<span class="string">&quot;phonenumber&quot;</span>));</span><br><span class="line">                user.setQqnumber(resultSet.getString(<span class="string">&quot;qqnumber&quot;</span>));</span><br><span class="line">                user.setUserpwd(resultSet.getString(<span class="string">&quot;userpwd&quot;</span>));</span><br><span class="line">                user.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setUsersex(resultSet.getString(<span class="string">&quot;usersex&quot;</span>));</span><br><span class="line">                list.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">//拼接查询的SQL语句</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">createSQL</span><span class="params">(Users users)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;select * from users where 1=1 &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(users.getUsersex() != <span class="literal">null</span> &amp;&amp; users.getUsersex().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and usersex = &quot;</span>+users.getUsersex());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getQqnumber() != <span class="literal">null</span> &amp;&amp; users.getQqnumber().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and qqnumber = &quot;</span>+users.getQqnumber());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getUsername() != <span class="literal">null</span> &amp;&amp; users.getUsername().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and username = &quot;</span>+users.getUsername());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getPhonenumber() != <span class="literal">null</span> &amp;&amp;users.getPhonenumber().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and phonenumber = &quot;</span>+users.getPhonenumber());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-创建查询用户业务层"><a href="#4-2-创建查询用户业务层" class="headerlink" title="4.2 创建查询用户业务层"></a>4.2 创建查询用户业务层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    List&lt;Users&gt; <span class="title function_">findUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.impl.UserManagerDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        userManagerDao.insertUser(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">findUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        <span class="keyword">return</span> userManagerDao.selectUsersByProperty(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-创建查询用户的Servlet"><a href="#4-3-创建查询用户的Servlet" class="headerlink" title="4.3 创建查询用户的Servlet"></a>4.3 创建查询用户的Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用管理请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/userManager.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;addUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.findUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;preUpdate&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.preUpdate(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;modifyUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.modifyUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.dropUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.addUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户提交数据</span></span><br><span class="line">    <span class="keyword">private</span> Users <span class="title function_">createUsers</span><span class="params">(HttpServletRequest req)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phonenumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;phonenumber&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">qqnumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;qqnumber&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setQqnumber(qqnumber);</span><br><span class="line">        users.setPhonenumber(phonenumber);</span><br><span class="line">        users.setUsername(username);</span><br><span class="line">        users.setUserpwd(userpwd);</span><br><span class="line">        users.setUsersex(usersex);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理查询用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">Users</span>  <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            List&lt;Users&gt; list = userManagerService.findUser(user);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/viewUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preUpdate</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> userManagerService.findUserByUserId(Integer.parseInt(userid));</span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/updateUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理更新用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        users.setUserid(Integer.parseInt(userid));</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.modifyUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理删除用户的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">dropUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.dropUser(Integer.parseInt(userid));</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-创建查询用户与显示结果的页面"><a href="#4-4-创建查询用户与显示结果的页面" class="headerlink" title="4.4 创建查询用户与显示结果的页面"></a>4.4 创建查询用户与显示结果的页面</h4><p>创建findUser.jsp页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">00</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;../css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;../css/select.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;place&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;位置：&lt;/span&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;placeul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;查询用户&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;rightinfo&quot;</span>&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;../userManager.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;flag&quot;</span> value=<span class="string">&quot;findUser&quot;</span>/&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;prosearch&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;查询：&lt;/label&gt;</span><br><span class="line">            &lt;i&gt;用户名&lt;/i&gt;</span><br><span class="line">            &lt;a&gt;</span><br><span class="line">                &lt;input name=<span class="string">&quot;username&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;scinput&quot;</span> /&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;性别：&lt;/label&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;1&quot;</span> checked=<span class="string">&quot;checked&quot;</span> /&gt;&amp;nbsp;男&amp;nbsp;&amp;nbsp;</span><br><span class="line">            &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;0&quot;</span> /&gt;&amp;nbsp;女</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;手机号：&lt;/label&gt;</span><br><span class="line">            &lt;a&gt;</span><br><span class="line">                &lt;input name=<span class="string">&quot;phonenumber&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;scinput&quot;</span> /&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;QQ号：&lt;/label&gt;</span><br><span class="line">            &lt;a&gt;</span><br><span class="line">                &lt;input name=<span class="string">&quot;qqnumber&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;scinput&quot;</span> /&gt;</span><br><span class="line">            &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;a&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;sure&quot;</span> value=<span class="string">&quot;查询&quot;</span>/&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>创建viewUser.jsp页面</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">04</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;place&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;位置：&lt;/span&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;placeul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;查询用户&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;查询结果&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;rightinfo&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;formtitle1&quot;</span>&gt;&lt;span&gt;用户列表&lt;/span&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table class=<span class="string">&quot;tablelist&quot;</span> &gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户性别&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;手机号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;QQ号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> varStatus=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.username&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;c:choose&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;user.usersex == 1&#125;&quot;</span>&gt;</span><br><span class="line">                        男</span><br><span class="line">                    &lt;/c:when&gt;</span><br><span class="line">                    &lt;c:otherwise&gt;</span><br><span class="line">                        女</span><br><span class="line">                    &lt;/c:otherwise&gt;</span><br><span class="line">                &lt;/c:choose&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.phonenumber&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.qqnumber&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;userManager.do?flag=preUpdate&amp;userid=$&#123;user.userid&#125;&quot;</span> class=<span class="string">&quot;tablelink&quot;</span>&gt;修改&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  &lt;a href=<span class="string">&quot;userManager.do?userid=$&#123;user.userid&#125;&quot;</span> class=<span class="string">&quot;tablelink click&quot;</span>&gt; 删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;tip&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tiptop&quot;</span>&gt;&lt;span&gt;提示信息&lt;/span&gt;&lt;a&gt;&lt;/a&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;tipinfo&quot;</span>&gt;</span><br><span class="line">            &lt;span&gt;&lt;img src=<span class="string">&quot;images/ticon.png&quot;</span> /&gt;&lt;/span&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;tipright&quot;</span>&gt;</span><br><span class="line">                &lt;p&gt;是否确认对信息的修改 ？&lt;/p&gt;</span><br><span class="line">                &lt;cite&gt;如果是请点击确定按钮 ，否则请点取消。&lt;/cite&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;tipbtn&quot;</span>&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;button&quot;</span>  class=<span class="string">&quot;sure&quot;</span> value=<span class="string">&quot;确定&quot;</span> /&gt;&amp;nbsp;</span><br><span class="line">            &lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;button&quot;</span>  class=<span class="string">&quot;cancel&quot;</span> value=<span class="string">&quot;取消&quot;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="5-更新用户业务"><a href="#5-更新用户业务" class="headerlink" title="5 更新用户业务"></a>5 更新用户业务</h3><h4 id="5-1-预更新用户的查询"><a href="#5-1-预更新用户的查询" class="headerlink" title="5.1 预更新用户的查询"></a>5.1 预更新用户的查询</h4><h5 id="5-1-1-创建预更新用户查询持久层"><a href="#5-1-1-创建预更新用户查询持久层" class="headerlink" title="5.1.1 创建预更新用户查询持久层"></a>5.1.1 创建预更新用户查询持久层</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    List&lt;Users&gt; <span class="title function_">selectUsersByProperty</span><span class="params">(Users users)</span>;</span><br><span class="line">    Users <span class="title function_">selectUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭conn的事务自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;insert into users values(default,?,?,?,?,?)&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,users.getUsername());</span><br><span class="line">            ps.setString(<span class="number">2</span>,users.getUserpwd());</span><br><span class="line">            ps.setString(<span class="number">3</span>,users.getUsersex());</span><br><span class="line">            ps.setString(<span class="number">4</span>,users.getPhonenumber());</span><br><span class="line">            ps.setString(<span class="number">5</span>,users.getQqnumber());</span><br><span class="line">            ps.execute();</span><br><span class="line">            <span class="comment">//事务提交</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            JdbcUtils.rollbackConnection(conn);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">selectUsersByProperty</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="built_in">this</span>.createSQL(users);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setUserid(resultSet.getInt(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">                user.setPhonenumber(resultSet.getString(<span class="string">&quot;phonenumber&quot;</span>));</span><br><span class="line">                user.setQqnumber(resultSet.getString(<span class="string">&quot;qqnumber&quot;</span>));</span><br><span class="line">                user.setUserpwd(resultSet.getString(<span class="string">&quot;userpwd&quot;</span>));</span><br><span class="line">                user.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setUsersex(resultSet.getString(<span class="string">&quot;usersex&quot;</span>));</span><br><span class="line">                list.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">selectUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;select * from users where userid = ?&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>,userid);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setUserid(resultSet.getInt(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">                user.setPhonenumber(resultSet.getString(<span class="string">&quot;phonenumber&quot;</span>));</span><br><span class="line">                user.setQqnumber(resultSet.getString(<span class="string">&quot;qqnumber&quot;</span>));</span><br><span class="line">                user.setUserpwd(resultSet.getString(<span class="string">&quot;userpwd&quot;</span>));</span><br><span class="line">                user.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setUsersex(resultSet.getString(<span class="string">&quot;usersex&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="comment">//拼接查询的SQL语句</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">createSQL</span><span class="params">(Users users)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;select * from users where 1=1 &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(users.getUsersex() != <span class="literal">null</span> &amp;&amp; users.getUsersex().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and usersex = &quot;</span>+users.getUsersex());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getQqnumber() != <span class="literal">null</span> &amp;&amp; users.getQqnumber().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and qqnumber = &quot;</span>+users.getQqnumber());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getUsername() != <span class="literal">null</span> &amp;&amp; users.getUsername().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and username = &quot;</span>+users.getUsername());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getPhonenumber() != <span class="literal">null</span> &amp;&amp;users.getPhonenumber().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and phonenumber = &quot;</span>+users.getPhonenumber());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-2-创建预更新用户业务层"><a href="#5-1-2-创建预更新用户业务层" class="headerlink" title="5.1.2 创建预更新用户业务层"></a>5.1.2 创建预更新用户业务层</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    List&lt;Users&gt; <span class="title function_">findUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    Users <span class="title function_">findUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.impl.UserManagerDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        userManagerDao.insertUser(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">findUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        <span class="keyword">return</span> userManagerDao.selectUsersByProperty(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新用户的查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">findUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        <span class="keyword">return</span> userManagerDao.selectUserByUserId(userid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h5 id="5-1-3-创建预更新用户的Servlet"><a href="#5-1-3-创建预更新用户的Servlet" class="headerlink" title="5.1.3 创建预更新用户的Servlet"></a>5.1.3 创建预更新用户的Servlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用管理请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/userManager.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;addUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.findUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;preUpdate&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.preUpdate(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;modifyUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.modifyUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.dropUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.addUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户提交数据</span></span><br><span class="line">    <span class="keyword">private</span> Users <span class="title function_">createUsers</span><span class="params">(HttpServletRequest req)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phonenumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;phonenumber&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">qqnumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;qqnumber&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setQqnumber(qqnumber);</span><br><span class="line">        users.setPhonenumber(phonenumber);</span><br><span class="line">        users.setUsername(username);</span><br><span class="line">        users.setUserpwd(userpwd);</span><br><span class="line">        users.setUsersex(usersex);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理查询用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">Users</span>  <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            List&lt;Users&gt; list = userManagerService.findUser(user);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/viewUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preUpdate</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> userManagerService.findUserByUserId(Integer.parseInt(userid));</span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/updateUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理更新用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        users.setUserid(Integer.parseInt(userid));</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.modifyUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理删除用户的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">dropUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.dropUser(Integer.parseInt(userid));</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-1-4-创建更新用户页面"><a href="#5-1-4-创建更新用户页面" class="headerlink" title="5.1.4 创建更新用户页面"></a>5.1.4 创建更新用户页面</h5><p>修改viewUser.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">04</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;place&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;位置：&lt;/span&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;placeul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;查询用户&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;查询结果&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;rightinfo&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;formtitle1&quot;</span>&gt;&lt;span&gt;用户列表&lt;/span&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table class=<span class="string">&quot;tablelist&quot;</span> &gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户性别&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;手机号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;QQ号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> varStatus=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.username&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;c:choose&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;user.usersex == 1&#125;&quot;</span>&gt;</span><br><span class="line">                        男</span><br><span class="line">                    &lt;/c:when&gt;</span><br><span class="line">                    &lt;c:otherwise&gt;</span><br><span class="line">                        女</span><br><span class="line">                    &lt;/c:otherwise&gt;</span><br><span class="line">                &lt;/c:choose&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.phonenumber&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.qqnumber&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;userManager.do?flag=preUpdate&amp;userid=$&#123;user.userid&#125;&quot;</span> class=<span class="string">&quot;tablelink&quot;</span>&gt;修改&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  &lt;a href=<span class="string">&quot;userManager.do?userid=$&#123;user.userid&#125;&quot;</span> class=<span class="string">&quot;tablelink click&quot;</span>&gt; 删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;tip&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tiptop&quot;</span>&gt;&lt;span&gt;提示信息&lt;/span&gt;&lt;a&gt;&lt;/a&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;tipinfo&quot;</span>&gt;</span><br><span class="line">            &lt;span&gt;&lt;img src=<span class="string">&quot;images/ticon.png&quot;</span> /&gt;&lt;/span&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;tipright&quot;</span>&gt;</span><br><span class="line">                &lt;p&gt;是否确认对信息的修改 ？&lt;/p&gt;</span><br><span class="line">                &lt;cite&gt;如果是请点击确定按钮 ，否则请点取消。&lt;/cite&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;tipbtn&quot;</span>&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;button&quot;</span>  class=<span class="string">&quot;sure&quot;</span> value=<span class="string">&quot;确定&quot;</span> /&gt;&amp;nbsp;</span><br><span class="line">            &lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;button&quot;</span>  class=<span class="string">&quot;cancel&quot;</span> value=<span class="string">&quot;取消&quot;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>创建updateUser.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">00</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;place&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;位置：&lt;/span&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;placeul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;修改用户&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;formbody&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;formtitle&quot;</span>&gt;&lt;span&gt;基本信息&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;userManager.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;flag&quot;</span> value=<span class="string">&quot;modifyUser&quot;</span>/&gt;</span><br><span class="line">&lt;%--        获取userid --%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;userid&quot;</span> value=<span class="string">&quot;$&#123;user.userid&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;forminfo&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;label&gt;用户名&lt;/label&gt;&lt;input name=<span class="string">&quot;username&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> value=<span class="string">&quot;$&#123;user.username&#125;&quot;</span>/&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;性别&lt;/label&gt;&lt;cite&gt;</span><br><span class="line">            &lt;c:choose&gt;</span><br><span class="line">                &lt;c:when test=<span class="string">&quot;$&#123;user.usersex == 1&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;1&quot;</span> checked=<span class="string">&quot;checked&quot;</span> /&gt;男&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;0&quot;</span> /&gt;女</span><br><span class="line">                &lt;/c:when&gt;</span><br><span class="line">                &lt;c:otherwise&gt;</span><br><span class="line">                &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;1&quot;</span> /&gt;男&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;0&quot;</span> checked=<span class="string">&quot;checked&quot;</span> /&gt;女</span><br><span class="line">                &lt;/c:otherwise&gt;</span><br><span class="line">           &lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;label&gt;手机号&lt;/label&gt;&lt;input name=<span class="string">&quot;phonenumber&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> value=<span class="string">&quot;$&#123;user.phonenumber&#125;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;label&gt;QQ号&lt;/label&gt;&lt;input name=<span class="string">&quot;qqnumber&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> value=<span class="string">&quot;$&#123;user.qqnumber&#125;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;label&gt;&amp;nbsp;&lt;/label&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;确认保存&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="5-2-更新用户操作"><a href="#5-2-更新用户操作" class="headerlink" title="5.2 更新用户操作"></a>5.2 更新用户操作</h4><h5 id="5-2-1-创建更新用户持久层"><a href="#5-2-1-创建更新用户持久层" class="headerlink" title="5.2.1 创建更新用户持久层"></a>5.2.1 创建更新用户持久层</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    List&lt;Users&gt; <span class="title function_">selectUsersByProperty</span><span class="params">(Users users)</span>;</span><br><span class="line">    Users <span class="title function_">selectUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUserByUserId</span><span class="params">(Users users)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭conn的事务自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;insert into users values(default,?,?,?,?,?)&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,users.getUsername());</span><br><span class="line">            ps.setString(<span class="number">2</span>,users.getUserpwd());</span><br><span class="line">            ps.setString(<span class="number">3</span>,users.getUsersex());</span><br><span class="line">            ps.setString(<span class="number">4</span>,users.getPhonenumber());</span><br><span class="line">            ps.setString(<span class="number">5</span>,users.getQqnumber());</span><br><span class="line">            ps.execute();</span><br><span class="line">            <span class="comment">//事务提交</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            JdbcUtils.rollbackConnection(conn);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">selectUsersByProperty</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="built_in">this</span>.createSQL(users);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setUserid(resultSet.getInt(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">                user.setPhonenumber(resultSet.getString(<span class="string">&quot;phonenumber&quot;</span>));</span><br><span class="line">                user.setQqnumber(resultSet.getString(<span class="string">&quot;qqnumber&quot;</span>));</span><br><span class="line">                user.setUserpwd(resultSet.getString(<span class="string">&quot;userpwd&quot;</span>));</span><br><span class="line">                user.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setUsersex(resultSet.getString(<span class="string">&quot;usersex&quot;</span>));</span><br><span class="line">                list.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">selectUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;select * from users where userid = ?&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>,userid);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setUserid(resultSet.getInt(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">                user.setPhonenumber(resultSet.getString(<span class="string">&quot;phonenumber&quot;</span>));</span><br><span class="line">                user.setQqnumber(resultSet.getString(<span class="string">&quot;qqnumber&quot;</span>));</span><br><span class="line">                user.setUserpwd(resultSet.getString(<span class="string">&quot;userpwd&quot;</span>));</span><br><span class="line">                user.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setUsersex(resultSet.getString(<span class="string">&quot;usersex&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserByUserId</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭事务的自动提交（update还是一个DML操作）</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;update users set username=? ,usersex = ?,phonenumber=?,qqnumber = ? where userid = ? &quot;</span>);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,users.getUsername());</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>,users.getUsersex());</span><br><span class="line">            preparedStatement.setString(<span class="number">3</span>,users.getPhonenumber());</span><br><span class="line">            preparedStatement.setString(<span class="number">4</span>,users.getQqnumber());</span><br><span class="line">            preparedStatement.setInt(<span class="number">5</span>,users.getUserid());</span><br><span class="line">            preparedStatement.execute();</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            JdbcUtils.rollbackConnection(conn);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//拼接查询的SQL语句</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">createSQL</span><span class="params">(Users users)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;select * from users where 1=1 &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(users.getUsersex() != <span class="literal">null</span> &amp;&amp; users.getUsersex().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and usersex = &quot;</span>+users.getUsersex());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getQqnumber() != <span class="literal">null</span> &amp;&amp; users.getQqnumber().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and qqnumber = &quot;</span>+users.getQqnumber());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getUsername() != <span class="literal">null</span> &amp;&amp; users.getUsername().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and username = &quot;</span>+users.getUsername());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getPhonenumber() != <span class="literal">null</span> &amp;&amp;users.getPhonenumber().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and phonenumber = &quot;</span>+users.getPhonenumber());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-2-创建更新用户业务层"><a href="#5-2-2-创建更新用户业务层" class="headerlink" title="5.2.2 创建更新用户业务层"></a>5.2.2 创建更新用户业务层</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    List&lt;Users&gt; <span class="title function_">findUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    Users <span class="title function_">findUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(Users users)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.impl.UserManagerDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        userManagerDao.insertUser(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">findUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        <span class="keyword">return</span> userManagerDao.selectUsersByProperty(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新用户的查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">findUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        <span class="keyword">return</span> userManagerDao.selectUserByUserId(userid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        userManagerDao.updateUserByUserId(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-3-创建更新用户Servlet"><a href="#5-2-3-创建更新用户Servlet" class="headerlink" title="5.2.3 创建更新用户Servlet"></a>5.2.3 创建更新用户Servlet</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用管理请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/userManager.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;addUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.findUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;preUpdate&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.preUpdate(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;modifyUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.modifyUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.dropUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.addUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户提交数据</span></span><br><span class="line">    <span class="keyword">private</span> Users <span class="title function_">createUsers</span><span class="params">(HttpServletRequest req)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phonenumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;phonenumber&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">qqnumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;qqnumber&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setQqnumber(qqnumber);</span><br><span class="line">        users.setPhonenumber(phonenumber);</span><br><span class="line">        users.setUsername(username);</span><br><span class="line">        users.setUserpwd(userpwd);</span><br><span class="line">        users.setUsersex(usersex);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理查询用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">Users</span>  <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            List&lt;Users&gt; list = userManagerService.findUser(user);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/viewUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preUpdate</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> userManagerService.findUserByUserId(Integer.parseInt(userid));</span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/updateUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理更新用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        users.setUserid(Integer.parseInt(userid));</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.modifyUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="5-2-4-修改更新用户页面"><a href="#5-2-4-修改更新用户页面" class="headerlink" title="5.2.4 修改更新用户页面"></a>5.2.4 修改更新用户页面</h5><p>修改updateUser.jsp</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">20</span>:<span class="number">00</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;place&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;位置：&lt;/span&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;placeul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;修改用户&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;formbody&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;formtitle&quot;</span>&gt;&lt;span&gt;基本信息&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;userManager.do&quot;</span> method=<span class="string">&quot;post&quot;</span>&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;flag&quot;</span> value=<span class="string">&quot;modifyUser&quot;</span>/&gt;</span><br><span class="line">&lt;%--        获取userid --%&gt;</span><br><span class="line">        &lt;input type=<span class="string">&quot;hidden&quot;</span> name=<span class="string">&quot;userid&quot;</span> value=<span class="string">&quot;$&#123;user.userid&#125;&quot;</span>/&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;forminfo&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;label&gt;用户名&lt;/label&gt;&lt;input name=<span class="string">&quot;username&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> value=<span class="string">&quot;$&#123;user.username&#125;&quot;</span>/&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">            &lt;label&gt;性别&lt;/label&gt;&lt;cite&gt;</span><br><span class="line">            &lt;c:choose&gt;</span><br><span class="line">                &lt;c:when test=<span class="string">&quot;$&#123;user.usersex == 1&#125;&quot;</span>&gt;</span><br><span class="line">                &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;1&quot;</span> checked=<span class="string">&quot;checked&quot;</span> /&gt;男&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;0&quot;</span> /&gt;女</span><br><span class="line">                &lt;/c:when&gt;</span><br><span class="line">                &lt;c:otherwise&gt;</span><br><span class="line">                &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;1&quot;</span> /&gt;男&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</span><br><span class="line">                &lt;input name=<span class="string">&quot;usersex&quot;</span> type=<span class="string">&quot;radio&quot;</span> value=<span class="string">&quot;0&quot;</span> checked=<span class="string">&quot;checked&quot;</span> /&gt;女</span><br><span class="line">                &lt;/c:otherwise&gt;</span><br><span class="line">           &lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;label&gt;手机号&lt;/label&gt;&lt;input name=<span class="string">&quot;phonenumber&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> value=<span class="string">&quot;$&#123;user.phonenumber&#125;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;label&gt;QQ号&lt;/label&gt;&lt;input name=<span class="string">&quot;qqnumber&quot;</span> type=<span class="string">&quot;text&quot;</span> class=<span class="string">&quot;dfinput&quot;</span> value=<span class="string">&quot;$&#123;user.qqnumber&#125;&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;label&gt;&amp;nbsp;&lt;/label&gt;&lt;input type=<span class="string">&quot;submit&quot;</span> class=<span class="string">&quot;btn&quot;</span> value=<span class="string">&quot;确认保存&quot;</span>/&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>修改更新用户的servlet中的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用管理请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/userManager.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;addUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.findUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;preUpdate&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.preUpdate(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;modifyUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.modifyUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.dropUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.addUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户提交数据</span></span><br><span class="line">    <span class="keyword">private</span> Users <span class="title function_">createUsers</span><span class="params">(HttpServletRequest req)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phonenumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;phonenumber&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">qqnumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;qqnumber&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setQqnumber(qqnumber);</span><br><span class="line">        users.setPhonenumber(phonenumber);</span><br><span class="line">        users.setUsername(username);</span><br><span class="line">        users.setUserpwd(userpwd);</span><br><span class="line">        users.setUsersex(usersex);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理查询用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">Users</span>  <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            List&lt;Users&gt; list = userManagerService.findUser(user);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/viewUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preUpdate</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> userManagerService.findUserByUserId(Integer.parseInt(userid));</span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/updateUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理更新用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        users.setUserid(Integer.parseInt(userid));</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.modifyUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-删除用户业务"><a href="#6-删除用户业务" class="headerlink" title="6 删除用户业务"></a>6 删除用户业务</h3><h4 id="6-1-创建删除用户持久层"><a href="#6-1-创建删除用户持久层" class="headerlink" title="6.1 创建删除用户持久层"></a>6.1 创建删除用户持久层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    List&lt;Users&gt; <span class="title function_">selectUsersByProperty</span><span class="params">(Users users)</span>;</span><br><span class="line">    Users <span class="title function_">selectUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateUserByUserId</span><span class="params">(Users users)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">deleteUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.dao.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.commons.JdbcUtils;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理持久层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭conn的事务自动提交</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;insert into users values(default,?,?,?,?,?)&quot;</span>);</span><br><span class="line">            ps.setString(<span class="number">1</span>,users.getUsername());</span><br><span class="line">            ps.setString(<span class="number">2</span>,users.getUserpwd());</span><br><span class="line">            ps.setString(<span class="number">3</span>,users.getUsersex());</span><br><span class="line">            ps.setString(<span class="number">4</span>,users.getPhonenumber());</span><br><span class="line">            ps.setString(<span class="number">5</span>,users.getQqnumber());</span><br><span class="line">            ps.execute();</span><br><span class="line">            <span class="comment">//事务提交</span></span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            JdbcUtils.rollbackConnection(conn);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">selectUsersByProperty</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        List&lt;Users&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="built_in">this</span>.createSQL(users);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(sql);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setUserid(resultSet.getInt(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">                user.setPhonenumber(resultSet.getString(<span class="string">&quot;phonenumber&quot;</span>));</span><br><span class="line">                user.setQqnumber(resultSet.getString(<span class="string">&quot;qqnumber&quot;</span>));</span><br><span class="line">                user.setUserpwd(resultSet.getString(<span class="string">&quot;userpwd&quot;</span>));</span><br><span class="line">                user.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setUsersex(resultSet.getString(<span class="string">&quot;usersex&quot;</span>));</span><br><span class="line">                list.add(user);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">selectUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;select * from users where userid = ?&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">1</span>,userid);</span><br><span class="line">            <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">            <span class="keyword">while</span>(resultSet.next())&#123;</span><br><span class="line">                user = <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">                user.setUserid(resultSet.getInt(<span class="string">&quot;userid&quot;</span>));</span><br><span class="line">                user.setPhonenumber(resultSet.getString(<span class="string">&quot;phonenumber&quot;</span>));</span><br><span class="line">                user.setQqnumber(resultSet.getString(<span class="string">&quot;qqnumber&quot;</span>));</span><br><span class="line">                user.setUserpwd(resultSet.getString(<span class="string">&quot;userpwd&quot;</span>));</span><br><span class="line">                user.setUsername(resultSet.getString(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">                user.setUsersex(resultSet.getString(<span class="string">&quot;usersex&quot;</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateUserByUserId</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            <span class="comment">//关闭事务的自动提交（update还是一个DML操作）</span></span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;update users set username=? ,usersex = ?,phonenumber=?,qqnumber = ? where userid = ? &quot;</span>);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,users.getUsername());</span><br><span class="line">            preparedStatement.setString(<span class="number">2</span>,users.getUsersex());</span><br><span class="line">            preparedStatement.setString(<span class="number">3</span>,users.getPhonenumber());</span><br><span class="line">            preparedStatement.setString(<span class="number">4</span>,users.getQqnumber());</span><br><span class="line">            preparedStatement.setInt(<span class="number">5</span>,users.getUserid());</span><br><span class="line">            preparedStatement.execute();</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            JdbcUtils.rollbackConnection(conn);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据用户ID删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            conn = JdbcUtils.getConnection();</span><br><span class="line">            conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(<span class="string">&quot;delete from users where userid = ?&quot;</span>);</span><br><span class="line">            ps.setInt(<span class="number">1</span>,userid);</span><br><span class="line">            ps.execute();</span><br><span class="line">            conn.commit();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            JdbcUtils.rollbackConnection(conn);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JdbcUtils.closeConnection(conn);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拼接查询的SQL语句</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">createSQL</span><span class="params">(Users users)</span>&#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">stringBuffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;select * from users where 1=1 &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(users.getUsersex() != <span class="literal">null</span> &amp;&amp; users.getUsersex().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and usersex = &quot;</span>+users.getUsersex());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getQqnumber() != <span class="literal">null</span> &amp;&amp; users.getQqnumber().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and qqnumber = &quot;</span>+users.getQqnumber());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getUsername() != <span class="literal">null</span> &amp;&amp; users.getUsername().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and username = &quot;</span>+users.getUsername());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(users.getPhonenumber() != <span class="literal">null</span> &amp;&amp;users.getPhonenumber().length() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            stringBuffer.append(<span class="string">&quot; and phonenumber = &quot;</span>+users.getPhonenumber());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringBuffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-创建删除用户业务层"><a href="#6-2-创建删除用户业务层" class="headerlink" title="6.2 创建删除用户业务层"></a>6.2 创建删除用户业务层</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    List&lt;Users&gt; <span class="title function_">findUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    Users <span class="title function_">findUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(Users users)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">dropUser</span><span class="params">(<span class="type">int</span> userid)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.UserManagerDao;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.dao.impl.UserManagerDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户管理业务层</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserManagerService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        userManagerDao.insertUser(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Users&gt; <span class="title function_">findUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        <span class="keyword">return</span> userManagerDao.selectUsersByProperty(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新用户的查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Users <span class="title function_">findUserByUserId</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        <span class="keyword">return</span> userManagerDao.selectUserByUserId(userid);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> users</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(Users users)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        userManagerDao.updateUserByUserId(users);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除用户</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userid</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dropUser</span><span class="params">(<span class="type">int</span> userid)</span> &#123;</span><br><span class="line">        <span class="type">UserManagerDao</span> <span class="variable">userManagerDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerDaoImpl</span>();</span><br><span class="line">        userManagerDao.deleteUserByUserId(userid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-3-创建删除用户Servlet"><a href="#6-3-创建删除用户Servlet" class="headerlink" title="6.3 创建删除用户Servlet"></a>6.3 创建删除用户Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bjsxt.web.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.bjsxt.pojo.Users;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.UserManagerService;</span><br><span class="line"><span class="keyword">import</span> com.bjsxt.service.impl.UserManagerServiceImpl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理用管理请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/userManager.do&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserManagerServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">flag</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;flag&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;addUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.addUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;findUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.findUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;preUpdate&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.preUpdate(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;modifyUser&quot;</span>.equals(flag))&#123;</span><br><span class="line">            <span class="built_in">this</span>.modifyUser(req,resp);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.dropUser(req,resp);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理添加用户请求</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">addUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.addUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取用户提交数据</span></span><br><span class="line">    <span class="keyword">private</span> Users <span class="title function_">createUsers</span><span class="params">(HttpServletRequest req)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">userpwd</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userpwd&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">usersex</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;usersex&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">phonenumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;phonenumber&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">qqnumber</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;qqnumber&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Users</span>();</span><br><span class="line">        users.setQqnumber(qqnumber);</span><br><span class="line">        users.setPhonenumber(phonenumber);</span><br><span class="line">        users.setUsername(username);</span><br><span class="line">        users.setUserpwd(userpwd);</span><br><span class="line">        users.setUsersex(usersex);</span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理查询用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">findUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">Users</span>  <span class="variable">user</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            List&lt;Users&gt; list = userManagerService.findUser(user);</span><br><span class="line">            req.setAttribute(<span class="string">&quot;list&quot;</span>,list);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/viewUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 预更新查询</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">preUpdate</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            <span class="type">Users</span> <span class="variable">user</span> <span class="operator">=</span> userManagerService.findUserByUserId(Integer.parseInt(userid));</span><br><span class="line">            req.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            req.getRequestDispatcher(<span class="string">&quot;usermanager/updateUser.jsp&quot;</span>).forward(req,resp);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理更新用户请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">modifyUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="type">Users</span> <span class="variable">users</span> <span class="operator">=</span> <span class="built_in">this</span>.createUsers(req);</span><br><span class="line">        users.setUserid(Integer.parseInt(userid));</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.modifyUser(users);</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理删除用户的请求</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">void</span> <span class="title function_">dropUser</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> req.getParameter(<span class="string">&quot;userid&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">UserManagerService</span> <span class="variable">userManagerService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UserManagerServiceImpl</span>();</span><br><span class="line">            userManagerService.dropUser(Integer.parseInt(userid));</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;ok.jsp&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            resp.sendRedirect(<span class="string">&quot;error.jsp&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-修改viewUser-jsp页面完成用户删除"><a href="#6-4-修改viewUser-jsp页面完成用户删除" class="headerlink" title="6.4 修改viewUser.jsp页面完成用户删除"></a>6.4 修改viewUser.jsp页面完成用户删除</h4><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line">  Created by IntelliJ IDEA.</span><br><span class="line">  User: Administrator</span><br><span class="line">  Date: <span class="number">2020</span>/<span class="number">6</span>/<span class="number">2</span> <span class="number">0002</span></span><br><span class="line">  Time: <span class="number">19</span>:<span class="number">04</span></span><br><span class="line">  To change <span class="built_in">this</span> template use File | Settings | File Templates.</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">&quot;c&quot;</span> uri=<span class="string">&quot;http://java.sun.com/jsp/jstl/core&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">&quot;Content-Type&quot;</span> content=<span class="string">&quot;text/html; charset=utf-8&quot;</span> /&gt;</span><br><span class="line">    &lt;title&gt;无标题文档&lt;/title&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;css/style.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> type=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;place&quot;</span>&gt;</span><br><span class="line">    &lt;span&gt;位置：&lt;/span&gt;</span><br><span class="line">    &lt;ul class=<span class="string">&quot;placeul&quot;</span>&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;用户管理&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;查询用户&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;&lt;a href=<span class="string">&quot;#&quot;</span>&gt;查询结果&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div class=<span class="string">&quot;rightinfo&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;formtitle1&quot;</span>&gt;&lt;span&gt;用户列表&lt;/span&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;table class=<span class="string">&quot;tablelist&quot;</span> &gt;</span><br><span class="line">        &lt;thead&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;th&gt;序号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户名&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;用户性别&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;手机号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;QQ号&lt;/th&gt;</span><br><span class="line">            &lt;th&gt;操作&lt;/th&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/thead&gt;</span><br><span class="line"></span><br><span class="line">        &lt;tbody&gt;</span><br><span class="line">        &lt;c:forEach items=<span class="string">&quot;$&#123;list&#125;&quot;</span> <span class="keyword">var</span>=<span class="string">&quot;user&quot;</span> varStatus=<span class="string">&quot;status&quot;</span>&gt;</span><br><span class="line">        &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;$&#123;status.count&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.username&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;</span><br><span class="line">                &lt;c:choose&gt;</span><br><span class="line">                    &lt;c:when test=<span class="string">&quot;$&#123;user.usersex == 1&#125;&quot;</span>&gt;</span><br><span class="line">                        男</span><br><span class="line">                    &lt;/c:when&gt;</span><br><span class="line">                    &lt;c:otherwise&gt;</span><br><span class="line">                        女</span><br><span class="line">                    &lt;/c:otherwise&gt;</span><br><span class="line">                &lt;/c:choose&gt;</span><br><span class="line">            &lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.phonenumber&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;$&#123;user.qqnumber&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&lt;a href=<span class="string">&quot;userManager.do?flag=preUpdate&amp;userid=$&#123;user.userid&#125;&quot;</span> class=<span class="string">&quot;tablelink&quot;</span>&gt;修改&lt;/a&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  &lt;a href=<span class="string">&quot;userManager.do?userid=$&#123;user.userid&#125;&quot;</span> class=<span class="string">&quot;tablelink click&quot;</span>&gt; 删除&lt;/a&gt;&lt;/td&gt;</span><br><span class="line">        &lt;/tr&gt;</span><br><span class="line">        &lt;/c:forEach&gt;</span><br><span class="line">        &lt;/tbody&gt;</span><br><span class="line">    &lt;/table&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;div class=<span class="string">&quot;tip&quot;</span>&gt;</span><br><span class="line">        &lt;div class=<span class="string">&quot;tiptop&quot;</span>&gt;&lt;span&gt;提示信息&lt;/span&gt;&lt;a&gt;&lt;/a&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;tipinfo&quot;</span>&gt;</span><br><span class="line">            &lt;span&gt;&lt;img src=<span class="string">&quot;images/ticon.png&quot;</span> /&gt;&lt;/span&gt;</span><br><span class="line">            &lt;div class=<span class="string">&quot;tipright&quot;</span>&gt;</span><br><span class="line">                &lt;p&gt;是否确认对信息的修改 ？&lt;/p&gt;</span><br><span class="line">                &lt;cite&gt;如果是请点击确定按钮 ，否则请点取消。&lt;/cite&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;div class=<span class="string">&quot;tipbtn&quot;</span>&gt;</span><br><span class="line">            &lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;button&quot;</span>  class=<span class="string">&quot;sure&quot;</span> value=<span class="string">&quot;确定&quot;</span> /&gt;&amp;nbsp;</span><br><span class="line">            &lt;input name=<span class="string">&quot;&quot;</span> type=<span class="string">&quot;button&quot;</span>  class=<span class="string">&quot;cancel&quot;</span> value=<span class="string">&quot;取消&quot;</span> /&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>PROJECT LINK:</p><p><a href="https://www.aliyundrive.com/s/9JrLkf48XLd">https://www.aliyundrive.com/s/9JrLkf48XLd</a></p>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVASE </tag>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring学习笔记</title>
      <link href="/archives/52ba89f4.html"/>
      <url>/archives/52ba89f4.html</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h2 id="Spring框架-1"><a href="#Spring框架-1" class="headerlink" title="Spring框架"></a>Spring框架</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211124135640588.png" alt="image-20211124135640588"></p><p>Spring是一个开源框架，为简化企业级开发而生。它以<strong>IOC</strong>（控制反转）和<strong>AOP</strong>（面向切面）为思想内核，提供了控制层SpringMVC、数据层SpringData、服务层事务管理等众多技术，并可以整合众多第三方框架。</p><p>Spring将很多复杂的代码变得优雅简洁，有效的降低代码的耦合度，极大的方便项目的后期维护、升级和扩展。</p><p>Spring官网地址：<a href="https://spring.io/">https://spring.io/</a></p><h2 id="Spring体系结构"><a href="#Spring体系结构" class="headerlink" title="Spring体系结构"></a>Spring体系结构</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211202103309145.png" alt="image-20211202103309145"></p><p>Spring框架根据不同的功能被划分成了多个模块，这些模块可以满足一切企业级应用开发的需求，在开发过程中可以根据需求有选择性地使用所需要的模块。</p><ul><li><strong>Core Container：Spring核心模块，任何功能的使用都离不开该模块，是其他模块建立的基础。</strong></li><li><strong>Data Access&#x2F;Integration：该模块提供了数据持久化的相应功能。</strong></li><li><strong>Web：该模块提供了web开发的相应功能。</strong></li><li><strong>AOP：提供了面向切面编程实现</strong></li><li><strong>Aspects：提供与AspectJ框架的集成，该框架是一个面向切面编程框架。</strong></li><li><strong>Instrumentation：提供了类工具的支持和类加载器的实现，可以在特定的应用服务器中使用。</strong></li><li><strong>Messaging：为Spring框架集成一些基础的报文传送应用</strong></li><li><strong>Test：提供与测试框架的集成</strong></li></ul><h2 id="IOC-控制反转思想"><a href="#IOC-控制反转思想" class="headerlink" title="IOC_控制反转思想"></a>IOC_控制反转思想</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220409123842697.png" alt="image-20220409123842697"></p><p>IOC(Inversion of Control) ：<strong>程序将创建对象的权利交给框架</strong>。</p><p>之前在开发过程中，对象实例的创建是由调用者管理的，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="comment">// 根据id查询学生</span></span><br><span class="line">    Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟从数据库查找出学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="comment">// 此处就是调用者在创建对象</span></span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDaoImpl</span>();</span><br><span class="line">        <span class="keyword">return</span> studentDao.findById(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种写法有两个缺点：</p><p>1.浪费资源:StudentService调用方法时即会创建一个对象，如果不断调用方法则会创建大量StudentDao对象</p><p>2.代码耦合度高：假设随着开发，我们创建了StudentDao另一个更加完善的实现类StudentDaoImpl2，如果在StudentService中想使用StudentDaoImpl2，则必须修改源码。</p><p>而<strong>IOC思想是将创建对象的权利交给框架，</strong>框架会帮助我们创建对象，分配对象的使用，控制权由程序代码转移到了框架中，控制权发生了反转，这就是Spring的IOC思想。而IOC思想可以完美的解决以上两个问题。</p><h2 id="IOC-自定义对象容器"><a href="#IOC-自定义对象容器" class="headerlink" title="IOC_自定义对象容器"></a>IOC_自定义对象容器</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211124150748998.png" alt="image-20211124150748998"></p><p>接下来我们通过一段代码模拟IOC思想。创建一个集合容器，先将对象创建出来放到容器中，需要使用对象时，只需要从容器中获取对象即可，而不需要重新创建，此时容器就是对象的管理者。</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220409131118145.png" alt="image-20220409131118145"></p><p>1.创建实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.创建Dao接口和实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查询学生</span></span><br><span class="line">    Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟从数据库中找出学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战陈虚谷元&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟根据ID查询学生</span></span><br><span class="line">        System.out.println(<span class="string">&quot;新方法！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战陈虚谷元&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.创建配置文件bean.properties，该文件中定义管理的对象</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">studentDao</span>=<span class="string">com.itbaizhan.dao.StudentDaoImpl</span></span><br></pre></td></tr></table></figure><p>4.创建容器管理类，该类在类加载时读取配置文件，将配置文件中配置的对象全部创建并放入容器中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.container;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.Enumeration;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Container</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//读取文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> Container.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            properties.load(is);</span><br><span class="line">            <span class="comment">//遍历配置文件的所有配置</span></span><br><span class="line">            Enumeration&lt;Object&gt; keys = properties.keys();</span><br><span class="line">            <span class="keyword">while</span> (keys.hasMoreElements())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keys.nextElement().toString();</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> properties.getProperty(key);</span><br><span class="line">                <span class="comment">//创建对象</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> Class.forName(value).newInstance();</span><br><span class="line">                <span class="comment">//将对象放进集合中</span></span><br><span class="line">                map.put(key,o);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException | ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InstantiationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//从容器中获取对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">getBean</span><span class="params">(String key)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.创建Dao对象的调用者StudentService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.container.Container;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDaoImpl;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> (StudentDao) Container.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        System.out.println(studentDao.hashCode());</span><br><span class="line">        <span class="keyword">return</span> studentDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.测试StudentService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.service.StudentService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentService</span>();</span><br><span class="line">        System.out.println(studentService.findStudentById(<span class="number">1</span>));</span><br><span class="line">        System.out.println(studentService.findStudentById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试结果:</p><ol><li><p>StudentService从容器中每次拿到的都是同一个StudentDao对象，节约了资源。</p></li><li><p>如果想使用StudentDaoImpl2对象，只需要修改bean.properties的内容为即可，无需修改Java源码。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">studentDao</span>=<span class="string">com.itbaizhan.dao.StudentDaoImpl2</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="IOC-Spring实现IOC"><a href="#IOC-Spring实现IOC" class="headerlink" title="IOC_Spring实现IOC"></a>IOC_Spring实现IOC</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211126170010941.png" alt="image-20211126170010941"></p><p>接下来我们使用Spring实现IOC，Spring内部也有一个容器用来管理对象。</p><p>1.创建Maven工程，引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_ioc1<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- spring核心模块   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- junit模块   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建POJO类，Dao类和接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="comment">// 省略getter/setter/构造方法/tostring</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="comment">// 根据id查询学生</span></span><br><span class="line">    Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟从数据库查找出学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.编写xml配置文件，放在resource目录下。配置文件中配置需要Spring帮我们创建的对象。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">              http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">   <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.测试从Spring容器中获取对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestContainer</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建Spring容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器获取对象</span></span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">studentDao1</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">studentDao2</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        System.out.println(studentDao1.hashCode());</span><br><span class="line">        System.out.println(studentDao2.hashCode());</span><br><span class="line">        System.out.println(studentDao1.findById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220409142119776.png" alt="image-20220409142119776"></p><h2 id="IOC-Spring容器类型"><a href="#IOC-Spring容器类型" class="headerlink" title="IOC_Spring容器类型"></a>IOC_Spring容器类型</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211124165406979.png" alt="image-20211124165406979"></p><h3 id="容器接口"><a href="#容器接口" class="headerlink" title="容器接口"></a>容器接口</h3><ul><li><p>BeanFactory：BeanFactory是Spring容器中的顶层接口，它可以对Bean对象进行管理。</p></li><li><p>ApplicationContext：ApplicationContext是BeanFactory的子接口。它除了继承 BeanFactory的所有功能外，还添加了对国际化、资源访问、事件传播等方面的良好支持。</p><p>ApplicationContext有以下三个常用实现类：</p></li></ul><h3 id="容器实现类"><a href="#容器实现类" class="headerlink" title="容器实现类"></a>容器实现类</h3><ul><li>ClassPathXmlApplicationContext：该类可以从项目中读取配置文件</li><li>FileSystemXmlApplicationContext：该类从磁盘中读取配置文件</li><li>AnnotationConfigApplicationContext：使用该类不读取配置文件，而是会读取注解</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.FileSystemXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestContainer</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t1</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//创建Spring容器</span></span><br><span class="line"><span class="comment">//        ApplicationContext ac = new ClassPathXmlApplicationContext(&quot;bean.xml&quot;);</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;E:\\Eclipse_workspace1\\springdemo\\spring_ioc1\\src\\main\\resources\\bean.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从容器获取对象</span></span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">studentDao1</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">studentDao2</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">        System.out.println(studentDao1.hashCode());</span><br><span class="line">        System.out.println(studentDao2.hashCode());</span><br><span class="line">        System.out.println(studentDao1.findById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IOC-对象的创建方式"><a href="#IOC-对象的创建方式" class="headerlink" title="IOC_对象的创建方式"></a>IOC_对象的创建方式</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220409155509733.png" alt="image-20220409155509733"></p><p>Spring会帮助我们创建bean，那么它底层是调用什么方法进行创建的呢？</p><h3 id="使用空参构造方法"><a href="#使用空参构造方法" class="headerlink" title="使用空参构造方法"></a>使用空参构造方法</h3><p>Spring默认使用类的空参构造方法创建bean：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 假如类没有空参构造方法，将无法完成bean的创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentDaoImpl</span><span class="params">(<span class="type">int</span> a)</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时将无法完成bean的创建，因为存在有参的构造方法</p><h3 id="使用工厂类的方法"><a href="#使用工厂类的方法" class="headerlink" title="使用工厂类的方法"></a>使用工厂类的方法</h3><p>Spring可以调用工厂类的方法创建bean：</p><p>1.创建工厂类，工厂类提供创建对象的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> StudentDao <span class="title function_">getStudentDao</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentDaoImpl</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在配置文件中配置创建bean的方式为工厂方式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  id：工厂对象的id，class：工厂类  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDaoFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  id：bean对象的id，factory-bean：工厂对象的id，factory-method：工厂方法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;studentDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getStudentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用工厂类的静态方法"><a href="#使用工厂类的静态方法" class="headerlink" title="使用工厂类的静态方法"></a>使用工厂类的静态方法</h3><p>Spring可以调用工厂类的静态方法创建bean：</p><p>1.创建工厂类，工厂提供创建对象的静态方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoFactory2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StudentDao <span class="title function_">getStudentDao</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentDaoImpl</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在配置文件中配置创建bean的方式为工厂静态方法。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- id:bean的id  class:工厂全类名 factory-method:工厂静态方法   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoFactory2&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getStudentDao2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">              http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 普通工厂创建对象配置方法   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 当构造方法有参的情况下（bean默认的是使用无参的构造方法）,当一个类里存在有参的构造器，无参的构造器将会被取代   --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;studentDaoFactory&quot; class=&quot;com.itbaizhan.dao.StudentDaoFactory&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;studentDao&quot; factory-bean=&quot;studentDaoFactory&quot; factory-method=&quot;getStudentDao&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 无参构造方法创建对象   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    &lt;bean id=&quot;studentDao&quot; class=&quot;com.itbaizhan.dao.StudentDaoImpl&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 静态工厂创建对象  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoFactory2&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getStudentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring可以使用这三种方法创建bean对象：静态工厂方法、工厂方法以及空参构造方法</p><h2 id="IOC-对象的创建策略"><a href="#IOC-对象的创建策略" class="headerlink" title="IOC_对象的创建策略"></a>IOC_对象的创建策略</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220409161342545.png" alt="image-20220409161342545"></p><p>Spring通过配置<code>&lt;bean&gt;</code>中的<code>scope</code>属性设置对象的创建策略，共有五种创建策略：</p><p><strong>singleton：单例，默认策略。整个项目只会创建一个对象，通过<code>&lt;bean&gt;</code>中的<code>lazy-init</code>属性可以设置单例对象的创建时机：</strong></p><p>lazy-init&#x3D;”false”(默认)：立即创建，在容器启动时会创建配置文件中的所有Bean对象。</p><p>lazy-init&#x3D;”true”：延迟创建，第一次使用Bean对象时才会创建。</p><p>配置单例策略：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    &lt;bean id=&quot;studentDao&quot; class=&quot;com.itbaizhan.dao.StudentDaoImpl2&quot; scope=&quot;singleton&quot; lazy-init=&quot;true&quot;&gt;&lt;/bean&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl2&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">lazy-init</span>=<span class="string">&quot;false&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试单例策略：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为Bean对象的类添加构造方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">StudentDaoImpl2</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;创建StudentDao！！！&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 创建Spring容器</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="comment">// 从容器获取对象</span></span><br><span class="line">    <span class="type">StudentDao</span> <span class="variable">studentDao1</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">    <span class="type">StudentDao</span> <span class="variable">studentDao2</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">    <span class="type">StudentDao</span> <span class="variable">studentDao3</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">    System.out.println(studentDao1.hashCode());</span><br><span class="line">    System.out.println(studentDao2.hashCode());</span><br><span class="line">    System.out.println(studentDao3.hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">              http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 空参构造方法   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl2&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>prototype：多例，每次从容器中获取时都会创建对象。</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置多例策略 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span>   <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl2&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>request：每次请求创建一个对象，只在web环境有效。</strong></p><p><strong>session：每次会话创建一个对象，只在web环境有效。</strong></p><p><strong>gloabal-session：一次集群环境的会话创建一个对象，只在web环境有效。</strong></p><h2 id="IOC-对象的销毁时机"><a href="#IOC-对象的销毁时机" class="headerlink" title="IOC_对象的销毁时机"></a>IOC_对象的销毁时机</h2><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211126171718292.png" alt="image-20211126171718292"></p><p>对象的创建策略不同，销毁时机也不同：</p><ul><li>singleton：对象随着容器的销毁而销毁。</li><li>prototype：使用JAVA垃圾回收机制销毁对象。</li><li>request：当处理请求结束，bean实例将被销毁。</li><li>session：当HTTP Session最终被废弃的时候，bean也会被销毁掉。</li><li>gloabal-session：集群环境下的session销毁，bean实例也将被销毁。</li></ul><h2 id="IOC-生命周期方法"><a href="#IOC-生命周期方法" class="headerlink" title="IOC_生命周期方法"></a>IOC_生命周期方法</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220409165500376.png" alt="image-20220409165500376"></p><p>Bean对象的生命周期包含<strong>创建——使用——销毁</strong>，Spring可以配置Bean对象在创建和销毁时自动执行的方法：</p><p>1.定义生命周期方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl2</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentDaoImpl2</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;create StudentDao&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建时自动执行的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;create StudentDao-------&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 销毁时自动执行的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destroy StudentDao！！！&quot;</span>);</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;new Method&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;baizhanchengxuyuan&quot;</span>,<span class="string">&quot;Beijing&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置生命周期方法</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">              http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 静态工厂创建对象   --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- init-method:创建对象时执行的方法  destroy-method:销毁对象时执行的方法  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl2&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//创建Spring容器</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//销毁Spring容器ClassPathXmlApplicationContext才有销毁容器的方法</span></span><br><span class="line">    ac.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="IOC-获取Bean对象的方式"><a href="#IOC-获取Bean对象的方式" class="headerlink" title="IOC_获取Bean对象的方式"></a>IOC_获取Bean对象的方式</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220409171040513.png" alt="image-20220409171040513"></p><p>Spring有多种获取容器中对象的方式：</p><h3 id="通过id-x2F-name获取"><a href="#通过id-x2F-name获取" class="headerlink" title="通过id&#x2F;name获取"></a>通过id&#x2F;name获取</h3><p>1.配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.获取对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br></pre></td></tr></table></figure><h3 id="通过class类型获取"><a href="#通过class类型获取" class="headerlink" title="通过class类型获取"></a>通过class类型获取</h3><p>1.配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.获取对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StudentDao</span> <span class="variable">studentDao2</span> <span class="operator">=</span> ac.getBean(StudentDao.class);</span><br></pre></td></tr></table></figure><p>可以看到使用类型获取不需要强转。</p><h3 id="通过类型-id-x2F-name获取"><a href="#通过类型-id-x2F-name获取" class="headerlink" title="通过类型+id&#x2F;name获取"></a>通过类型+id&#x2F;name获取</h3><p>虽然使用类型获取不需要强转，但如果在容器中有一个接口的多个实现类对象，则获取时会报错，此时需要使用类型+id&#x2F;name获取</p><p>1.配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;studentDao1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.获取对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">StudentDao</span> <span class="variable">studentDao2</span> <span class="operator">=</span> ac.getBean(<span class="string">&quot;studentDao&quot;</span>,StudentDao.class);</span><br></pre></td></tr></table></figure><h2 id="DI-什么是依赖注入"><a href="#DI-什么是依赖注入" class="headerlink" title="DI_什么是依赖注入"></a>DI_什么是依赖注入</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220410100227139.png" alt="image-20220410100227139"></p><p><strong>依赖注入（Dependency Injection，简称DI），它是Spring控制反转思想的具体实现。</strong></p><p>控制反转将对象的创建交给了Spring，但是对象中可能会依赖其他对象。比如service类中要有dao类的属性，我们称service依赖于dao。之前需要手动注入属性值，代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">// service依赖dao，手动注入属性值，即手动维护依赖关系</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDaoImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时，当StudentService的想要使用StudentDao的另一个实现类如StudentDaoImpl2时，则需要修改Java源码，造成代码的可维护性降低。</p><p>而使用Spring框架后，Spring管理Service对象与Dao对象，此时它能够为Service对象注入依赖的Dao属性值。这就是Spring的依赖注入。</p><p>简单来说，<strong>控制反转是创建对象，依赖注入是为对象的属性赋值</strong></p><h2 id="DI-依赖注入方式"><a href="#DI-依赖注入方式" class="headerlink" title="DI_依赖注入方式"></a>DI_依赖注入方式</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220410105500377.png" alt="image-20220410105500377"></p><p>在之前开发中，可以通过setter方法或构造方法设置对象属性值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// setter方法设置属性</span></span><br><span class="line"><span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentService</span>();</span><br><span class="line"><span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDao</span>();</span><br><span class="line">studentService.setStudentDao(studentDao);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造方法设置属性</span></span><br><span class="line"><span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentDao</span>();</span><br><span class="line"><span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentService</span>(studentDao);</span><br></pre></td></tr></table></figure><p>Spring可以通过调用setter方法或构造方法给属性赋值</p><h3 id="Setter注入"><a href="#Setter注入" class="headerlink" title="Setter注入"></a>Setter注入</h3><p>1.被注入类编写属性的setter方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> StudentDao <span class="title function_">getStudentDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentDao</span><span class="params">(StudentDao studentDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">return</span>  studentDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置文件中，给需要注入属性值的<bean>中设置<property></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">              http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  依赖注入  --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- name:对象的属性名  ref：容器中对象的id值     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> (StudentService) ac.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">    System.out.println(studentService.findStudentById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h3><p>1.被注入类编写有参的构造方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentService</span><span class="params">(StudentDao studentDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.给需要注入属性值的<bean>中设置<constructor-arg></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 依赖注入 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name:对象的属性名  ref：配置文件中注入对象的id值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.编写测试文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> (StudentService) ac.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">    System.out.println(studentService.findStudentById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自动注入（个人喜欢的是构造器注入）"><a href="#自动注入（个人喜欢的是构造器注入）" class="headerlink" title="自动注入（个人喜欢的是构造器注入）"></a>自动注入（个人喜欢的是构造器注入）</h2><p>自动注入不需要在<code>&lt;bean&gt;</code>标签中添加其他标签注入属性值，而是自动从容器中找到相应的bean对象设置为属性值。</p><p>自动注入有两种配置方式：</p><ul><li>全局配置：在<code>&lt;beans&gt;</code>中设置<code>default-autowire</code>属性可以定义<strong>所有</strong>bean对象的自动注入策略。</li><li>局部配置：在<code>&lt;bean&gt;</code>中设置<code>autowire</code>属性可以定义<strong>当前</strong>bean对象的自动注入策略。</li></ul><p>autowire的取值如下：</p><ul><li><p>no：不会进行自动注入。</p></li><li><p>default：全局配置default相当于no，局部配置default表示使用全局配置</p></li><li><p>byName：在Spring容器中查找id与属性名相同的bean，并进行注入。需要提供set方法。</p></li><li><p>byType：在Spring容器中查找类型与属性类型相同的bean，并进行注入。需要提供set方法。</p></li><li><p>constructor：在Spring容器中查找id与属性名相同的bean，并进行注入。需要提供构造方法。</p><p>（推荐使用Constructor）</p></li></ul><p>测试自动注入：</p><p>1.为依赖的对象提供setter和构造方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">// 依赖</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="comment">// 构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentService</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentService</span><span class="params">(StudentDao studentDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// setter方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentDao</span><span class="params">(StudentDao studentDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用依赖的方法</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置自动注入：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 根据beanId等于属性名自动注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byName&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据bean类型等于属性类型自动注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 利用构造方法自动注入 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置全局自动注入 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">default-autowire</span>=<span class="string">&quot;constructor&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="DI-依赖注入类型"><a href="#DI-依赖注入类型" class="headerlink" title="DI_依赖注入类型"></a>DI_依赖注入类型</h2><p>DI支持注入bean类型、基本数据类型和字符串、List集合、Set集合、Map集合、Properties对象类型等，他们的写法如下：</p><p>1.准备注入属性的类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao; <span class="comment">// bean属性</span></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">//字符串类型</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count; <span class="comment">//基本数据类型</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; names; <span class="comment">// 字符串类型List集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students1; <span class="comment">// 对象类型List集合</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;Student&gt; students2; <span class="comment">// 对象类型Set集合</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,String&gt; names2; <span class="comment">// 字符串类型Map集合</span></span><br><span class="line">   <span class="keyword">private</span> Map&lt;String,Student&gt; students3; <span class="comment">// 对象类型Map集合</span></span><br><span class="line">    <span class="keyword">private</span> Properties properties; <span class="comment">//Properties类型</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;StudentService&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;studentDao=&quot;</span> + studentDao +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, count=&quot;</span> + count +</span><br><span class="line">                <span class="string">&quot;, names=&quot;</span> + names +</span><br><span class="line">                <span class="string">&quot;, students1=&quot;</span> + students1 +</span><br><span class="line">                <span class="string">&quot;, students2=&quot;</span> + students2 +</span><br><span class="line">                <span class="string">&quot;, names2=&quot;</span> + names2 +</span><br><span class="line">                <span class="string">&quot;, students3=&quot;</span> + students3 +</span><br><span class="line">                <span class="string">&quot;, properties=&quot;</span> + properties +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCount</span><span class="params">(<span class="type">int</span> count)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.count = count;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getNames</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNames</span><span class="params">(List&lt;String&gt; names)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.names = names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">getStudents1</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> students1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudents1</span><span class="params">(List&lt;Student&gt; students1)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.students1 = students1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Set&lt;Student&gt; <span class="title function_">getStudents2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> students2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudents2</span><span class="params">(Set&lt;Student&gt; students2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.students2 = students2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getNames2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> names2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNames2</span><span class="params">(Map&lt;String, String&gt; names2)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.names2 = names2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Student&gt; <span class="title function_">getStudents3</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> students3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudents3</span><span class="params">(Map&lt;String, Student&gt; students3)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.students3 = students3;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Properties <span class="title function_">getProperties</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.properties = properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentService</span><span class="params">(StudentDao studentDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentService</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> StudentDao <span class="title function_">getStudentDao</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStudentDao</span><span class="params">(StudentDao studentDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentDao = studentDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">       <span class="keyword">return</span>  studentDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.准备测试方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t3</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> (StudentService)ac.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">    System.out.println(studentService);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注入bean类型"><a href="#注入bean类型" class="headerlink" title="注入bean类型"></a>注入bean类型</h3><p>写法一:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写法二：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ref</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注入基本数据类型"><a href="#注入基本数据类型" class="headerlink" title="注入基本数据类型"></a>注入基本数据类型</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">              http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  写法一      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;studentDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;studentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  写法二      --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;property name=&quot;studentDao&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;ref bean=&quot;studentDao&quot;&gt;&lt;/ref&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/property&gt;--&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">&lt;!--  写法一 name：属性名  value：属性值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;百战&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  写法二 name：属性名  value：属性值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;count&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>10<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注入list集合-记得，属性是写在bean里面的"><a href="#注入list集合-记得，属性是写在bean里面的" class="headerlink" title="注入list集合 (记得，属性是写在bean里面的)"></a>注入list集合 (记得，属性是写在bean里面的)</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 简单数据类型List集合   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>尚学堂<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>百战程序员<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象类型List集合 name：属性名   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.domain.Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rust&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zq&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.domain.Student&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;rustB&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;zqzg&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="注入Set集合"><a href="#注入Set集合" class="headerlink" title="注入Set集合"></a>注入Set集合</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--   Set集合     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students2&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.domain.Student&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;apple&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;10&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;fsfs&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.domain.Student&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kingdom&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;56&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;aaaa&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注入Map集合"><a href="#注入Map集合" class="headerlink" title="注入Map集合"></a>注入Map集合</h2><p>简单数据类型Map集合：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;names2&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;bz&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">value</span>=<span class="string">&quot;sxt&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对象类型Map集合：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!-- 对象类型Map集合   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;students3&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;student1&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;s1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;student2&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;s2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">entry</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;s1&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;尚学堂&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;s2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;尚学堂123&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京456&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注入Properties对象"><a href="#注入Properties对象" class="headerlink" title="注入Properties对象"></a>注入Properties对象</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;studentService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.service.StudentService&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;配置1&quot;</span>&gt;</span>值1<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;配置2&quot;</span>&gt;</span>值2<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-准备工作"><a href="#注解实现IOC-准备工作" class="headerlink" title="注解实现IOC_准备工作"></a>注解实现IOC_准备工作</h2><p>注解配置和xml配置对于Spring的IOC要实现的功能都是一样的，只是配置的形式不一样。</p><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><ol><li>创建一个新的Spring项目。</li><li>编写pojo，dao，service类。</li><li>编写空的配置文件，如果想让该文件支持注解，需要添加新的约束：</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                           http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-Component"><a href="#注解实现IOC-Component" class="headerlink" title="注解实现IOC_@Component"></a>注解实现IOC_@Component</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220411233348972.png" alt="image-20220411233348972"></p><p>作用：用于创建对象，放入Spring容器，相当于<code>&lt;bean id=&quot;&quot; class=&quot;&quot;&gt;</code></p><p>位置：类上方</p><p>注意：</p><p>要在配置文件中配置扫描的包，扫描到该注解才能生效。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>@Component</code>注解配置bean的默认id是首字母小写的类名。也可以手动设置bean的id值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 此时bean的id为studentDaoImpl</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此时bean的id为studentDao</span></span><br><span class="line"><span class="meta">@Component(&quot;studentDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;studentService&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring中，@Component注解中的value属性值表示：bean对象的id</p><h2 id="注解实现IOC-Repository、-Service、-Controller"><a href="#注解实现IOC-Repository、-Service、-Controller" class="headerlink" title="注解实现IOC_@Repository、@Service、@Controller"></a>注解实现IOC_@Repository、@Service、@Controller</h2><p>作用：这三个注解和@Component的作用一样，使用它们是为了区分该类属于什么层。</p><p>位置：</p><ul><li><strong>@Repository用于Dao层</strong></li><li><strong>@Service用于Service层</strong></li><li><strong>@Controller用于Controller层</strong></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-Scope"><a href="#注解实现IOC-Scope" class="headerlink" title="注解实现IOC_@Scope"></a>注解实现IOC_@Scope</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220411235520643.png" alt="image-20220411235520643"></p><p>作用：<strong>指定bean的创建策略</strong></p><p>位置：类上方</p><p>取值范围：<em><strong>singleton prototype request session globalsession</strong></em></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-Autowired"><a href="#注解实现IOC-Autowired" class="headerlink" title="注解实现IOC_@Autowired"></a>注解实现IOC_@Autowired</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220412110743059.png" alt="image-20220412110743059"></p><p>作用：从容器中查找符合属性类型的对象自动注入属性中。用于代替<code>&lt;bean&gt;</code>中的依赖注入配置。</p><p>位置：<strong>属性上方、setter方法上方、构造方法上方</strong>。</p><p>注意：</p><p><code>@Autowired</code>写在属性上方进行依赖注入时，可以省略setter方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean.xml&quot;</span>);</span><br><span class="line">    <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> (StudentService) ac.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">    System.out.println(studentService.findStudentById(<span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容器中没有对应类型的对象会报错</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 如果StudentDaoImpl没有放到容器中会报错</span></span><br><span class="line"><span class="comment">//@Component(&quot;studentDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>容器中如果有多个对象匹配类型时，会找beanId等于属性名的对象，找不到会报错</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果容器中都多个同类型对象，会根据id值等于属性名找对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;studentDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在spring中，@Autowired不能写在上方</p><h2 id="注解实现IOC-Qualifier"><a href="#注解实现IOC-Qualifier" class="headerlink" title="注解实现IOC_@Qualifier"></a>注解实现IOC_@Qualifier</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220412111647765.png" alt="image-20220412111647765"></p><p>作用：在按照类型注入对象的基础上，再按照bean的id注入。</p><p>位置：属性上方</p><p>注意：@Qualifier必须和@Autowired一起使用。</p><p>在容器中如果有多个对象匹配类型时的况下，自主选择注入哪个beanId。而不是根据benId等于属性名的对象这种方法匹配</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果容器中都多个同类型对象，会根据id值等于属性名找对象</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component(&quot;studentDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line"> <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentDao</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="comment">// 模拟根据id查询学生</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">1</span>,<span class="string">&quot;百战程序员&quot;</span>,<span class="string">&quot;北京&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;studentDaoImpl2&quot;)</span></span><br><span class="line">    <span class="comment">//如果不使用  @Qualifier(&quot;studentDaoImpl2&quot;)，因为bean对象studentDao与@Component(&quot;studentDao&quot;)相同，所以会选择 StudentDaoImpl匹配</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">findStudentById</span><span class="params">(<span class="type">int</span> id)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-Value"><a href="#注解实现IOC-Value" class="headerlink" title="注解实现IOC_@Value"></a>注解实现IOC_@Value</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220412113210448.png" alt="image-20220412113210448"></p><p>作用：注入String类型和基本数据类型的属性值。</p><p>位置：属性上方</p><p>用法：</p><h4 id="1-直接设置注入固定的属性值"><a href="#1-直接设置注入固定的属性值" class="headerlink" title="1.直接设置注入固定的属性值"></a>1.直接设置注入固定的属性值</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;1&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> count;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Value(&quot;hello&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-获取配置文件中的属性值："><a href="#2-获取配置文件中的属性值：" class="headerlink" title="2.获取配置文件中的属性值："></a>2.获取配置文件中的属性值：</h4><h5 id="1-编写配置文件db-properties"><a href="#1-编写配置文件db-properties" class="headerlink" title="1.编写配置文件db.properties"></a>1.编写配置文件db.properties</h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure><h5 id="2-spring核心配置文件扫描配置文件"><a href="#2-spring核心配置文件扫描配置文件" class="headerlink" title="2.spring核心配置文件扫描配置文件"></a>2.spring核心配置文件扫描配置文件</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;context:property-placeholder location=<span class="string">&quot;db.properties&quot;</span>&gt;&lt;/context:property-placeholder&gt;</span><br></pre></td></tr></table></figure><p>3.注入配置文件中的属性值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-Configuration"><a href="#注解实现IOC-Configuration" class="headerlink" title="注解实现IOC_@Configuration"></a>注解实现IOC_@Configuration</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220412151927654.png" alt="image-20220412151927654"></p><p>此时基于注解的IOC配置已经完成，但是我们依然离不开Spring的xml配置文件。接下来我们脱离bean.xml，使用纯注解实现IOC。</p><p>在真实开发中，我们一般还是会保留xml配置文件，很多情况下使用配置文件更加方便。</p><p>纯注解实现IOC需要一个Java类代替xml文件。这个Java类上方需要添加@Configuration，表示该类是一个配置类，作用是代替配置文件。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itbaizhan&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-ComponentScan"><a href="#注解实现IOC-ComponentScan" class="headerlink" title="注解实现IOC_@ComponentScan"></a>注解实现IOC_@ComponentScan</h2><p>作用：指定spring在初始化容器时扫描的包。</p><p>位置：配置类上方</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itbaizhan&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-PropertySource"><a href="#注解实现IOC-PropertySource" class="headerlink" title="注解实现IOC_@PropertySource"></a>注解实现IOC_@PropertySource</h2><p>作用：代替配置文件中的<code>&lt;context:property-placeholder&gt;</code>扫描配置文件</p><p>位置：配置类上方</p><p>注意：<strong>配置文件位置前要加关键字<code>classpath</code></strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itbaizhan&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:db.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.username</span> = <span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span> = <span class="string">root</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t3</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">StudentService</span> <span class="variable">studentService</span> <span class="operator">=</span> (StudentService) ac.getBean(<span class="string">&quot;studentService&quot;</span>);</span><br><span class="line">    <span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> (StudentDao) ac.getBean(<span class="string">&quot;studentDao&quot;</span>);</span><br><span class="line">    System.out.println(studentService);</span><br><span class="line">    System.out.println(studentDao);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-Bean"><a href="#注解实现IOC-Bean" class="headerlink" title="注解实现IOC_@Bean"></a>注解实现IOC_@Bean</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220412155453997.png" alt="image-20220412155453997"></p><p>作用：将方法的返回值对象放入Spring容器中，如果想将第三方类的对象放入容器，可以使用@Bean</p><p>位置：配置类的方法上方。</p><p>属性：name：给bean对象设置id</p><p>注意：@Bean修饰的方法如果有参数，spring会根据参数类型从容器中查找可用对象。</p><p> 举例：如果想将jdbc连接对象放入Spring容器，我们无法修改Connection源码添加@Component，此时就需要使用将@Bean该对象放入Spring容器</p><p>1.添加驱动依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.27<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.将Connection对象放入Spring容器中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itbaizhan&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:db.properties&quot;)</span></span><br><span class="line"><span class="comment">//@Bean主要用于第三方不可修改的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;connection&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">(StudentService studentService)</span>  &#123;</span><br><span class="line">        System.out.println(studentService);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///mybatis&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t5</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> (Connection) ac.getBean(<span class="string">&quot;connection&quot;</span>);</span><br><span class="line">    System.out.println(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="注解实现IOC-Import"><a href="#注解实现IOC-Import" class="headerlink" title="注解实现IOC_@Import"></a>注解实现IOC_@Import</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220412162040727.png" alt="image-20220412162040727"></p><p>作用：如果配置过多，会有多个配置类，该注解可以为主配置类导入其他配置类</p><p>位置：主配置类上方</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JDBC配置类</span></span><br><span class="line"><span class="keyword">package</span> com.itbaizhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean(name = &quot;connection&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Connection <span class="title function_">getConnection</span><span class="params">(StudentService studentService)</span>  &#123;</span><br><span class="line">        System.out.println(studentService);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> DriverManager.getConnection(<span class="string">&quot;jdbc:mysql:///mybatis&quot;</span>,<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//主配置类</span></span><br><span class="line"><span class="keyword">package</span> com.itbaizhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.service.StudentService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itbaizhan&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:db.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(JdbcConfig.class)</span></span><br><span class="line"><span class="comment">//@Bean主要用于第三方不可修改的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Spring整合MyBatis-搭建环境"><a href="#Spring整合MyBatis-搭建环境" class="headerlink" title="Spring整合MyBatis_搭建环境"></a>Spring整合MyBatis_搭建环境</h2><p>我们知道使用MyBatis时需要写大量创建SqlSessionFactoryBuilder、SqlSessionFactory、SqlSession等对象的代码，而Spring的作用是帮助我们创建和管理对象，所以我们可以使用Spring整合MyBatis，简化MyBatis开发。</p><h3 id="创建maven项目，引入依赖"><a href="#创建maven项目，引入依赖" class="headerlink" title="创建maven项目，引入依赖"></a>创建maven项目，引入依赖</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  mybatis      --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--   mysql驱动包     --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.28<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis与Spring的整合包，该包可以让Spring创建MyBatis的对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring整合MyBaits-编写配置文件"><a href="#Spring整合MyBaits-编写配置文件" class="headerlink" title="Spring整合MyBaits_编写配置文件"></a>Spring整合MyBaits_编写配置文件</h2><p>1.编写数据库配置文件db.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driverClassName</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql:///student3</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure><p>2.创建MyBatis配置文件SqlMapConfig.xml，数据源、扫描接口都交由Spring管理，不需要在MyBatis配置文件中设置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.创建Spring配置文件applicationContext.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 包扫描   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 读取配置文件   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;db.properties&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:property-placeholder</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建druid数据源对象   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driverClassName&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring创建封装过的SqlSessionFactory   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SqlMapConfig.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--Spring创建封装过的SqlSession    --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--构造器注入    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSession&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;sqlSessionFactory&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring整合MyBatis-准备数据库和实体类"><a href="#Spring整合MyBatis-准备数据库和实体类" class="headerlink" title="Spring整合MyBatis_准备数据库和实体类"></a>Spring整合MyBatis_准备数据库和实体类</h2><h3 id="准备数据库"><a href="#准备数据库" class="headerlink" title="准备数据库"></a>准备数据库</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `student`;</span><br><span class="line">USE `student`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `student`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `student` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `name` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `sex` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `address` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `student`(`id`,`name`,`sex`,`address`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;百战程序员&#x27;</span>,<span class="string">&#x27;男&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;北京尚学堂&#x27;</span>,<span class="string">&#x27;女&#x27;</span>,<span class="string">&#x27;北京&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="准备实体类"><a href="#准备实体类" class="headerlink" title="准备实体类"></a>准备实体类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String sex;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, String name, String sex, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, sex=&#x27;&quot;</span> + sex + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, address=&#x27;&quot;</span> + address + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSex</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSex</span><span class="params">(String sex)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.sex = sex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合MyBatis-编写持久层接口和service类"><a href="#Spring整合MyBatis-编写持久层接口和service类" class="headerlink" title="Spring整合MyBatis_编写持久层接口和service类"></a>Spring整合MyBatis_编写持久层接口和service类</h2><h3 id="编写持久层接口"><a href="#编写持久层接口" class="headerlink" title="编写持久层接口"></a>编写持久层接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Insert;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    <span class="comment">//查询所有学生</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from student3&quot;)</span></span><br><span class="line">    List&lt;Student&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加学生</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into student values(null,#&#123;name&#125;,#&#123;sex&#125;,#&#123;address&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Student student)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="编写service类"><a href="#编写service类" class="headerlink" title="编写service类"></a>编写service类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="comment">//SqlSession对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用SqlSession获取代理对象</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAllStudent</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">StudentDao</span> <span class="variable">studentDao</span> <span class="operator">=</span> sqlSession.getMapper(StudentDao.class);</span><br><span class="line">        <span class="keyword">return</span> studentDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring整合MyBatis-Spring整合Junit进行单元测试"><a href="#Spring整合MyBatis-Spring整合Junit进行单元测试" class="headerlink" title="Spring整合MyBatis_Spring整合Junit进行单元测试"></a>Spring整合MyBatis_Spring整合Junit进行单元测试</h2><p>1.引入Junit和Spring整合Junit依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- junit,如果Spring5整合junit，则junit版本至少在4.12以上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- spring整合测试模块 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.编写测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Junit使用Spring方式运行代码，即自动创建spring容器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//告知创建spring容器时读取哪个配置类或配置文件</span></span><br><span class="line"><span class="comment">//配置类写法：@ContextConfiguration(classes=配置类.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        List&lt;Student&gt; allStudent = studentService.findAllStudent();</span><br><span class="line">        <span class="keyword">for</span> (Student student : allStudent) &#123;</span><br><span class="line">            System.out.println(student.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>使用SqlSessionTemplate创建代理对象还是需要注册接口或者映射文件的。</p><p>1.在MyBatis配置文件注册接口</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.dao.StudentDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.创建sqlSessionFactory时指定MyBatis配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建Spring封装过的SqlSessionFactory --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:SqlMapConfig.xml&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Spring整合MyBatis-自动创建代理对象-不需要手动通过sqlsession和反射创建代理对象"><a href="#Spring整合MyBatis-自动创建代理对象-不需要手动通过sqlsession和反射创建代理对象" class="headerlink" title="Spring整合MyBatis_自动创建代理对象(不需要手动通过sqlsession和反射创建代理对象)"></a>Spring整合MyBatis_自动创建代理对象(不需要手动通过sqlsession和反射创建代理对象)</h2><p><strong>Spring提供了MapperScannerConfigurer对象，该对象可以自动扫描包创建代理对象，并将代理对象放入容器中，此时不需要使用SqlSession手动创建代理对象。</strong></p><p>1.在applicationContext.xml中创建MapperScannerConfigurer对象</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 该对象可以自动扫描持久层接口，并为接口创建代理对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 不需要再在mybatis中配置mapper   --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置扫描的接口包      --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itbaizhan.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.Service类直接使用代理对象即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Student;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"><span class="comment">//    //SqlSession对象</span></span><br><span class="line"><span class="comment">//    @Autowired</span></span><br><span class="line"><span class="comment">//    private SqlSessionTemplate sqlSession;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//    //使用SqlSession获取代理对象，操作数据库</span></span><br><span class="line"><span class="comment">//    public List&lt;Student&gt; findAllStudent()</span></span><br><span class="line"><span class="comment">//    &#123;</span></span><br><span class="line"><span class="comment">//        StudentDao studentDao = sqlSession.getMapper(StudentDao.class);</span></span><br><span class="line"><span class="comment">//        return studentDao.findAll();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Student&gt; <span class="title function_">findAllStudent</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> studentDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span></span><br><span class="line">    &#123;</span><br><span class="line">        studentDao.add(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations=&quot;classpath:applicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="number">0</span>, <span class="string">&quot;百战2&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="string">&quot;上海&quot;</span>);</span><br><span class="line">        studentService.addStudent(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringAOP-AOP入门"><a href="#SpringAOP-AOP入门" class="headerlink" title="SpringAOP_AOP入门"></a>SpringAOP_AOP入门</h2><p>AspectJ是一个基于Java语言的AOP框架，在Spring框架中建议使用AspectJ实现AOP。</p><p>接下来我们写一个AOP入门案例：dao层的每个方法结束后都可以打印一条日志：</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- AspectJ --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--  junit  --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-编写连接点"><a href="#2-编写连接点" class="headerlink" title="2.编写连接点"></a>2.编写连接点</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户新增&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户删除&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;用户修改&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-编写通知类"><a href="#3-编写通知类" class="headerlink" title="3.编写通知类"></a>3.编写通知类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspectJAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturning</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打印日志.....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-配置切面"><a href="#4-配置切面" class="headerlink" title="4.配置切面"></a>4.配置切面</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 通知对象   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspectJAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.advice.MyAspectJAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置AOP   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置切面     --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspectJAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置切点  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置通知     --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;myAfterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-测试"><a href="#5-测试" class="headerlink" title="5.测试"></a>5.测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ApplicationContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.support.ClassPathXmlApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ac.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ac.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.delete();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ac.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringAOP-通知类型"><a href="#SpringAOP-通知类型" class="headerlink" title="SpringAOP_通知类型"></a>SpringAOP_通知类型</h2><p>AOP有以下五种常用的通知类型：</p><table><thead><tr><th>通知类型</th><th>描述</th></tr></thead><tbody><tr><td>前置通知</td><td>在方法执行前添加功能</td></tr><tr><td>后置通知</td><td>在方法正常执行后同添加功能</td></tr><tr><td>异常通知</td><td>在方法抛出异常后添加功能</td></tr><tr><td>最终通知</td><td>无论方法是否抛出异常，都会执行该通知</td></tr><tr><td>环绕通知</td><td>在方法执行前后添加功能</td></tr></tbody></table><h4 id="1-编写通知方法"><a href="#1-编写通知方法" class="headerlink" title="1.编写通知方法"></a>1.编写通知方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.swing.interop.SwingInterOpUtils;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspectJAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturning</span><span class="params">(JoinPoint joinPoint)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切点方法名:&quot;</span>+joinPoint.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;目标对象:&quot;</span>+joinPoint.getTarget());</span><br><span class="line">        System.out.println(<span class="string">&quot;打印日志&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterThrowing</span><span class="params">(Exception ex)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知...&quot;</span>);</span><br><span class="line">        System.err.println(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置切面"><a href="#2-配置切面" class="headerlink" title="2.配置切面"></a>2.配置切面</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 通知对象   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspectJAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.advice.MyAspectJAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置AOP   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置切面     --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspectJAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置切点  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置通知     --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;myBefore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;myAfterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;myAfterThrowing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;myAfter&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;myAround&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringAOP-切点表达式"><a href="#SpringAOP-切点表达式" class="headerlink" title="SpringAOP_切点表达式"></a>SpringAOP_切点表达式</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220413161358361.png" alt="image-20220413161358361"></p><p>使用AspectJ需要使用切点表达式配置切点位置，写法如下：</p><ul><li><p>标准写法：访问修饰符 返回值 包名.类名.方法名(参数列表)</p><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220413161342056.png" alt="image-20220413161342056"></p></li><li><p>访问修饰符可以省略。</p></li><li><p>返回值使用<code>*</code>代表任意类型。</p></li><li><p>包名使用<code>*</code>表示任意包，多级包结构要写多个<code>*</code>，使用<code>*..</code>表示任意包结构</p></li><li><p>类名和方法名都可以用<code>*</code>实现通配。</p></li><li><p>参数列表</p><ul><li>基本数据类型直接写类型</li><li>引用类型写<code>包名.类名</code></li><li><code>*</code>表示匹配一个任意类型参数</li><li><code>..</code>表示匹配任意类型任意个数的参数</li></ul></li><li><p>全通配：<code>* *..*.*(..)</code></p></li></ul><h2 id="SpringAOP-多切面框架"><a href="#SpringAOP-多切面框架" class="headerlink" title="SpringAOP_多切面框架"></a>SpringAOP_多切面框架</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220413163617806.png" alt="image-20220413163617806"></p><p>我们可以为切点配置多个通知，形成多切面，比如希望dao层的每个方法结束后都可以打印日志并发送邮件：</p><p>1.编写发送邮件的通知：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspectJAdvice2</span> &#123;</span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturning</span><span class="params">(JoinPoint joinPoint)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发送邮件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.配置切面</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 通知对象   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspectJAdvice&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.advice.MyAspectJAdvice&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myAspectJAdvice2&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.advice.MyAspectJAdvice2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置AOP   --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置切面     --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspectJAdvice&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置切点  --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * com.itbaizhan.dao.UserDao.*(..))&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  配置通知     --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;myBefore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:before</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;myAfterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">&quot;myAfterThrowing&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span> <span class="attr">throwing</span>=<span class="string">&quot;ex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-throwing</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;myAfter&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:around</span> <span class="attr">method</span>=<span class="string">&quot;myAround&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:around</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;myAspectJAdvice2&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;myPointcut2&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(public * com.itbaizhan.dao.UserDao.*(..))&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">&quot;myAfterReturning&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;myPointcut2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:after-returning</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringAOP-注解配置AOP"><a href="#SpringAOP-注解配置AOP" class="headerlink" title="SpringAOP_注解配置AOP"></a>SpringAOP_注解配置AOP</h2><p>Spring可以使用注解代替配置文件配置切面：</p><p>1.在xml中开启AOP注解支持</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启注解配置Aop --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:aspectj-autoproxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.在通知类上方加入注解<code>@Aspect</code></p><p>3.在通知方法上方加入注解&#96;@Before&#x2F;@AfterReturning&#x2F;@AfterThrowing&#x2F;@After&#x2F;@Around</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jdk.swing.interop.SwingInterOpUtils;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.JoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.ProceedingJoinPoint;</span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAspectJAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//后置通知</span></span><br><span class="line">    <span class="meta">@AfterReturning(&quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturning</span><span class="params">(JoinPoint joinPoint)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;切点方法名:&quot;</span>+joinPoint.getSignature().getName());</span><br><span class="line">        System.out.println(<span class="string">&quot;目标对象:&quot;</span>+joinPoint.getTarget());</span><br><span class="line">        System.out.println(<span class="string">&quot;打印日志&quot;</span>+joinPoint.getSignature().getName()+<span class="string">&quot;方法被执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    <span class="meta">@Before(&quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;,throwing = &quot;ex&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterThrowing</span><span class="params">(Exception ex)</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;异常通知...&quot;</span>);</span><br><span class="line">        System.err.println(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//最终通知</span></span><br><span class="line">    <span class="meta">@After(&quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfter</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;最终通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//环绕通知</span></span><br><span class="line">    <span class="meta">@Around(&quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">myAround</span><span class="params">(ProceedingJoinPoint proceedingJoinPoint)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> proceedingJoinPoint.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd2</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ac.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    userDao.update();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如何为一个类下的所有方法统一配置切点：</p><p>1.在通知类中添加方法配置切点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Pointcut(&quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pointCut</span><span class="params">()</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>2.在通知方法上使用定义好的切点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myBefore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;前置通知...&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(&quot;pointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">myAfterReturning</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;后置通知...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置类如何代替xml中AOP注解支持？</p><p>在配置类上方添加@EnableAspectJAutoProxy即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itbaizhan&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringAOP-原生Spring实现AOP"><a href="#SpringAOP-原生Spring实现AOP" class="headerlink" title="SpringAOP_原生Spring实现AOP"></a>SpringAOP_原生Spring实现AOP</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220414100615443.png" alt="image-20220414100615443"></p><p>除了AspectJ，Spring支持原生方式实现AOP。</p><p>1.引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.编写通知类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Spring原生Aop的通知类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAop</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span>, AfterReturningAdvice, ThrowsAdvice, MethodInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 目标方法的参数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue 目标方法的返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 目标方法的参数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    * 环绕通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation 目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发生异常了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Spring原生方式实现AOP时，只支持四种通知类型：</p><table><thead><tr><th>通知类型</th><th>实现接口</th></tr></thead><tbody><tr><td>前置通知</td><td>MethodBeforeAdvice</td></tr><tr><td>后置通知</td><td>AfterReturningAdvice</td></tr><tr><td>异常通知</td><td>ThrowsAdvice</td></tr><tr><td>环绕通知</td><td>MethodInterceptor</td></tr></tbody></table><p>3.编写配置类</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通知对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;springAop&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itbaizhan.advice.SpringAop&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 配置代理对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDaoProxy&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.aop.framework.ProxyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置目标对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;target&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置通知 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;interceptorNames&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>springAop<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 代理对象的生成方式  true：使用CGLib false：使用原生JDK生成--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;proxyTargetClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.编写测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoTest2</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean2.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ac.getBean(<span class="string">&quot;userDaoProxy&quot;</span>); <span class="comment">// 获取的是代理对象</span></span><br><span class="line">        userDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="SpringAOP-SchemaBased实现AOP"><a href="#SpringAOP-SchemaBased实现AOP" class="headerlink" title="SpringAOP_SchemaBased实现AOP"></a>SpringAOP_SchemaBased实现AOP</h2><p>SchemaBased(基础模式)配置方式是指使用Spring原生方式定义通知，而使用AspectJ框架配置切面。</p><h4 id="1-编写通知类"><a href="#1-编写通知类" class="headerlink" title="1.编写通知类"></a>1.编写通知类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringAop</span> <span class="keyword">implements</span> <span class="title class_">MethodBeforeAdvice</span>, AfterReturningAdvice, ThrowsAdvice, MethodInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前置通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 目标方法的参数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;前置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后置通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> returnValue 目标方法的返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 目标方法的参数列表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> target 目标对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(Object returnValue, Method method, Object[] args, Object target)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;后置通知&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> invocation 目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Throwable</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(MethodInvocation invocation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕前&quot;</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">proceed</span> <span class="operator">=</span> invocation.proceed();</span><br><span class="line">        System.out.println(<span class="string">&quot;环绕后&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 异常通知</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ex 异常对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发生异常了！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-配置切面-1"><a href="#2-配置切面-1" class="headerlink" title="2.配置切面"></a>2.配置切面</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;!-- 通知对象  --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;springAop2&quot;</span> class=<span class="string">&quot;com.itbaizhan.advice.SpringAop2&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line">    &lt;!-- 配置切面   --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">    &lt;!--  配置切点   --&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">&quot;myPointcut&quot;</span> expression=<span class="string">&quot;execution(* com.itbaizhan.dao.UserDao.*(..))&quot;</span>/&gt;</span><br><span class="line">    &lt;!-- 配置切面：advice-ref：通知对象 pointcut-ref：切点   --&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=<span class="string">&quot;springAop2&quot;</span> pointcut-ref=<span class="string">&quot;myPointcut&quot;</span>&gt;&lt;/aop:advisor&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h4 id="3-测试"><a href="#3-测试" class="headerlink" title="3.测试"></a>3.测试</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">t6</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">ac</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;aop3.xml&quot;</span>);</span><br><span class="line">    <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ac.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">    userDao.add();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SchemaBased(基础模式)配置AOP是指使用Spring原生方式定义通知，使用AspectJ框架配置切面</p><h2 id="Spring事务-事务简介"><a href="#Spring事务-事务简介" class="headerlink" title="Spring事务_事务简介"></a>Spring事务_事务简介</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220415003805258.png" alt="image-20220415003805258"></p><p>事务：不可分割的原子操作，即一系列的操作要么同时成功，要么同时失败。</p><p>开发过程中，事务管理一般在service层，service层中可能会操作多次数据库，这些操作是不可分割的，<strong>否则当程序报错时，可能会造成数据异常。</strong></p><p>如：张三给李四转账时，需要两次操作数据库：张三存款减少、李四存款增加。如果这两次数据库操作间出现异常，则会造成数据错误。</p><h4 id="1-准备数据库"><a href="#1-准备数据库" class="headerlink" title="1.准备数据库"></a>1.准备数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `spring` ;</span><br><span class="line">USE `spring`;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `account`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> `account` (</span><br><span class="line">  `id` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `balance` <span class="keyword">double</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">3</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"><span class="keyword">insert</span>  <span class="keyword">into</span> `account`(`id`,`username`,`balance`) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>,<span class="number">1000</span>),(<span class="number">2</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h4 id="2-创建maven项目，引入依赖"><a href="#2-创建maven项目，引入依赖" class="headerlink" title="2.创建maven项目，引入依赖"></a>2.创建maven项目，引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itbaizhan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring_transfer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  mybatis  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">           <span class="comment">&lt;!--  mysql驱动包  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.26<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--  druid连接池  --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- spring --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- MyBatis与Spring的整合包，该包可以让Spring创建MyBatis的对象 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- junit,如果Spring5整合junit，则junit版本至少在4.12以上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- spring整合测试模块 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-创建配置文件"><a href="#3-创建配置文件" class="headerlink" title="3.创建配置文件"></a>3.创建配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建druid数据源对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itbaizhan.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-编写JAVA代码"><a href="#4-编写JAVA代码" class="headerlink" title="4.编写JAVA代码"></a>4.编写JAVA代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.domain;</span><br><span class="line"></span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Account</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> id; <span class="comment">//账户</span></span><br><span class="line">    <span class="keyword">private</span> String username;<span class="comment">//用户名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> balance;<span class="comment">//余额</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(<span class="type">int</span> id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUsername</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getBalance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBalance</span><span class="params">(<span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Account&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, balance=&quot;</span> + balance +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Account</span><span class="params">(<span class="type">int</span> id, String username, <span class="type">double</span> balance)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.balance = balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Select;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Update;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line">    <span class="comment">//根据id查找用户</span></span><br><span class="line">    <span class="meta">@Select(&quot;select * from account where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改用户</span></span><br><span class="line">    <span class="meta">@Update(&quot;update account set balance = #&#123;balance&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">package com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line">import com.itbaizhan.dao.AccountDao;</span><br><span class="line">import com.itbaizhan.domain.Account;</span><br><span class="line">import org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line">import org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line">@Service</span><br><span class="line">public class AccountService &#123;</span><br><span class="line">    @Autowired</span><br><span class="line">    private AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    public void transfer(int id1,int id2,double price)</span><br><span class="line">    &#123;</span><br><span class="line">        // 转出人减少余额</span><br><span class="line">        Account account1 = accountDao.findById(id1);</span><br><span class="line">        account1.setBalance(account1.getBalance()-price);</span><br><span class="line">        accountDao.update(account1);</span><br><span class="line">        int i = 1/0;//模拟程序出错</span><br><span class="line"></span><br><span class="line">        //转入人增加余额</span><br><span class="line">        Account account2 = accountDao.findById(id2);</span><br><span class="line">        account2.setBalance(account2.getBalance()+price);</span><br><span class="line">        accountDao.update(account2);</span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="5-测试转账"><a href="#5-测试转账" class="headerlink" title="5.测试转账"></a>5.测试转账</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.ContextConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringJUnit4ClassRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(locations = &quot;classpath:ApplicationContext.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        accountService.transfer(<span class="number">1</span>,<span class="number">2</span>,<span class="number">300</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时没有事务管理，会造成张三的余额减少，而李四的余额并没有增加。所以事务处理位于业务层，即一个service方法是不能分割的。</p><h2 id="Spring事务-Spring事务管理方案"><a href="#Spring事务-Spring事务管理方案" class="headerlink" title="Spring事务_Spring事务管理方案"></a>Spring事务_Spring事务管理方案</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220415091723297.png" alt="image-20220415091723297"></p><p>在service层手动添加事务可以解决该问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SqlSessionTemplate sqlSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> id1, <span class="type">int</span> id2, <span class="type">double</span> price)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="comment">// account1修改余额</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account1</span> <span class="operator">=</span> accountDao.findById(id1);</span><br><span class="line">        account1.setBalance(account1.getBalance()-price);</span><br><span class="line">        accountDao.update(account1);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>; <span class="comment">// 模拟转账出错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// account2修改余额</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account2</span> <span class="operator">=</span> accountDao.findById(id2);</span><br><span class="line">        account2.setBalance(account2.getBalance()+price);</span><br><span class="line">        accountDao.update(account2);  </span><br><span class="line">        sqlSession.commit();</span><br><span class="line">    &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">        sqlSession.rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Spring管理下不允许手动提交和回滚事务。此时我们需要使用Spring的事务管理方案，在Spring框架中提供了两种事务管理方案：</p><ol><li>编程式事务：通过编写代码实现事务管理。</li><li>声明式事务：基于AOP技术实现事务管理。</li></ol><p>在Spring框架中，编程式事务管理很少使用，我们对声明式事务管理进行学习</p><p><strong>Spring的声明式事务管理在底层采用了AOP技术，其最大的优点在于无需通过编程的方式管理事务，只需要在配置文件中进行相关的规则声明，就可以将事务规则应用到业务逻辑中。</strong></p><p>使用AOP技术为·Service方法添加如下通知：</p><p><img src="https://www.itbaizhan.com/wiki/imgs/image-20211201115617925.png" alt="image-20211201115617925"></p><h2 id="Spring事务-Spring事务管理器"><a href="#Spring事务-Spring事务管理器" class="headerlink" title="Spring事务_Spring事务管理器"></a>Spring事务_Spring事务管理器</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220415094549613.png" alt="image-20220415094549613"></p><p>​Spring依赖事务管理器进行事务管理，事务管理器即一个通知类，我们为该通知类设置切点为service层方法即可完成事务自动管理。</p><p>​ 由于不同技术操作数据库，进行事务操作的方法不同。如：JDBC提交事务是<code>connection.commit()</code>，MyBatis提交事务是<code>sqlSession.commit()</code>，所以Spring提供了多个事务管理器。</p><table><thead><tr><th>事务管理器名称</th><th>作用</th></tr></thead><tbody><tr><td>org.springframework.jdbc.datasource.DataSourceTransactionManager</td><td>针对JDBC技术提供的事务管理器。适用于JDBC和MyBatis。</td></tr><tr><td>org.springframework.orm.hibernate3.HibernateTransactionManager</td><td>针对于Hibernate框架提供的事务管理器。适用于Hibernate框架。</td></tr><tr><td>org.springframework.orm.jpa.JpaTransactionManager</td><td>针对于JPA技术提供的事务管理器。适用于JPA技术。</td></tr><tr><td>org.springframework.transaction.jta.JtaTransactionManager</td><td>跨越了多个事务管理源。适用在两个或者是多个不同的数据源中实现事务控制。</td></tr></tbody></table><p>我们使用MyBatis操作数据库，接下来使用<code>DataSourceTransactionManager</code>进行事务管理。</p><h4 id="1-引入依赖"><a href="#1-引入依赖" class="headerlink" title="1.引入依赖"></a>1.引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 事务管理 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- AspectJ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-在配置文件中引入约束"><a href="#2-在配置文件中引入约束" class="headerlink" title="2.在配置文件中引入约束"></a>2.在配置文件中引入约束</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">xmlns:aop=&quot;http://www.springframework.org/schema/aop&quot;</span><br><span class="line">xmlns:tx=&quot;http://www.springframework.org/schema/tx&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http://www.springframework.org/schema/aop</span><br><span class="line">http://www.springframework.org/schema/aop/spring-aop.xsd</span><br><span class="line">http://www.springframework.org/schema/tx</span><br><span class="line">http://www.springframework.org/schema/tx/spring-tx.xsd</span><br></pre></td></tr></table></figure><h4 id="3-进行事务配置"><a href="#3-进行事务配置" class="headerlink" title="3.进行事务配置"></a>3.进行事务配置</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns:aop=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span><br><span class="line">       xmlns:tx=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/context/spring-context.xsd</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/aop</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/aop/spring-aop.xsd</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/tx</span></span><br><span class="line"><span class="string">                http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--包扫描  --&gt;</span><br><span class="line">    &lt;context:component-scan base-<span class="keyword">package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;&lt;/context:component-scan&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 创建druid数据源对象 --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;dataSource&quot;</span> class=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;driverClassName&quot;</span> value=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;url&quot;</span> value=<span class="string">&quot;jdbc:mysql:///spring&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;username&quot;</span> value=<span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;password&quot;</span> value=<span class="string">&quot;root&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;sqlSessionFactory&quot;</span> class=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;mapperScanner&quot;</span> class=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;basePackage&quot;</span> value=<span class="string">&quot;com.itbaizhan.dao&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 事务管理器   --&gt;</span><br><span class="line">    &lt;bean id=<span class="string">&quot;transactionManager&quot;</span> class=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;dataSource&quot;</span> ref=<span class="string">&quot;dataSource&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 进行事务相关配置  --&gt;</span><br><span class="line">    &lt;tx:advice id=<span class="string">&quot;txAdvice&quot;</span>&gt;</span><br><span class="line">        &lt;tx:attributes&gt;</span><br><span class="line">            &lt;tx:method name=<span class="string">&quot;*&quot;</span>/&gt;</span><br><span class="line">        &lt;/tx:attributes&gt;</span><br><span class="line">    &lt;/tx:advice&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 配置切面  --&gt;</span><br><span class="line">    &lt;aop:config&gt;</span><br><span class="line">        &lt;!-- 配置切点  --&gt;</span><br><span class="line">        &lt;aop:pointcut id=<span class="string">&quot;pointcut&quot;</span> expression=<span class="string">&quot;execution(* com.itbaizhan.service.*.*(..))&quot;</span>/&gt;</span><br><span class="line">        &lt;!-- 配置通知 --&gt;</span><br><span class="line">        &lt;aop:advisor advice-ref=<span class="string">&quot;txAdvice&quot;</span> pointcut-ref=<span class="string">&quot;pointcut&quot;</span>&gt;&lt;/aop:advisor&gt;</span><br><span class="line">    &lt;/aop:config&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><h2 id="Spring事务-事务控制的API"><a href="#Spring事务-事务控制的API" class="headerlink" title="Spring事务_事务控制的API"></a>Spring事务_事务控制的API</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220415153909555.png" alt="image-20220415153909555"></p><p>Spring进行事务控制的功能是由三个接口提供的，这三个接口是Spring实现的，在开发中我们很少使用到，只需要了解他们的作用即可：</p><h3 id="PlatformTransactionManager接口"><a href="#PlatformTransactionManager接口" class="headerlink" title="PlatformTransactionManager接口"></a>PlatformTransactionManager接口</h3><p>PlatformTransactionManager是Spring提供的事务管理器接口，所有事务管理器都实现了该接口。该接口中提供了三个实务操作方法：</p><ul><li>TransactionStatus getTransaction（TransactionDefinition definition）：获取事务状态信息。</li><li>void commit（TransactionStatus status）：事务提交</li><li>void rollback（TransactionStatus status）：事务回滚</li></ul><h3 id="TransactionDefinition接口"><a href="#TransactionDefinition接口" class="headerlink" title="TransactionDefinition接口"></a>TransactionDefinition接口</h3><p>TransactionDefinition是事务的定义信息对象，它有如下方法;</p><ul><li>String getName()：获取事务对象名称。</li><li>int getIsolationLevel()：获取事务的隔离级别。</li><li>int getPropagationBehavior()：获取事务的传播行为。</li><li>int getTimeout()：获取事务的超时时间。</li><li>boolean isReadOnly()：获取事务是否只读。</li></ul><h3 id="TransactionStatus接口"><a href="#TransactionStatus接口" class="headerlink" title="TransactionStatus接口"></a>TransactionStatus接口</h3><p>TransactionStatus是事务的状态接口，它描述了某一时间点上事务的状态信息。它有如下方法：</p><ul><li>void flush() 刷新事务</li><li>boolean hasSavepoint() 获取是否存在保存点</li><li>boolean isCompleted() 获取事务是否完成</li><li>boolean isNewTransaction() 获取是否是新事务</li><li>boolean isRollbackOnly() 获取是否回滚</li><li>void setRollbackOnly() 设置事务回滚</li></ul><h2 id="Spring事务-事务的相关配置"><a href="#Spring事务-事务的相关配置" class="headerlink" title="Spring事务_事务的相关配置"></a>Spring事务_事务的相关配置</h2><p>在<code>&lt;tx:advice&gt;</code>中可以进行事务的相关配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br></pre></td></tr></table></figure><p><a href="tx:method">tx:method</a> 中的属性：</p><p>name：指定配置的方法。<em>表示所有方法，find</em>表示所有以find开头的方法。</p><p>read-only：是否是只读事务，只读事务不存在数据的修改，数据库将会为只读事务提供一些优化手段，会对性能有一定提升，建议在查询中开启只读事务。</p><p>timeout：指定超时时间，在限定的时间内不能完成所有操作就会抛异常。默认永不超时</p><p>rollback-for：指定某个异常事务回滚，其他异常不回滚。默认所有异常回滚。</p><p>no-rollback-for：指定某个异常不回滚，其他异常回滚。默认所有异常回滚。</p><p>propagation：事务的传播行为</p><p>isolation：事务的隔离级别</p><h2 id="Spring事务-事务的传播行为"><a href="#Spring事务-事务的传播行为" class="headerlink" title="Spring事务_事务的传播行为"></a>Spring事务_事务的传播行为</h2><p><img src="C:\Users\LZH\AppData\Roaming\Typora\typora-user-images\image-20220415233938742.png" alt="image-20220415233938742"></p><p>事务传播行为是指多个含有事务的方法相互调用时，事务如何在这些方法间传播。</p><p>如果在service层的方法中调用了其他的service方法，假设每次执行service方法都要开启事务，此时就无法保证外层方法和内层方法处于同一个事务当中。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// method1的所有方法在同一个事务中</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// 此时会开启一个新事务，这就无法保证method1()中所有的代码是在同一个事务中</span></span><br><span class="line">    method2();</span><br><span class="line">    System.out.println(<span class="string">&quot;method1&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;method2&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事务的传播特性就是解决这个问题的，Spring帮助我们将外层方法和内层方法放入同一事务中。</p><table><thead><tr><th>传播行为</th><th>介绍</th></tr></thead><tbody><tr><td>REQUIRED</td><td>默认。支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。</td></tr><tr><td>SUPPORTS</td><td>支持当前事务，如果当前没有事务，就以非事务方式执行。</td></tr><tr><td>MANDATORY</td><td>支持当前事务，如果当前没有事务，就抛出异常。</td></tr><tr><td>REQUIRES_NEW</td><td>新建事务，如果当前存在事务，把当前事务挂起。</td></tr><tr><td>NOT_SUPPORTED</td><td>以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。</td></tr><tr><td>NEVER</td><td>以非事务方式执行，如果当前存在事务，则抛出异常。</td></tr><tr><td>NESTED</td><td>必须在事务状态下执行，如果没有事务则新建事务，如果当前有事务则创建一个嵌套事务</td></tr></tbody></table><h2 id="Spring事务-事务的隔离级别"><a href="#Spring事务-事务的隔离级别" class="headerlink" title="Spring事务_事务的隔离级别"></a>Spring事务_事务的隔离级别</h2><p>事务隔离级别反映事务提交并访问时的处理态度</p><h3 id="隔离级别越高，数据出问题的可能性越低，但效率也会越低"><a href="#隔离级别越高，数据出问题的可能性越低，但效率也会越低" class="headerlink" title="隔离级别越高，数据出问题的可能性越低，但效率也会越低"></a>隔离级别越高，数据出问题的可能性越低，但效率也会越低</h3><table><thead><tr><th>隔离级别</th><th>脏读</th><th>不可重复读</th><th>幻读</th></tr></thead><tbody><tr><td>READ_UNCOMMITED（读取未提交内容）</td><td>Yes</td><td>Yes</td><td>Yes</td></tr><tr><td>READ_COMMITED（读取提交内容）</td><td>No</td><td>Yes</td><td>Yes</td></tr><tr><td>REPEATABLE_READ（重复读）</td><td>No</td><td>No</td><td>Yes</td></tr><tr><td>SERIALIZABLE（可串行化）</td><td>No</td><td>No</td><td>No</td></tr></tbody></table><p>如果设置为DEFAULT会使用数据库的隔离级别</p><ul><li>SqlServer , Oracle默认的事务隔离级别是READ_COMMITED</li><li>Mysql的默认隔离级别是REPEATABLE_READ</li></ul><h2 id="Spring事务-注解配置声明式事务"><a href="#Spring事务-注解配置声明式事务" class="headerlink" title="Spring事务_注解配置声明式事务"></a>Spring事务_注解配置声明式事务</h2><p>Spring支持使用注解配置声明式事务。用法如下：</p><h4 id="1-注册事务注解驱动"><a href="#1-注册事务注解驱动" class="headerlink" title="1.注册事务注解驱动"></a>1.注册事务注解驱动</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/context/spring-context.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/aop/spring-aop.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/tx</span></span></span><br><span class="line"><span class="string"><span class="tag">                http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--包扫描  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itbaizhan&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 创建druid数据源对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql:///spring&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScanner&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.itbaizhan.dao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 注册事务相关配置  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器   --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash; 进行事务相关配置  &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;tx:advice id=&quot;txAdvice&quot;&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;tx:attributes&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;tx:method name=&quot;*&quot; propagation=&quot;REQUIRED&quot; isolation=&quot;DEFAULT&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash; 查询方法是只读事务 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;tx:method name=&quot;find*&quot; read-only=&quot;true&quot; isolation=&quot;READ_COMMITTED&quot;&gt;&lt;/tx:method&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;/tx:attributes&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/tx:advice&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    &amp;lt;!&amp;ndash; 配置切面  &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;aop:config&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash; 配置切点  &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:pointcut id=&quot;pointcut&quot; expression=&quot;execution(* com.itbaizhan.service.*.*(..))&quot;/&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &amp;lt;!&amp;ndash; 配置通知 &amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;aop:advisor advice-ref=&quot;txAdvice&quot; pointcut-ref=&quot;pointcut&quot;&gt;&lt;/aop:advisor&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    &lt;/aop:config&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册事务注解驱动 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tx:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="2-在需要事务支持的方法或类上加-Transactional"><a href="#2-在需要事务支持的方法或类上加-Transactional" class="headerlink" title="2.在需要事务支持的方法或类上加@Transactional"></a>2.在需要事务支持的方法或类上加@Transactional</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.dao.AccountDao;</span><br><span class="line"><span class="keyword">import</span> com.itbaizhan.domain.Account;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Propagation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="comment">// 作用于类上时，该类的所有public方法将都具有该类型的事务属性</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRED,isolation = Isolation.DEFAULT )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(<span class="type">int</span> id1,<span class="type">int</span> id2,<span class="type">double</span> price)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 转出人减少余额</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account1</span> <span class="operator">=</span> accountDao.findById(id1);</span><br><span class="line">        account1.setBalance(account1.getBalance()-price);</span><br><span class="line">        accountDao.update(account1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//转入人增加余额</span></span><br><span class="line">        <span class="type">Account</span> <span class="variable">account2</span> <span class="operator">=</span> accountDao.findById(id2);</span><br><span class="line">        account2.setBalance(account2.getBalance()+price);</span><br><span class="line">        accountDao.update(account2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(isolation = Isolation.READ_UNCOMMITTED,readOnly = true)</span></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findById</span><span class="params">(<span class="type">int</span> id)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-配置类代替xml中的注解事务支持：在配置类上方写-Enable-TranscationManagement"><a href="#3-配置类代替xml中的注解事务支持：在配置类上方写-Enable-TranscationManagement" class="headerlink" title="3.配置类代替xml中的注解事务支持：在配置类上方写@Enable TranscationManagement"></a>3.配置类代替xml中的注解事务支持：在配置类上方写@Enable TranscationManagement</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itbaizhan;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.druid.pool.DruidDataSource;</span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.SqlSessionFactoryBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.jdbc.datasource.DataSourceTransactionManager;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.EnableTransactionManagement;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.sql.DataSource;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itbaizhan&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        druidDataSource.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        druidDataSource.setUrl(<span class="string">&quot;jdbc:mysql:///spring&quot;</span>);</span><br><span class="line">        druidDataSource.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        druidDataSource.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">getSqlSession</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">sqlSessionFactoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        sqlSessionFactoryBean.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> sqlSessionFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSourceTransactionManager <span class="title function_">getTransactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">dataSourceTransactionManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        dataSourceTransactionManager.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> dataSourceTransactionManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
